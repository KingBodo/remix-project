LavaPack.loadBundle([[1901,{"./utils":1906,"@scure/base":2896,buffer:3943,tweetnacl:5486},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t};Object.defineProperty(n,"__esModule",{value:!0}),n.getEncryptionPublicKey=n.decryptSafely=n.decrypt=n.encryptSafely=n.encrypt=void 0;const o=e("@scure/base"),i=a(e("tweetnacl")),c=e("./utils");function l({publicKey:e,data:t,version:n}){if((0,c.isNullish)(e))throw new Error("Missing publicKey parameter");if((0,c.isNullish)(t))throw new Error("Missing data parameter");if((0,c.isNullish)(n))throw new Error("Missing version parameter");if("x25519-xsalsa20-poly1305"===n){if("string"!=typeof t)throw new Error("Message data must be given as a string");const n=i.box.keyPair();let r;try{r=o.base64.decode(e)}catch(e){throw new Error("Bad public key")}const s=o.utf8.decode(t),a=i.randomBytes(i.box.nonceLength),c=i.box(s,a,r,n.secretKey);return{version:"x25519-xsalsa20-poly1305",nonce:o.base64.encode(a),ephemPublicKey:o.base64.encode(n.publicKey),ciphertext:o.base64.encode(c)}}throw new Error("Encryption type/version not supported")}function d({encryptedData:e,privateKey:n}){if((0,c.isNullish)(e))throw new Error("Missing encryptedData parameter");if((0,c.isNullish)(n))throw new Error("Missing privateKey parameter");if("x25519-xsalsa20-poly1305"===e.version){const r=t.from(n,"hex"),s=i.box.keyPair.fromSecretKey(r).secretKey,a=o.base64.decode(e.nonce),c=o.base64.decode(e.ciphertext),l=o.base64.decode(e.ephemPublicKey),d=i.box.open(c,a,l,s);try{if(!d)throw new Error;const e=o.utf8.encode(d);if(!e)throw new Error;return e}catch(e){if(e&&"string"==typeof e.message&&e.message.length)throw new Error(`Decryption failed: ${e.message}`);throw new Error("Decryption failed.")}}throw new Error("Encryption type/version not supported.")}n.encrypt=l,n.encryptSafely=function({publicKey:e,data:n,version:r}){if((0,c.isNullish)(e))throw new Error("Missing publicKey parameter");if((0,c.isNullish)(n))throw new Error("Missing data parameter");if((0,c.isNullish)(r))throw new Error("Missing version parameter");if("object"==typeof n&&n&&"toJSON"in n)throw new Error("Cannot encrypt with toJSON property.  Please remove toJSON property");const s={data:n,padding:""},a=t.byteLength(JSON.stringify(s),"utf-8")%2048;let o=0;return a>0&&(o=2048-a-16),s.padding="0".repeat(o),l({publicKey:e,data:JSON.stringify(s),version:r})},n.decrypt=d,n.decryptSafely=function({encryptedData:e,privateKey:t}){if((0,c.isNullish)(e))throw new Error("Missing encryptedData parameter");if((0,c.isNullish)(t))throw new Error("Missing privateKey parameter");return JSON.parse(d({encryptedData:e,privateKey:t})).data},n.getEncryptionPublicKey=function(e){const n=t.from(e,"hex"),r=i.box.keyPair.fromSecretKey(n).publicKey;return o.base64.encode(r)}}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/dist/encryption.js"}],[1902,{"./encryption":1901,"./personal-sign":1903,"./sign-eip7702-authorization":1904,"./sign-typed-data":1905,"./utils":1906},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(n,"__esModule",{value:!0}),n.normalize=n.concatSig=void 0,s(e("./personal-sign"),n),s(e("./sign-typed-data"),n),s(e("./encryption"),n),s(e("./sign-eip7702-authorization"),n);var a=e("./utils");Object.defineProperty(n,"concatSig",{enumerable:!0,get:function(){return a.concatSig}}),Object.defineProperty(n,"normalize",{enumerable:!0,get:function(){return a.normalize}})}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/dist/index.js"}],[1903,{"./utils":1906,"@ethereumjs/util":1914},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.extractPublicKey=n.recoverPersonalSignature=n.personalSign=void 0;const r=e("@ethereumjs/util"),s=e("./utils");function a(e,t){const n=(0,r.hashPersonalMessage)((0,s.legacyToBuffer)(e));return(0,s.recoverPublicKey)(n,t)}n.personalSign=function({privateKey:e,data:t}){if((0,s.isNullish)(t))throw new Error("Missing data parameter");if((0,s.isNullish)(e))throw new Error("Missing privateKey parameter");const n=(0,s.legacyToBuffer)(t),a=(0,r.hashPersonalMessage)(n),o=(0,r.ecsign)(a,e);return(0,s.concatSig)((0,r.toBuffer)(o.v),o.r,o.s)},n.recoverPersonalSignature=function({data:e,signature:t}){if((0,s.isNullish)(e))throw new Error("Missing data parameter");if((0,s.isNullish)(t))throw new Error("Missing signature parameter");const n=a(e,t),o=(0,r.publicToAddress)(n);return(0,r.bufferToHex)(o)},n.extractPublicKey=function({data:e,signature:t}){if((0,s.isNullish)(e))throw new Error("Missing data parameter");if((0,s.isNullish)(t))throw new Error("Missing signature parameter");return`0x${a(e,t).toString("hex")}`}}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/dist/personal-sign.js"}],[1904,{"./utils":1906,"@ethereumjs/rlp":448,"@ethereumjs/util":1914,"@metamask/utils":2822,buffer:3943,"ethereum-cryptography/keccak":4170},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.hashEIP7702Authorization=n.recoverEIP7702Authorization=n.signEIP7702Authorization=void 0;const r=e("@ethereumjs/rlp"),s=e("@ethereumjs/util"),a=e("@metamask/utils"),o=e("ethereum-cryptography/keccak"),i=e("./utils");function c(e){l(e);const n=(0,r.encode)(e),s=t.concat([t.from("05","hex"),n]);return t.from((0,o.keccak256)(s))}function l(e){if((0,i.isNullish)(e))throw new Error("Missing authorization parameter");const[t,n,r]=e;if((0,i.isNullish)(t))throw new Error("Missing chainId parameter");if((0,i.isNullish)(n))throw new Error("Missing contractAddress parameter");if((0,i.isNullish)(r))throw new Error("Missing nonce parameter")}n.signEIP7702Authorization=function({privateKey:e,authorization:t}){if(l(t),(0,i.isNullish)(e))throw new Error("Missing privateKey parameter");const n=c(t),{r:r,s:a,v:o}=(0,s.ecsign)(n,e),d=(0,s.toBuffer)(o);return(0,i.concatSig)(d,r,a)},n.recoverEIP7702Authorization=function({signature:e,authorization:t}){if(l(t),(0,i.isNullish)(e))throw new Error("Missing signature parameter");const n=c(t),r=(0,i.recoverPublicKey)(n,e),o=(0,s.publicToAddress)(r);return(0,a.bytesToHex)(o)},n.hashEIP7702Authorization=c}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/dist/sign-eip7702-authorization.js"}],[1905,{"./utils":1906,"@ethereumjs/util":1914,"@metamask/abi-utils":1883,"@metamask/abi-utils/dist/parsers":1892,"@metamask/abi-utils/dist/utils":1900,"@metamask/utils":2822,"ethereum-cryptography/keccak":4170},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.recoverTypedSignature=n.signTypedData=n.typedSignatureHash=n.TypedDataUtils=n.TYPED_MESSAGE_SCHEMA=n.SignTypedDataVersion=void 0;const r=e("@ethereumjs/util"),s=e("@metamask/abi-utils"),a=e("@metamask/abi-utils/dist/parsers"),o=e("@metamask/abi-utils/dist/utils"),i=e("@metamask/utils"),c=e("ethereum-cryptography/keccak"),l=e("./utils");var d;function u(e,t){if(!Object.keys(d).includes(e))throw new Error(`Invalid version: '${e}'`);if(t&&!t.includes(e))throw new Error(`SignTypedDataVersion not allowed: '${e}'. Allowed versions are: ${t.join(", ")}`)}function p(e,t){(0,i.assert)(null!==t,`Unable to encode value: Invalid number. Expected a valid number value, but received "${t}".`);const n=BigInt(t),r=(0,a.getLength)(e),s=BigInt(2)**BigInt(r)-BigInt(1);return(0,i.assert)(n>=-s&&n<=s,`Unable to encode value: Number "${t}" is out of range for type "${e}".`),n}function h(e){let t=BigInt(0);for(let n=0;n<e.length;n++){const r=BigInt(e.charCodeAt(n)-48);t*=BigInt(10),t+=r>=49?r-BigInt(49)+BigInt(10):r>=17?r-BigInt(17)+BigInt(10):r}return(0,o.padStart)((0,i.bigIntToBytes)(t),20)}function m(e,t,n,a,l){if(u(l,[d.V3,d.V4]),e[n]!==undefined)return["bytes32",l===d.V4&&null==a?"0x0000000000000000000000000000000000000000000000000000000000000000":(0,r.arrToBufArr)((0,c.keccak256)(f(n,a,e,l)))];if("function"===n)throw new Error('Unsupported or invalid type: "function"');if(a===undefined)throw new Error(`missing value for field ${t} of type ${n}`);if("address"===n){if("number"==typeof a)return["address",(0,o.padStart)((0,i.numberToBytes)(a),20)];if((0,i.isStrictHexString)(a))return["address",(0,i.add0x)(a)];if("string"==typeof a)return["address",h(a).subarray(0,20)]}if("bool"===n)return["bool",Boolean(a)];if("bytes"===n)return"number"==typeof a?a=(0,i.numberToBytes)(a):(0,i.isStrictHexString)(a)||"0x"===a?a=(0,i.hexToBytes)(a):"string"==typeof a&&(a=(0,i.stringToBytes)(a)),["bytes32",(0,r.arrToBufArr)((0,c.keccak256)(a))];if(n.startsWith("bytes")&&"bytes"!==n&&!n.includes("["))return"number"==typeof a?a<0?["bytes32",new Uint8Array(32)]:["bytes32",(0,i.bigIntToBytes)(BigInt(a))]:(0,i.isStrictHexString)(a)?["bytes32",(0,i.hexToBytes)(a)]:["bytes32",a];if(n.startsWith("int")&&!n.includes("[")){const e=p(n,a);return e>=BigInt(0)?["uint256",e]:["int256",e]}if("string"===n)return a="number"==typeof a?(0,i.numberToBytes)(a):(0,i.stringToBytes)(null!=a?a:""),["bytes32",(0,r.arrToBufArr)((0,c.keccak256)(a))];if(n.endsWith("]")){if(l===d.V3)throw new Error("Arrays are unimplemented in encodeData; use V4 extension");const o=n.slice(0,n.lastIndexOf("[")),i=a.map((n=>m(e,t,o,n,l)));return["bytes32",(0,r.arrToBufArr)((0,c.keccak256)((0,s.encode)(i.map((([e])=>e)),i.map((([,e])=>e)))))]}return[n,a]}function f(e,t,n,a){u(a,[d.V3,d.V4]);const o=["bytes32"],i=[C(e,n)];for(const r of n[e]){if(a===d.V3&&t[r.name]===undefined)continue;const[e,s]=m(n,r.name,r.type,t[r.name],a);o.push(e),i.push(s)}return(0,r.arrToBufArr)((0,s.encode)(o,i))}function g(e,t){let n="";const r=b(e,t);r.delete(e);const s=[e,...Array.from(r).sort()];for(const e of s){if(!t[e])throw new Error(`No type definition specified: ${e}`);n+=`${e}(${t[e].map((({name:e,type:t})=>`${t} ${e}`)).join(",")})`}return n}function b(e,t,n=new Set){if("string"!=typeof e)throw new Error(`Invalid findTypeDependencies input ${JSON.stringify(e)}`);const r=e.match(/^\w*/u);if([e]=r,n.has(e)||t[e]===undefined)return n;n.add(e);for(const r of t[e])b(r.type,t,n);return n}function y(e,t,n,s){u(s,[d.V3,d.V4]);const a=f(e,t,n,s),o=(0,c.keccak256)(a);return(0,r.arrToBufArr)(o)}function C(e,t){const n=(0,i.stringToBytes)(g(e,t));return(0,r.arrToBufArr)((0,c.keccak256)(n))}function w(e){const t={};for(const r in n.TYPED_MESSAGE_SCHEMA.properties)e[r]&&(t[r]=e[r]);return"types"in t&&(t.types=Object.assign({EIP712Domain:[]},t.types)),t}function v(e,t){u(t,[d.V3,d.V4]);const n=w(e),{domain:r}=n;return y("EIP712Domain",r,{EIP712Domain:n.types.EIP712Domain},t)}function k(e,t){if((0,a.isArrayType)(e)&&Array.isArray(t)){const[n]=(0,a.getArrayType)(e);return t.map((e=>k(n,e)))}if("address"===e){if((0,i.isStrictHexString)(t))return(0,o.padStart)((0,i.hexToBytes)(t).subarray(0,20),20);if(t instanceof Uint8Array)return(0,o.padStart)(t.subarray(0,20),20)}if("bool"===e)return Boolean(t);if(e.startsWith("bytes")&&"bytes"!==e){const n=(0,a.getByteLength)(e);if("number"==typeof t)return t<0?new Uint8Array:(0,i.numberToBytes)(t).subarray(0,n);if((0,i.isStrictHexString)(t))return(0,i.hexToBytes)(t).subarray(0,n);if(t instanceof Uint8Array)return t.subarray(0,n)}if(e.startsWith("uint")&&"number"==typeof t)return Math.abs(t);if(e.startsWith("int")&&"number"==typeof t){const n=(0,a.getLength)(e);return BigInt.asIntN(n,BigInt(t))}return t}function S(e,t){return t.map((t=>{if("string"==typeof t||"number"==typeof t||"bigint"==typeof t){const n=p(e,t);if(n>=BigInt(0))return(0,o.padStart)((0,i.bigIntToBytes)(n),32);const r=(0,a.getLength)(e),s=BigInt.asIntN(r,n);return(0,i.signedBigIntToBytes)(s,32)}return t}))}function T(e){const t=new Error("Expect argument to be non-empty array");if("object"!=typeof e||!("length"in e)||!e.length)throw t;const n=e.map((({name:e,type:t,value:n})=>{if("address[]"===t)return{name:e,type:"bytes32[]",value:(r=n,r.map((e=>"number"==typeof e?(0,o.padStart)((0,i.numberToBytes)(e),32):(0,i.isStrictHexString)(e)?(0,o.padStart)((0,i.hexToBytes)(e).subarray(0,32),32):e instanceof Uint8Array?(0,o.padStart)(e.subarray(0,32),32):e)))};var r;if(t.startsWith("int")&&(0,a.isArrayType)(t)){const[r,s]=(0,a.getArrayType)(t);return{name:e,type:`bytes32[${null!=s?s:""}]`,value:S(r,n)}}return{name:e,type:t,value:k(t,n)}})),d=n.map((e=>"bytes"!==e.type?e.value:(0,l.legacyToBuffer)(e.value))),u=n.map((e=>{if("function"===e.type)throw new Error('Unsupported or invalid type: "function"');return e.type})),p=e.map((e=>{if(!e.name)throw t;return`${e.type} ${e.name}`}));return(0,r.arrToBufArr)((0,c.keccak256)((0,s.encodePacked)(["bytes32","bytes32"],[(0,c.keccak256)((0,s.encodePacked)(["string[]"],[p],!0)),(0,c.keccak256)((0,s.encodePacked)(u,d,!0))])))}!function(e){e.V1="V1",e.V3="V3",e.V4="V4"}(d=n.SignTypedDataVersion||(n.SignTypedDataVersion={})),n.TYPED_MESSAGE_SCHEMA={type:"object",properties:{types:{type:"object",additionalProperties:{type:"array",items:{type:"object",properties:{name:{type:"string"},type:{type:"string"}},required:["name","type"]}}},primaryType:{type:"string"},domain:{type:"object"},message:{type:"object"}},required:["types","primaryType","domain","message"]},n.TypedDataUtils={encodeData:f,encodeType:g,findTypeDependencies:b,hashStruct:y,hashType:C,sanitizeData:w,eip712Hash:function(e,t){u(t,[d.V3,d.V4]);const n=w(e),s=[(0,i.hexToBytes)("1901")];return s.push(v(e,t)),"EIP712Domain"!==n.primaryType&&s.push(y(n.primaryType,n.message,n.types,t)),(0,r.arrToBufArr)((0,c.keccak256)((0,i.concatBytes)(s)))},eip712DomainHash:v},n.typedSignatureHash=function(e){const t=T(e);return(0,i.bytesToHex)(t)},n.signTypedData=function({privateKey:e,data:t,version:s}){if(u(s),(0,l.isNullish)(t))throw new Error("Missing data parameter");if((0,l.isNullish)(e))throw new Error("Missing private key parameter");const a=s===d.V1?T(t):n.TypedDataUtils.eip712Hash(t,s),o=(0,r.ecsign)(a,e);return(0,l.concatSig)((0,r.arrToBufArr)((0,i.bigIntToBytes)(o.v)),o.r,o.s)},n.recoverTypedSignature=function({data:e,signature:t,version:s}){if(u(s),(0,l.isNullish)(e))throw new Error("Missing data parameter");if((0,l.isNullish)(t))throw new Error("Missing signature parameter");const a=s===d.V1?T(e):n.TypedDataUtils.eip712Hash(e,s),o=(0,l.recoverPublicKey)(a,t),c=(0,r.publicToAddress)(o);return(0,i.bytesToHex)(c)}}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/dist/sign-typed-data.js"}],[1906,{"@ethereumjs/util":1914,"@metamask/utils":2822,buffer:3943},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.normalize=n.recoverPublicKey=n.concatSig=n.legacyToBuffer=n.isNullish=n.padWithZeroes=void 0;const r=e("@ethereumjs/util"),s=e("@metamask/utils");function a(e,t){if(""!==e&&!/^[a-f0-9]+$/iu.test(e))throw new Error(`Expected an unprefixed hex string. Received: ${e}`);if(t<0)throw new Error(`Expected a non-negative integer target length. Received: ${t}`);return String.prototype.padStart.call(e,t,"0")}function o(e){return null===e||e===undefined}n.padWithZeroes=a,n.isNullish=o,n.legacyToBuffer=function(e){return"string"!=typeof e||(0,r.isHexString)(e)?(0,r.toBuffer)(e):t.from(e)},n.concatSig=function(e,t,n){const o=(0,r.fromSigned)(t),i=(0,r.fromSigned)(n),c=(0,r.bufferToInt)(e),l=a((0,r.toUnsigned)(o).toString("hex"),64),d=a((0,r.toUnsigned)(i).toString("hex"),64),u=(0,s.remove0x)((0,s.numberToHex)(c));return(0,s.add0x)(l.concat(d,u))},n.recoverPublicKey=function(e,t){const n=(0,r.fromRpcSig)(t);return(0,r.ecrecover)(e,n.v,n.r,n.s)},n.normalize=function(e){if(o(e))return undefined;if("number"==typeof e){if(e<0)return"0x";const t=(0,s.numberToBytes)(e);e=(0,s.bytesToHex)(t)}if("string"!=typeof e){let t="eth-sig-util.normalize() requires hex string or integer input.";throw t+=` received ${typeof e}: ${e}`,new Error(t)}return(0,s.add0x)(e.toLowerCase())}}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/dist/utils.js"}],[1907,{"./bytes":1910,"./constants":1911,"./helpers":1913,"./internal":1915,"@ethereumjs/rlp":448,buffer:3943,"ethereum-cryptography/keccak":4170,"ethereum-cryptography/secp256k1":4187,"ethereum-cryptography/utils":4189},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.accountBodyToRLP=n.accountBodyToSlim=n.accountBodyFromSlim=n.isZeroAddress=n.zeroAddress=n.importPublic=n.privateToAddress=n.privateToPublic=n.publicToAddress=n.pubToAddress=n.isValidPublic=n.isValidPrivate=n.generateAddress2=n.generateAddress=n.isValidChecksumAddress=n.toChecksumAddress=n.isValidAddress=n.Account=void 0;const r=e("@ethereumjs/rlp"),s=e("ethereum-cryptography/keccak"),a=e("ethereum-cryptography/secp256k1"),o=e("ethereum-cryptography/utils"),i=e("./bytes"),c=e("./constants"),l=e("./helpers"),d=e("./internal"),u=BigInt(0);class p{constructor(e=u,t=u,n=c.KECCAK256_RLP,r=c.KECCAK256_NULL){this.nonce=e,this.balance=t,this.storageRoot=n,this.codeHash=r,this._validate()}static fromAccountData(e){const{nonce:t,balance:n,storageRoot:r,codeHash:s}=e;return new p(t!==undefined?(0,i.bufferToBigInt)((0,i.toBuffer)(t)):undefined,n!==undefined?(0,i.bufferToBigInt)((0,i.toBuffer)(n)):undefined,r!==undefined?(0,i.toBuffer)(r):undefined,s!==undefined?(0,i.toBuffer)(s):undefined)}static fromRlpSerializedAccount(e){const t=(0,i.arrToBufArr)(r.RLP.decode(Uint8Array.from(e)));if(!Array.isArray(t))throw new Error("Invalid serialized account input. Must be array");return this.fromValuesArray(t)}static fromValuesArray(e){const[t,n,r,s]=e;return new p((0,i.bufferToBigInt)(t),(0,i.bufferToBigInt)(n),r,s)}_validate(){if(this.nonce<u)throw new Error("nonce must be greater than zero");if(this.balance<u)throw new Error("balance must be greater than zero");if(32!==this.storageRoot.length)throw new Error("storageRoot must have a length of 32");if(32!==this.codeHash.length)throw new Error("codeHash must have a length of 32")}raw(){return[(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.balance),this.storageRoot,this.codeHash]}serialize(){return t.from(r.RLP.encode((0,i.bufArrToArr)(this.raw())))}isContract(){return!this.codeHash.equals(c.KECCAK256_NULL)}isEmpty(){return this.balance===u&&this.nonce===u&&this.codeHash.equals(c.KECCAK256_NULL)}}n.Account=p;n.isValidAddress=function(e){try{(0,l.assertIsString)(e)}catch(e){return!1}return/^0x[0-9a-fA-F]{40}$/.test(e)};n.toChecksumAddress=function(e,n){(0,l.assertIsHexString)(e);const r=(0,d.stripHexPrefix)(e).toLowerCase();let a="";if(n!==undefined){a=(0,i.bufferToBigInt)((0,i.toBuffer)(n)).toString()+"0x"}const c=t.from(a+r,"utf8"),u=(0,o.bytesToHex)((0,s.keccak256)(c));let p="0x";for(let e=0;e<r.length;e++)parseInt(u[e],16)>=8?p+=r[e].toUpperCase():p+=r[e];return p};n.isValidChecksumAddress=function(e,t){return(0,n.isValidAddress)(e)&&(0,n.toChecksumAddress)(e,t)===e};n.generateAddress=function(e,n){return(0,l.assertIsBuffer)(e),(0,l.assertIsBuffer)(n),(0,i.bufferToBigInt)(n)===BigInt(0)?t.from((0,s.keccak256)(r.RLP.encode((0,i.bufArrToArr)([e,null])))).slice(-20):t.from((0,s.keccak256)(r.RLP.encode((0,i.bufArrToArr)([e,n])))).slice(-20)};n.generateAddress2=function(e,n,r){if((0,l.assertIsBuffer)(e),(0,l.assertIsBuffer)(n),(0,l.assertIsBuffer)(r),20!==e.length)throw new Error("Expected from to be of length 20");if(32!==n.length)throw new Error("Expected salt to be of length 32");const a=(0,s.keccak256)(t.concat([t.from("ff","hex"),e,n,(0,s.keccak256)(r)]));return(0,i.toBuffer)(a).slice(-20)};n.isValidPrivate=function(e){return a.secp256k1.utils.isValidPrivateKey(e)};n.isValidPublic=function(e,n=!1){if((0,l.assertIsBuffer)(e),64===e.length)try{return a.secp256k1.ProjectivePoint.fromHex(t.concat([t.from([4]),e])),!0}catch(e){return!1}if(!n)return!1;try{return a.secp256k1.ProjectivePoint.fromHex(e),!0}catch(e){return!1}};n.pubToAddress=function(e,n=!1){if((0,l.assertIsBuffer)(e),n&&64!==e.length&&(e=t.from(a.secp256k1.ProjectivePoint.fromHex(e).toRawBytes(!1).slice(1))),64!==e.length)throw new Error("Expected pubKey to be of length 64");return t.from((0,s.keccak256)(e)).slice(-20)},n.publicToAddress=n.pubToAddress;n.privateToPublic=function(e){return(0,l.assertIsBuffer)(e),t.from(a.secp256k1.ProjectivePoint.fromPrivateKey(e).toRawBytes(!1).slice(1))};n.privateToAddress=function(e){return(0,n.publicToAddress)((0,n.privateToPublic)(e))};n.importPublic=function(e){return(0,l.assertIsBuffer)(e),64!==e.length&&(e=t.from(a.secp256k1.ProjectivePoint.fromHex(e).toRawBytes(!1).slice(1))),e};n.zeroAddress=function(){const e=(0,i.zeros)(20);return(0,i.bufferToHex)(e)};function h(e){const[t,n,r,s]=e;return[t,n,0===(0,i.arrToBufArr)(r).length?c.KECCAK256_RLP:r,0===(0,i.arrToBufArr)(s).length?c.KECCAK256_NULL:s]}n.isZeroAddress=function(e){try{(0,l.assertIsString)(e)}catch(e){return!1}return(0,n.zeroAddress)()===e},n.accountBodyFromSlim=h;const m=new Uint8Array(0);n.accountBodyToSlim=function(e){const[t,n,r,s]=e;return[t,n,(0,i.arrToBufArr)(r).equals(c.KECCAK256_RLP)?m:r,(0,i.arrToBufArr)(s).equals(c.KECCAK256_NULL)?m:s]},n.accountBodyToRLP=function(e,t=!0){const n=t?h(e):e;return(0,i.arrToBufArr)(r.RLP.encode(n))}}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/account.js"}],[1908,{"./account":1907,"./bytes":1910,buffer:3943},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.Address=void 0;const r=e("./account"),s=e("./bytes");class a{constructor(e){if(20!==e.length)throw new Error("Invalid address length");this.buf=e}static zero(){return new a((0,s.zeros)(20))}static fromString(e){if(!(0,r.isValidAddress)(e))throw new Error("Invalid address");return new a((0,s.toBuffer)(e))}static fromPublicKey(e){if(!t.isBuffer(e))throw new Error("Public key should be Buffer");const n=(0,r.pubToAddress)(e);return new a(n)}static fromPrivateKey(e){if(!t.isBuffer(e))throw new Error("Private key should be Buffer");const n=(0,r.privateToAddress)(e);return new a(n)}static generate(e,t){if("bigint"!=typeof t)throw new Error("Expected nonce to be a bigint");return new a((0,r.generateAddress)(e.buf,(0,s.bigIntToBuffer)(t)))}static generate2(e,n,s){if(!t.isBuffer(n))throw new Error("Expected salt to be a Buffer");if(!t.isBuffer(s))throw new Error("Expected initCode to be a Buffer");return new a((0,r.generateAddress2)(e.buf,n,s))}equals(e){return this.buf.equals(e.buf)}isZero(){return this.equals(a.zero())}isPrecompileOrSystemAddress(){const e=(0,s.bufferToBigInt)(this.buf),t=BigInt(0),n=BigInt("0xffff");return e>=t&&e<=n}toString(){return"0x"+this.buf.toString("hex")}toBuffer(){return t.from(this.buf)}}n.Address=a}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/address.js"}],[1909,{events:4269},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.AsyncEventEmitter=void 0;const r=e("events");class s extends r.EventEmitter{emit(e,...t){let[n,r]=t;const s=this;let a=s._events[e]??[];return r===undefined&&"function"==typeof n&&(r=n,n=undefined),"newListener"!==e&&"removeListener"!==e||(n={event:n,fn:r},r=undefined),a=Array.isArray(a)?a:[a],async function(e,t,n){let r;for await(const s of t)try{s.length<2?s.call(e,n):await new Promise(((t,r)=>{s.call(e,n,(e=>{e?r(e):t()}))}))}catch(e){r=e}if(r)throw r}(s,a.slice(),n).then(r).catch(r),s.listenerCount(e)>0}once(e,t){const n=this;let r;if("function"!=typeof t)throw new TypeError("listener must be a function");return r=t.length>=2?function(s,a){n.removeListener(e,r),t(s,a)}:function(s){n.removeListener(e,r),t(s,r)},n.on(e,r),n}first(e,t){let n=this._events[e]??[];if("function"!=typeof t)throw new TypeError("listener must be a function");return Array.isArray(n)||(this._events[e]=n=[n]),n.unshift(t),this}before(e,t,n){return this.beforeOrAfter(e,t,n)}after(e,t,n){return this.beforeOrAfter(e,t,n,"after")}beforeOrAfter(e,t,n,r){let s,a,o=this._events[e]??[];const i="after"===r?1:0;if("function"!=typeof n)throw new TypeError("listener must be a function");if("function"!=typeof t)throw new TypeError("target must be a function");for(Array.isArray(o)||(this._events[e]=o=[o]),a=o.length,s=o.length;s--;)if(o[s]===t){a=s+i;break}return o.splice(a,0,n),this}on(e,t){return super.on(e,t)}addListener(e,t){return super.addListener(e,t)}prependListener(e,t){return super.prependListener(e,t)}prependOnceListener(e,t){return super.prependOnceListener(e,t)}removeAllListeners(e){return super.removeAllListeners(e)}removeListener(e,t){return super.removeListener(e,t)}eventNames(){return super.eventNames()}listeners(e){return super.listeners(e)}listenerCount(e){return super.listenerCount(e)}getMaxListeners(){return super.getMaxListeners()}setMaxListeners(e){return super.setMaxListeners(e)}}n.AsyncEventEmitter=s}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/asyncEventEmitter.js"}],[191,{"ethereumjs-util":4197},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getContractProxyAddress=async function(e,t){const n=(await Promise.all(s.map((n=>t.request({method:"eth_getStorageAt",params:[e,n,"latest"]}))))).find((e=>(0,r.stripHexPrefix)(e)!==a));return n&&(0,r.addHexPrefix)(n.slice(26))};var r=e("ethereumjs-util");const s=["0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3","0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"],a="0".padEnd(64,"0")}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/proxy.ts"}],[1910,{"./helpers":1913,"./internal":1915,buffer:3943},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.intToUnpaddedBuffer=n.bigIntToUnpaddedBuffer=n.bigIntToHex=n.bufArrToArr=n.arrToBufArr=n.validateNoLeadingZeroes=n.baToJSON=n.toUtf8=n.short=n.addHexPrefix=n.toUnsigned=n.fromSigned=n.bufferToInt=n.bigIntToBuffer=n.bufferToBigInt=n.bufferToHex=n.toBuffer=n.unpadHexString=n.unpadArray=n.unpadBuffer=n.setLengthRight=n.setLengthLeft=n.zeros=n.intToBuffer=n.intToHex=void 0;const r=e("./helpers"),s=e("./internal");n.intToHex=function(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Received an invalid integer type: ${e}`);return`0x${e.toString(16)}`};n.intToBuffer=function(e){const r=(0,n.intToHex)(e);return t.from((0,s.padToEven)(r.slice(2)),"hex")};n.zeros=function(e){return t.allocUnsafe(e).fill(0)};const a=function(e,t,r){const s=(0,n.zeros)(t);return r?e.length<t?(e.copy(s),s):e.slice(0,t):e.length<t?(e.copy(s,t-e.length),s):e.slice(-t)};n.setLengthLeft=function(e,t){return(0,r.assertIsBuffer)(e),a(e,t,!1)};n.setLengthRight=function(e,t){return(0,r.assertIsBuffer)(e),a(e,t,!0)};const o=function(e){let t=e[0];for(;e.length>0&&"0"===t.toString();)t=(e=e.slice(1))[0];return e};n.unpadBuffer=function(e){return(0,r.assertIsBuffer)(e),o(e)};n.unpadArray=function(e){return(0,r.assertIsArray)(e),o(e)};n.unpadHexString=function(e){return(0,r.assertIsHexString)(e),e=(0,s.stripHexPrefix)(e),"0x"+o(e)};n.toBuffer=function(e){if(null===e||e===undefined)return t.allocUnsafe(0);if(t.isBuffer(e))return t.from(e);if(Array.isArray(e)||e instanceof Uint8Array)return t.from(e);if("string"==typeof e){if(!(0,s.isHexString)(e))throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${e}`);return t.from((0,s.padToEven)((0,s.stripHexPrefix)(e)),"hex")}if("number"==typeof e)return(0,n.intToBuffer)(e);if("bigint"==typeof e){if(e<BigInt(0))throw new Error(`Cannot convert negative bigint to buffer. Given: ${e}`);let n=e.toString(16);return n.length%2&&(n="0"+n),t.from(n,"hex")}if(e.toArray)return t.from(e.toArray());if(e.toBuffer)return t.from(e.toBuffer());throw new Error("invalid type")};function i(e){const t=(0,n.bufferToHex)(e);return"0x"===t?BigInt(0):BigInt(t)}function c(e){return(0,n.toBuffer)("0x"+e.toString(16))}n.bufferToHex=function(e){return"0x"+(e=(0,n.toBuffer)(e)).toString("hex")},n.bufferToBigInt=i,n.bigIntToBuffer=c;n.bufferToInt=function(e){const t=Number(i(e));if(!Number.isSafeInteger(t))throw new Error("Number exceeds 53 bits");return t};n.fromSigned=function(e){return BigInt.asIntN(256,i(e))};n.toUnsigned=function(e){return c(BigInt.asUintN(256,e))};n.addHexPrefix=function(e){return"string"!=typeof e||(0,s.isHexPrefixed)(e)?e:"0x"+e},n.short=function(e,n=50){const r=t.isBuffer(e)?e.toString("hex"):e;return r.length<=n?r:r.slice(0,n)+"…"};n.toUtf8=function(e){if((e=(0,s.stripHexPrefix)(e)).length%2!=0)throw new Error("Invalid non-even hex string input for toUtf8() provided");return t.from(e.replace(/^(00)+|(00)+$/g,""),"hex").toString("utf8")};n.baToJSON=function(e){if(t.isBuffer(e))return`0x${e.toString("hex")}`;if(e instanceof Array){const t=[];for(let r=0;r<e.length;r++)t.push((0,n.baToJSON)(e[r]));return t}};n.validateNoLeadingZeroes=function(e){for(const[t,n]of Object.entries(e))if(n!==undefined&&n.length>0&&0===n[0])throw new Error(`${t} cannot have leading zeroes, received: ${n.toString("hex")}`)},n.arrToBufArr=function e(n){return Array.isArray(n)?n.map((t=>e(t))):t.from(n)},n.bufArrToArr=function e(t){return Array.isArray(t)?t.map((t=>e(t))):Uint8Array.from(t??[])};n.bigIntToHex=e=>"0x"+e.toString(16),n.bigIntToUnpaddedBuffer=function(e){return(0,n.unpadBuffer)(c(e))},n.intToUnpaddedBuffer=function(e){return(0,n.unpadBuffer)((0,n.intToBuffer)(e))}}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/bytes.js"}],[1911,{buffer:3943,"ethereum-cryptography/secp256k1":4187},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.MAX_WITHDRAWALS_PER_PAYLOAD=n.RLP_EMPTY_STRING=n.KECCAK256_RLP=n.KECCAK256_RLP_S=n.KECCAK256_RLP_ARRAY=n.KECCAK256_RLP_ARRAY_S=n.KECCAK256_NULL=n.KECCAK256_NULL_S=n.TWO_POW256=n.SECP256K1_ORDER_DIV_2=n.SECP256K1_ORDER=n.MAX_INTEGER_BIGINT=n.MAX_INTEGER=n.MAX_UINT64=void 0;const r=e("buffer"),s=e("ethereum-cryptography/secp256k1");n.MAX_UINT64=BigInt("0xffffffffffffffff"),n.MAX_INTEGER=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),n.MAX_INTEGER_BIGINT=BigInt("115792089237316195423570985008687907853269984665640564039457584007913129639935"),n.SECP256K1_ORDER=s.secp256k1.CURVE.n,n.SECP256K1_ORDER_DIV_2=s.secp256k1.CURVE.n/BigInt(2),n.TWO_POW256=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000"),n.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",n.KECCAK256_NULL=r.Buffer.from(n.KECCAK256_NULL_S,"hex"),n.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",n.KECCAK256_RLP_ARRAY=r.Buffer.from(n.KECCAK256_RLP_ARRAY_S,"hex"),n.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",n.KECCAK256_RLP=r.Buffer.from(n.KECCAK256_RLP_S,"hex"),n.RLP_EMPTY_STRING=r.Buffer.from([128]),n.MAX_WITHDRAWALS_PER_PAYLOAD=16}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/constants.js"}],[1912,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.compactBytesToNibbles=n.bytesToNibbles=n.nibblesToCompactBytes=n.nibblesToBytes=n.hasTerminator=void 0;n.hasTerminator=e=>e.length>0&&16===e[e.length-1];n.nibblesToBytes=(e,t)=>{for(let n=0,r=0;r<e.length;n+=1,r+=2)t[n]=e[r]<<4|e[r+1]};n.nibblesToCompactBytes=e=>{let t=0;(0,n.hasTerminator)(e)&&(t=1,e=e.subarray(0,e.length-1));const r=new Uint8Array(e.length/2+1);return r[0]=t<<5,1&~e.length||(r[0]|=16,r[0]|=e[0],e=e.subarray(1)),(0,n.nibblesToBytes)(e,r.subarray(1)),r};n.bytesToNibbles=e=>{const t=2*e.length+1,n=new Uint8Array(t);for(let t=0;t<e.length;t++){const r=e[t];n[2*t]=r/16,n[2*t+1]=r%16}return n[t-1]=16,n};n.compactBytesToNibbles=e=>{if(0===e.length)return e;let t=(0,n.bytesToNibbles)(e);t[0]<2&&(t=t.subarray(0,t.length-1));const r=2-(1&t[0]);return t.subarray(r)}}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/encoding.js"}],[1913,{"../../../../../../../../../is-buffer/index.js":4527,"./internal":1915},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.assertIsString=n.assertIsArray=n.assertIsBuffer=n.assertIsHexString=void 0;const r=e("./internal");n.assertIsHexString=function(e){if(!(0,r.isHexString)(e)){throw new Error(`This method only supports 0x-prefixed hex strings but input was: ${e}`)}};n.assertIsBuffer=function(e){if(!t.isBuffer(e)){throw new Error(`This method only supports Buffer but input was: ${e}`)}};n.assertIsArray=function(e){if(!Array.isArray(e)){throw new Error(`This method only supports number arrays but input was: ${e}`)}};n.assertIsString=function(e){if("string"!=typeof e){throw new Error(`This method only supports strings but input was: ${e}`)}}}).call(this)}).call(this,{isBuffer:e("../../../../../../../../../is-buffer/index.js")})}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/helpers.js"}],[1914,{"./account":1907,"./address":1908,"./asyncEventEmitter":1909,"./bytes":1910,"./constants":1911,"./encoding":1912,"./internal":1915,"./lock":1916,"./provider":1917,"./signature":1918,"./types":1919,"./units":1920,"./withdrawal":1921},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(n,"__esModule",{value:!0}),n.toAscii=n.stripHexPrefix=n.padToEven=n.isHexString=n.isHexPrefixed=n.getKeys=n.getBinarySize=n.fromUtf8=n.fromAscii=n.arrayContainsArray=void 0,s(e("./constants"),n),s(e("./units"),n),s(e("./account"),n),s(e("./address"),n),s(e("./withdrawal"),n),s(e("./signature"),n),s(e("./bytes"),n),s(e("./types"),n),s(e("./encoding"),n),s(e("./asyncEventEmitter"),n);var a=e("./internal");Object.defineProperty(n,"arrayContainsArray",{enumerable:!0,get:function(){return a.arrayContainsArray}}),Object.defineProperty(n,"fromAscii",{enumerable:!0,get:function(){return a.fromAscii}}),Object.defineProperty(n,"fromUtf8",{enumerable:!0,get:function(){return a.fromUtf8}}),Object.defineProperty(n,"getBinarySize",{enumerable:!0,get:function(){return a.getBinarySize}}),Object.defineProperty(n,"getKeys",{enumerable:!0,get:function(){return a.getKeys}}),Object.defineProperty(n,"isHexPrefixed",{enumerable:!0,get:function(){return a.isHexPrefixed}}),Object.defineProperty(n,"isHexString",{enumerable:!0,get:function(){return a.isHexString}}),Object.defineProperty(n,"padToEven",{enumerable:!0,get:function(){return a.padToEven}}),Object.defineProperty(n,"stripHexPrefix",{enumerable:!0,get:function(){return a.stripHexPrefix}}),Object.defineProperty(n,"toAscii",{enumerable:!0,get:function(){return a.toAscii}}),s(e("./lock"),n),s(e("./provider"),n)}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/index.js"}],[1915,{buffer:3943},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(e){(function(){function t(e){if("string"!=typeof e)throw new Error("[isHexPrefixed] input must be type 'string', received type "+typeof e);return"0"===e[0]&&"x"===e[1]}Object.defineProperty(n,"__esModule",{value:!0}),n.isHexString=n.getKeys=n.fromAscii=n.fromUtf8=n.toAscii=n.arrayContainsArray=n.getBinarySize=n.padToEven=n.stripHexPrefix=n.isHexPrefixed=void 0,n.isHexPrefixed=t;function r(e){let t=e;if("string"!=typeof t)throw new Error("[padToEven] value must be type 'string', received "+typeof t);return t.length%2&&(t=`0${t}`),t}n.stripHexPrefix=e=>{if("string"!=typeof e)throw new Error("[stripHexPrefix] input must be type 'string', received "+typeof e);return t(e)?e.slice(2):e},n.padToEven=r,n.getBinarySize=function(t){if("string"!=typeof t)throw new Error("[getBinarySize] method requires input type 'string', received "+typeof t);return e.byteLength(t,"utf8")},n.arrayContainsArray=function(e,t,n){if(!0!==Array.isArray(e))throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof e}'`);if(!0!==Array.isArray(t))throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof t}'`);return t[!0===n?"some":"every"]((t=>e.indexOf(t)>=0))},n.toAscii=function(e){let t="",n=0;const r=e.length;for("0x"===e.substring(0,2)&&(n=2);n<r;n+=2){const r=parseInt(e.substr(n,2),16);t+=String.fromCharCode(r)}return t},n.fromUtf8=function(t){return`0x${r(e.from(t,"utf8").toString("hex")).replace(/^0+|0+$/g,"")}`},n.fromAscii=function(e){let t="";for(let n=0;n<e.length;n++){const r=e.charCodeAt(n).toString(16);t+=r.length<2?`0${r}`:r}return`0x${t}`},n.getKeys=function(e,t,n){if(!Array.isArray(e))throw new Error("[getKeys] method expects input 'params' to be an array, got "+typeof e);if("string"!=typeof t)throw new Error("[getKeys] method expects input 'key' to be type 'string', got "+typeof e);const r=[];for(let s=0;s<e.length;s++){let a=e[s][t];if(!0!==n||a){if("string"!=typeof a)throw new Error("invalid abi - expected type 'string', received "+typeof a)}else a="";r.push(a)}return r},n.isHexString=function(e,t){return!("string"!=typeof e||!e.match(/^0x[0-9A-Fa-f]*$/))&&!(void 0!==t&&t>0&&e.length!==2+2*t)}}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/internal.js"}],[1916,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.Lock=void 0;n.Lock=class{constructor(){this.permits=1,this.promiseResolverQueue=[]}async acquire(){return this.permits>0?(this.permits-=1,Promise.resolve(!0)):new Promise((e=>this.promiseResolverQueue.push(e)))}release(){if(this.permits+=1,this.permits>1&&this.promiseResolverQueue.length>0)console.warn("Lock.permits should never be > 0 when there is someone waiting.");else if(1===this.permits&&this.promiseResolverQueue.length>0){this.permits-=1;const e=this.promiseResolverQueue.shift();e&&e(!0)}}}}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/lock.js"}],[1917,{"micro-ftch":4780},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getProvider=n.fetchFromProvider=void 0;const r=e("micro-ftch");n.fetchFromProvider=async(e,t)=>(await(0,r.default)(e,{headers:{"content-type":"application/json"},type:"json",data:{method:t.method,params:t.params,jsonrpc:"2.0",id:1}})).result;n.getProvider=e=>{if("string"==typeof e)return e;if(e?.connection?.url!==undefined)return e.connection.url;throw new Error("Must provide valid provider URL or Web3Provider")}}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/provider.js"}],[1918,{"./bytes":1910,"./constants":1911,"./helpers":1913,buffer:3943,"ethereum-cryptography/keccak":4170,"ethereum-cryptography/secp256k1":4187},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.hashPersonalMessage=n.isValidSignature=n.fromRpcSig=n.toCompactSig=n.toRpcSig=n.ecrecover=n.ecsign=void 0;const r=e("ethereum-cryptography/keccak"),s=e("ethereum-cryptography/secp256k1"),a=e("./bytes"),o=e("./constants"),i=e("./helpers");function c(e,t){return e===BigInt(0)||e===BigInt(1)?e:t===undefined?e-BigInt(27):e-(t*BigInt(2)+BigInt(35))}function l(e){return e===BigInt(0)||e===BigInt(1)}n.ecsign=function(e,n,r){const a=s.secp256k1.sign(e,n),o=a.toCompactRawBytes();return{r:t.from(o.slice(0,32)),s:t.from(o.slice(32,64)),v:r===undefined?BigInt(a.recovery+27):BigInt(a.recovery+35)+BigInt(r)*BigInt(2)}};n.ecrecover=function(e,n,r,o,i){const d=t.concat([(0,a.setLengthLeft)(r,32),(0,a.setLengthLeft)(o,32)],64),u=c(n,i);if(!l(u))throw new Error("Invalid signature v value");const p=s.secp256k1.Signature.fromCompact(d).addRecoveryBit(Number(u)).recoverPublicKey(e);return t.from(p.toRawBytes(!1).slice(1))};n.toRpcSig=function(e,n,r,s){if(!l(c(e,s)))throw new Error("Invalid signature v value");return(0,a.bufferToHex)(t.concat([(0,a.setLengthLeft)(n,32),(0,a.setLengthLeft)(r,32),(0,a.toBuffer)(e)]))};n.toCompactSig=function(e,n,r,s){if(!l(c(e,s)))throw new Error("Invalid signature v value");let o=r;return(e>BigInt(28)&&e%BigInt(2)===BigInt(1)||e===BigInt(1)||e===BigInt(28))&&(o=t.from(r),o[0]|=128),(0,a.bufferToHex)(t.concat([(0,a.setLengthLeft)(n,32),(0,a.setLengthLeft)(o,32)]))};n.fromRpcSig=function(e){const t=(0,a.toBuffer)(e);let n,r,s;if(t.length>=65)n=t.slice(0,32),r=t.slice(32,64),s=(0,a.bufferToBigInt)(t.slice(64));else{if(64!==t.length)throw new Error("Invalid signature length");n=t.slice(0,32),r=t.slice(32,64),s=BigInt((0,a.bufferToInt)(t.slice(32,33))>>7),r[0]&=127}return s<27&&(s+=BigInt(27)),{v:s,r:n,s:r}};n.isValidSignature=function(e,t,n,r=!0,s){if(32!==t.length||32!==n.length)return!1;if(!l(c(e,s)))return!1;const i=(0,a.bufferToBigInt)(t),d=(0,a.bufferToBigInt)(n);return!(i===BigInt(0)||i>=o.SECP256K1_ORDER||d===BigInt(0)||d>=o.SECP256K1_ORDER)&&!(r&&d>=o.SECP256K1_ORDER_DIV_2)};n.hashPersonalMessage=function(e){(0,i.assertIsBuffer)(e);const n=t.from(`Ethereum Signed Message:\n${e.length}`,"utf-8");return t.from((0,r.keccak256)(t.concat([n,e])))}}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/signature.js"}],[1919,{"./bytes":1910,"./internal":1915},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.toType=n.TypeOutput=void 0;const r=e("./bytes"),s=e("./internal");var a;!function(e){e[e.Number=0]="Number",e[e.BigInt=1]="BigInt",e[e.Buffer=2]="Buffer",e[e.PrefixedHexString=3]="PrefixedHexString"}(a=n.TypeOutput||(n.TypeOutput={})),n.toType=function(e,t){if(null===e)return null;if(e===undefined)return undefined;if("string"==typeof e&&!(0,s.isHexString)(e))throw new Error(`A string must be provided with a 0x-prefix, given: ${e}`);if("number"==typeof e&&!Number.isSafeInteger(e))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");const n=(0,r.toBuffer)(e);switch(t){case a.Buffer:return n;case a.BigInt:return(0,r.bufferToBigInt)(n);case a.Number:{const e=(0,r.bufferToBigInt)(n);if(e>BigInt(Number.MAX_SAFE_INTEGER))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");return Number(e)}case a.PrefixedHexString:return(0,r.bufferToHex)(n);default:throw new Error("unknown outputType")}}}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/types.js"}],[192,{"@ethersproject/abi":503,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.decodeTransactionDataWithSourcify=async function(e,t,n){var i,c;const l=await async function(e,t){var n;const r=await async function(e,t){const n=parseInt(t,16),r=await fetch(`https://sourcify.dev/server/files/any/${n}/${e}`);if(!r.ok)throw new Error("Failed to fetch Sourcify files");return r.json()}(e,t),s=null===(n=r.files)||void 0===n?void 0:n.find((e=>e.name.includes("metadata.json")));if(!s)throw new Error("Metadata not found");return JSON.parse(s.content)}(t,n);s("Retrieved Sourcify metadata",{contractAddress:t,chainId:n,metadata:l});const{abi:d}=l.output,u=new r.Interface(d),p=e.slice(0,10);let h;try{h=u.getFunction(p)}catch(e){}if(!h)return s("Failed to find function in ABI",p,d),undefined;const{name:m,inputs:f}=h,g=o(m,f),b=null===(i=l.output.userdoc)||void 0===i?void 0:i.methods[g],y=null===(c=l.output.devdoc)||void 0===c?void 0:c.methods[g],C=(null==b?void 0:b.notice)??(null==y?void 0:y.details);s("Extracted NatSpec",{signature:g,userDoc:b,devDoc:y});const w=u.decodeFunctionData(p,e),v=f.map(((e,t)=>a(e,t,w,b,y)));return{name:m,description:C,params:v}};var r=e("@ethersproject/abi");const s=(0,e("@metamask/utils").createProjectLogger)("sourcify");function a(e,t,n,r,s){var o,i;const{name:c,type:l,components:d}=e,u=(null==r||null===(o=r.params)||void 0===o?void 0:o[c])??(null==s||null===(i=s.params)||void 0===i?void 0:i[c]),p=n[t];let h=null==d?void 0:d.map(((e,t)=>a(e,t,p,{},{})));if(l.endsWith("[]")){const t=l.slice(0,-2);h=p.map(((n,r)=>{const s=`Item ${r+1}`;return a({...e,name:s,type:t},r,p,{},{})}))}return{name:c,description:u,type:l,value:p,children:h}}function o(e,t){return`${e??""}(${t.map((e=>{var t;return null!==(t=e.components)&&void 0!==t&&t.length?`${o(undefined,e.components)}${e.type.endsWith("[]")?"[]":""}`:e.type})).join(",")})`}}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/sourcify.ts"}],[1920,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.GWEI_TO_WEI=void 0,n.GWEI_TO_WEI=BigInt(1e9)}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/units.js"}],[1921,{"./address":1908,"./bytes":1910,"./types":1919,buffer:3943},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.Withdrawal=void 0;const r=e("./address"),s=e("./bytes"),a=e("./types");class o{constructor(e,t,n,r){this.index=e,this.validatorIndex=t,this.address=n,this.amount=r}static fromWithdrawalData(e){const{index:t,validatorIndex:n,address:s,amount:i}=e,c=(0,a.toType)(t,a.TypeOutput.BigInt),l=(0,a.toType)(n,a.TypeOutput.BigInt),d=new r.Address((0,a.toType)(s,a.TypeOutput.Buffer)),u=(0,a.toType)(i,a.TypeOutput.BigInt);return new o(c,l,d,u)}static fromValuesArray(e){if(4!==e.length)throw Error(`Invalid withdrawalArray length expected=4 actual=${e.length}`);const[t,n,r,s]=e;return o.fromWithdrawalData({index:t,validatorIndex:n,address:r,amount:s})}static toBufferArray(e){const{index:n,validatorIndex:s,address:o,amount:i}=e,c=(0,a.toType)(n,a.TypeOutput.BigInt)===BigInt(0)?t.alloc(0):(0,a.toType)(n,a.TypeOutput.Buffer),l=(0,a.toType)(s,a.TypeOutput.BigInt)===BigInt(0)?t.alloc(0):(0,a.toType)(s,a.TypeOutput.Buffer);let d;d=o instanceof r.Address?o.buf:(0,a.toType)(o,a.TypeOutput.Buffer);return[c,l,d,(0,a.toType)(i,a.TypeOutput.BigInt)===BigInt(0)?t.alloc(0):(0,a.toType)(i,a.TypeOutput.Buffer)]}raw(){return o.toBufferArray(this)}toValue(){return{index:this.index,validatorIndex:this.validatorIndex,address:this.address.buf,amount:this.amount}}toJSON(){return{index:(0,s.bigIntToHex)(this.index),validatorIndex:(0,s.bigIntToHex)(this.validatorIndex),address:"0x"+this.address.buf.toString("hex"),amount:(0,s.bigIntToHex)(this.amount)}}}n.Withdrawal=o}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@metamask/eth-trezor-keyring>@metamask/eth-sig-util>@ethereumjs/util",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@metamask/eth-sig-util/node_modules/@ethereumjs/util/dist/withdrawal.js"}],[1922,{"@metamask/eth-sig-util":1902,tslib:5485},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.transformTypedData=void 0;const r=e("tslib").__importStar(e("@metamask/eth-sig-util"));function s(e){switch(Object.prototype.toString.call(e)){case"[object Object]":{const t=Object.keys(e).map((t=>[t,s(e[t])]));return Object.fromEntries(t)}case"[object Array]":return e.map((e=>s(e)));case"[object BigInt]":return e.toString();default:return e}}n.transformTypedData=(e,t)=>{if(!t)throw new Error("Trezor: Only version 4 of typed data signing is supported");const n=r.SignTypedDataVersion.V4,{types:a,primaryType:o,domain:i,message:c}=r.TypedDataUtils.sanitizeData(e),l=r.TypedDataUtils.hashStruct("EIP712Domain",s(i),a,n).toString("hex");let d=null;return"EIP712Domain"!==o&&(d=r.TypedDataUtils.hashStruct(o,s(c),a,n).toString("hex")),Object.assign({domain_separator_hash:l,message_hash:d},e)},n.default=n.transformTypedData}}},{package:"@metamask/eth-trezor-keyring>@trezor/connect-plugin-ethereum",file:"node_modules/@metamask/eth-trezor-keyring/node_modules/@trezor/connect-plugin-ethereum/lib/index.js"}],[193,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.UNISWAP_ROUTER_COMMANDS=void 0;n.UNISWAP_ROUTER_COMMANDS={0:{name:"V3_SWAP_EXACT_IN",params:[{type:"address",description:"The recipient of the output of the trade",name:"recipient"},{type:"uint256",description:"The amount of input tokens for the trade",name:"amountIn"},{type:"uint256",description:"The minimum amount of output tokens the user wants",name:"amountOutMin"},{type:"bytes",description:"The UniswapV3 encoded path to trade along",name:"path"},{type:"bool",description:"A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter",name:"payerIsUser"}]},1:{name:"V3_SWAP_EXACT_OUT",params:[{type:"address",description:"The recipient of the output of the trade",name:"recipient"},{type:"uint256",description:"The amount of output tokens to receive",name:"amountOut"},{type:"uint256",description:"The maximum number of input tokens that should be spent",name:"amountInMax"},{type:"bytes",description:"The UniswapV3 encoded path to trade along",name:"path"},{type:"bool",description:"A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter",name:"payerIsUser"}]},2:{name:"PERMIT2_TRANSFER_FROM",params:[{type:"address",description:"The token to fetch from Permit2",name:"token"},{type:"address",description:"The recipient of the tokens fetched",name:"recipient"},{type:"uint256",description:"The amount of token to fetch",name:"amount"}]},3:{name:"PERMIT2_PERMIT_BATCH",params:[{type:"bytes",description:"A PermitBatch struct outlining all of the Permit2 permits to execute.",name:"batch"},{type:"bytes",description:"The signature to provide to Permit2",name:"data"}]},4:{name:"SWEEP",params:[{type:"address",description:"The ERC20 token to sweep (or Constants.ETH for ETH)",name:"token"},{type:"address",description:"The recipient of the sweep",name:"recipient"},{type:"uint256",description:"The minimum required tokens to receive from the sweep",name:"amountMin"}]},5:{name:"TRANSFER",params:[{type:"address",description:"The ERC20 token to transfer (or Constants.ETH for ETH)",name:"token"},{type:"address",description:"The recipient of the transfer",name:"recipient"},{type:"uint256",description:"The amount to transfer",name:"value"}]},6:{name:"PAY_PORTION",params:[{type:"address",description:"The ERC20 token to transfer (or Constants.ETH for ETH)",name:"token"},{type:"address",description:"The recipient of the transfer",name:"recipient"},{type:"uint256",description:"In basis points, the percentage of the contract’s balance to transfer",name:"bips"}]},8:{name:"V2_SWAP_EXACT_IN",params:[{type:"address",description:"The recipient of the output of the trade",name:"recipient"},{type:"uint256",description:"The amount of input tokens for the trade",name:"amountIn"},{type:"uint256",description:"The minimum amount of output tokens the user wants",name:"amountOutMin"},{type:"address[]",description:"The UniswapV2 token path to trade along",name:"path"},{type:"bool",description:"A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter",name:"payerIsUser"}]},9:{name:"V2_SWAP_EXACT_OUT",params:[{type:"address",description:"The recipient of the output of the trade",name:"recipient"},{type:"uint256",description:"The amount of output tokens to receive",name:"amountOut"},{type:"uint256",description:"The maximum number of input tokens that should be spent",name:"amountInMax"},{type:"address[]",description:"The UniswapV2 token path to trade along",name:"path"},{type:"bool",description:"A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter",name:"payerIsUser"}]},10:{name:"PERMIT2_PERMIT",params:[{type:"bytes",description:"A PermitSingle struct outlining the Permit2 permit to execute",name:"permitSingle"},{type:"bytes",description:"The signature to provide to Permit2",name:"signature"}]},11:{name:"WRAP_ETH",params:[{type:"address",description:"The recipient of the WETH",name:"recipient"},{type:"uint256",description:"The amount of ETH to wrap",name:"amountMin"}]},12:{name:"UNWRAP_WETH",params:[{type:"address",description:"The recipient of the ETH",name:"recipient"},{type:"uint256",description:"The minimum required ETH to receive from the unwrapping",name:"amountMin"}]},13:{name:"PERMIT2_TRANSFER_FROM_BATCH",params:[{type:"bytes",description:"An array of AllowanceTransferDetails structs that each describe a Permit2 transfer to perform",name:"batchDetails"}]},16:{name:"SEAPORT",params:[{type:"uint256",description:"The ETH value to forward to the Seaport contract",name:"value"},{type:"bytes",description:"The calldata to use to call the Seaport contract",name:"data"}]},17:{name:"LOOKS_RARE_721",params:[{type:"uint256",description:"The ETH value to forward to the LooksRare contract",name:"value"},{type:"bytes",description:"The calldata to use to call the LooksRare contract",name:"data"},{type:"address",description:"The recipient of the ERC721",name:"recipient"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC721",name:"id"}]},18:{name:"NFTX",params:[{type:"uint256",description:"The ETH value to forward to the NFTX contract",name:"value"},{type:"bytes",description:"The calldata to use to call the NFTX contract",name:"data"}]},19:{name:"CRYPTOPUNKS",params:[{type:"uint256",description:"The PunkID to purchase",name:"punkId"},{type:"address",description:"The recipient for the cryptopunk",name:"recipient"},{type:"uint256",description:"The ETH value to forward to the Cryptopunks contract",name:"value"}]},20:{name:"LOOKS_RARE_1155",params:[{type:"uint256",description:"The ETH value to forward to the LooksRare contract",name:"value"},{type:"bytes",description:"The calldata to use to call the LooksRare contract",name:"data"},{type:"address",description:"The recipient of the ERC1155",name:"recipient"},{type:"address",description:"The ERC1155 token address",name:"token"},{type:"uint256",description:"The ID of the ERC1155",name:"id"},{type:"uint256",description:"The amount of the ERC1155 to transfer",name:"amount"}]},21:{name:"OWNER_CHECK_721",params:[{type:"address",description:"The required owner of the ERC721",name:"owner"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC721",name:"id"}]},22:{name:"OWNER_CHECK_1155",params:[{type:"address",description:"The required owner of the ERC1155",name:"owner"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC1155",name:"id"},{type:"uint256",description:"The minimum required amount of the ERC1155",name:"minBalance"}]},23:{name:"SWEEP_ERC721",params:[{type:"address",description:"The ERC721 token address to transfer",name:"token"},{type:"address",description:"The recipient of the transfer",name:"recipient"},{type:"uint256",description:"The token ID to transfer",name:"id"}]},24:{name:"X2Y2_721",params:[{type:"uint256",description:"The ETH value to forward to the X2Y2 contract",name:"value"},{type:"bytes",description:"The calldata to use to call the X2Y2 contract",name:"data"},{type:"address",description:"The recipient of the ERC721",name:"recipient"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC721",name:"id"}]},25:{name:"SUDOSWAP",params:[{type:"uint256",description:"The ETH value to forward to the Sudoswap contract",name:"value"},{type:"bytes",description:"The calldata to use to call the Sudoswap contract",name:"data"}]},26:{name:"NFT20",params:[{type:"uint256",description:"The ETH value to forward to the NFT20 contract",name:"value"},{type:"bytes",description:"The calldata to use to call the NFT20 contract",name:"data"}]},27:{name:"X2Y2_1155",params:[{type:"uint256",description:"The ETH value to forward to the X2Y2 contract",name:"value"},{type:"bytes",description:"The calldata to use to call the X2Y2 contract",name:"data"},{type:"address",description:"The recipient of the ERC1155",name:"recipient"},{type:"address",description:"The ERC1155 token address",name:"token"},{type:"uint256",description:"The ID of the ERC1155",name:"id"},{type:"uint256",description:"The amount of the ERC1155 to transfer",name:"amount"}]},28:{name:"FOUNDATION",params:[{type:"uint256",description:"The ETH value to forward to the Foundation contract",name:"value"},{type:"bytes",description:"The calldata to use to call the Foundation contract",name:"data"},{type:"address",description:"The recipient of the ERC721",name:"recipient"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC721",name:"id"}]},29:{name:"SWEEP_ERC1155",params:[{type:"address",description:"The ERC1155 token address to sweep",name:"token"},{type:"address",description:"The recipient of the sweep",name:"recipient"},{type:"uint256",description:"The token ID to sweep",name:"id"},{type:"uint256",description:"The minimum required tokens to receive from the sweep",name:"amount"}]}}}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/uniswap-commands.ts"}],[194,{"../../../../../shared/constants/network":5604,"./uniswap-commands":193,"@ethersproject/abi":503,"ethereumjs-util":4197},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.UNISWAP_UNIVERSAL_ROUTER_ADDRESSES=void 0,n.decodeUniswapRouterTransactionData=function({transactionData:e,contractAddress:t,chainId:n}){const a=l[n];if(null==a||!a.map((e=>e.toLowerCase())).includes(t.toLowerCase()))return undefined;const u=new r.Interface(d);let p;try{p=u.parseTransaction({data:e})}catch(e){return undefined}const h=p.args.commands,m=p.args.inputs;return h.slice(2).match(/.{1,2}/gu).map(((e,t)=>function(e,t){const n=parseInt(e,16),a=31&n,l=o.UNISWAP_ROUTER_COMMANDS[String(a)];if(!l)return undefined;const d=l.params.map((e=>e.type)),u=r.Interface.getAbiCoder().decode(d,t),{name:p}=l,h=l.params.map(((e,t)=>{const{name:n,type:r,description:a}=e,o=u[t];return{name:n,type:r,value:"path"===n?function(e){const t=[];let n=(0,s.stripHexPrefix)(e),r={},a=!0;for(;n.length;){if(a){const e=(0,s.addHexPrefix)(n.slice(0,i));r.firstAddress?(r.secondAddress=e,t.push(r),r={firstAddress:e}):r.firstAddress=e,n=n.slice(i)}else r.tickSpacing=parseInt(n.slice(0,c),16),n=n.slice(c);a=!a}return t}(o):o,description:a}}));return{name:p,params:h}}(e,m[t]))).filter((e=>e!==undefined))};var r=e("@ethersproject/abi"),s=e("ethereumjs-util"),a=e("../../../../../shared/constants/network"),o=e("./uniswap-commands");const i=40,c=6,l=n.UNISWAP_UNIVERSAL_ROUTER_ADDRESSES={[a.CHAIN_IDS.ARBITRUM]:["0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5","0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4","0x5E325eDA8064b456f4781070C0738d849c824258"],[a.CHAIN_IDS.AVALANCHE]:["0x82635AF6146972cD6601161c4472ffe97237D292","0x4Dae2f939ACf50408e13d58534Ff8c2776d45265"],[a.CHAIN_IDS.BASE]:["0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4","0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD"],[a.CHAIN_IDS.BSC]:["0x5Dc88340E1c5c6366864Ee415d6034cadd1A9897","0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4","0x4Dae2f939ACf50408e13d58534Ff8c2776d45265"],[a.CHAIN_IDS.MAINNET]:["0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B","0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD"],[a.CHAIN_IDS.OPTIMISM]:["0xb555edF5dcF85f42cEeF1f3630a52A108E55A654","0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4","0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8"],[a.CHAIN_IDS.POLYGON]:["0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5","0x643770E279d5D0733F21d6DC03A8efbABf3255B4","0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2"],[a.CHAIN_IDS.SEPOLIA]:["0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD"]},d=[{constant:!0,inputs:[{name:"commands",type:"bytes"},{name:"inputs",type:"bytes[]"},{name:"deadline",type:"uint256"}],name:"execute",type:"function"},{constant:!0,inputs:[{name:"commands",type:"bytes"},{name:"inputs",type:"bytes[]"}],name:"execute",type:"function"}]}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/uniswap.ts"}],[195,{"../../../../../shared/types/transaction-decode":5684,"./four-byte":190,"./proxy":191,"./sourcify":192,"./uniswap":194,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.decodeTransactionData=async function({transactionData:e,contractAddress:t,chainId:n,provider:r}){l("Decoding transaction data",{transactionData:e,contractAddress:t,chainId:n});const u=(0,a.decodeUniswapRouterTransactionData)({transactionData:e,contractAddress:t,chainId:n});if(u)return l("Decoded with Uniswap commands",u),{data:d(u),source:s.DecodedTransactionDataSource.Uniswap};const p=await(0,i.getContractProxyAddress)(t,r);p&&l("Retrieved proxy implementation address",p);const h=p??t,m=(0,o.decodeTransactionDataWithSourcify)(e,h,n),f=(0,c.decodeTransactionDataWithFourByte)(e),[g,b]=await Promise.allSettled([m,f]);if("fulfilled"===g.status&&g.value)return l("Decoded data with Sourcify",g.value),{data:d([g.value]),source:s.DecodedTransactionDataSource.Sourcify};if(l("Failed to decode data with Sourcify",g),"fulfilled"===b.status&&b.value)return l("Decoded data with 4Byte",b.value),{data:d([b.value]),source:s.DecodedTransactionDataSource.FourByte};return l("Failed to decode data with 4Byte",b),undefined};var r=e("@metamask/utils"),s=e("../../../../../shared/types/transaction-decode"),a=e("./uniswap"),o=e("./sourcify"),i=e("./proxy"),c=e("./four-byte");const l=(0,r.createProjectLogger)("transaction-decode");function d(e){return e.map((e=>function(e){return{...e,params:e.params.map((e=>u(e)))}}(e)))}function u(e){var t;return{...e,value:p(e.value),children:null===(t=e.children)||void 0===t?void 0:t.map((e=>u(e)))}}function p(e){const t=e._hex;return t?BigInt(t).toString():e}}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/util.ts"}],[196,{"@ethersproject/abi":503,"@metamask/keyring-controller":2009,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.ROOT_AUTHORITY=n.ExecutionMode=n.ANY_BENEFICIARY=void 0,n.encodeRedeemDelegations=function(e,t,n){return new a.Interface(d).encodeFunctionData("redeemDelegations",[p(e),t,(r=n,r.map(h))]);var r},n.signDelegation=async function({chainId:e,delegation:t,from:n,messenger:a}){const c={types:u,primaryType:o,domain:{chainId:String((0,r.hexToNumber)(e)),name:i,version:"1",verifyingContract:null},message:{...t,chainId:(0,r.hexToNumber)(e)}};return await a.call("KeyringController:signTypedMessage",{from:n,data:c},s.SignTypedDataVersion.V4)};var r=e("@metamask/utils"),s=e("@metamask/keyring-controller"),a=e("@ethersproject/abi");n.ExecutionMode=function(e){return e.BATCH_DEFAULT_MODE="0x0100000000000000000000000000000000000000000000000000000000000000",e}({});n.ROOT_AUTHORITY="0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",n.ANY_BENEFICIARY="0x0000000000000000000000000000000000000a11";const o="Delegation",i="DelegationManager",c=[{type:"address",name:"delegate"},{type:"address",name:"delegator"},{type:"bytes32",name:"authority"},{type:"tuple[]",name:"caveats",components:[{type:"address",name:"enforcer"},{type:"bytes",name:"terms"},{type:"bytes",name:"args"}]},{type:"uint256",name:"salt"},{type:"bytes",name:"signature"}],l=[{type:"address",name:"target"},{type:"uint256",name:"value"},{type:"bytes",name:"callData"}],d=[{type:"function",name:"redeemDelegations",inputs:[{name:"_permissionContexts",type:"bytes[]",internalType:"bytes[]"},{name:"_modes",type:"bytes32[]",internalType:"ModeCode[]"},{name:"_executionCallDatas",type:"bytes[]",internalType:"bytes[]"}],outputs:[],stateMutability:"nonpayable"}],u={EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Caveat:[{name:"enforcer",type:"address"},{name:"terms",type:"bytes"}],Delegation:[{name:"delegate",type:"address"},{name:"delegator",type:"address"},{name:"authority",type:"bytes32"},{name:"caveats",type:"Caveat[]"},{name:"salt",type:"uint256"}]};function p(e){return e.map((e=>{return t=e,a.defaultAbiCoder.encode([a.ParamType.from({components:c,name:"delegations",type:"tuple[]"})],[t]);var t}))}function h(e){return a.defaultAbiCoder.encode([a.ParamType.from({components:l,name:"executions",type:"tuple[]"})],[e])}}}},{package:"$root$",file:"app/scripts/lib/transaction/delegation.ts"}],[197,{"../ppom/ppom-util":149,"@metamask/eth-json-rpc-middleware":1609,"@metamask/rpc-errors":2415,"@metamask/transaction-controller":2773},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getCallsStatus=function(e,t){const n=e.call("TransactionController:getState").transactions.filter((e=>e.batchId===t));if(null==n||!n.length)throw r.rpcErrors.invalidInput("No matching calls found");const o=n[0],{chainId:i,txReceipt:l}=o,d=function(e){const{hash:t,status:n}=e;if(n===s.TransactionStatus.confirmed)return a.GetCallsStatusCode.CONFIRMED;if(n===s.TransactionStatus.failed)return t?a.GetCallsStatusCode.REVERTED:a.GetCallsStatusCode.FAILED_OFFCHAIN;if(n===s.TransactionStatus.dropped)return a.GetCallsStatusCode.REVERTED;return a.GetCallsStatusCode.PENDING}(o),u=l,p=(null==u?void 0:u.logs)??[],h=u&&[{blockHash:u.blockHash,blockNumber:u.blockNumber,gasUsed:u.gasUsed,logs:p.map((e=>({address:e.address,data:e.data,topics:e.topics}))),status:u.status,transactionHash:u.transactionHash}];return{version:c,id:t,chainId:i,status:d,receipts:h}},n.getCapabilities=async function(e,t){return{}},n.processSendCalls=async function(e,t,n,s){const{addTransactionBatch:a,getDisabledUpgradeAccountsByChain:c,validateSecurity:l,getDismissSmartAccountSuggestionEnabled:d}=e,{calls:u,from:p}=n,{networkClientId:h,origin:m}=s,f=u.map((e=>({params:e}))),g=t.call("NetworkController:getNetworkClientById",h).configuration.chainId,b=c(),y=d();!function(e,t,n,s){(function(e){const{version:t}=e;if(t!==i)throw r.rpcErrors.invalidInput(`Version not supported: Got ${t}, expected ${i}`)})(e),function(e,t){const{chainId:n}=e;if(n&&n.toLowerCase()!==t.toLowerCase())throw r.rpcErrors.invalidInput(`Chain ID must match the dApp selected network: Got ${n}, expected ${t}`)}(e,t),function(e){const{calls:t,capabilities:n}=e,s=Object.keys(n??{}).filter((e=>!0!==(null==n?void 0:n[e].optional))),a=t.flatMap((e=>Object.keys(e.capabilities??{}).filter((t=>{var n;return!0!==(null===(n=e.capabilities)||void 0===n?void 0:n[t].optional)})))),o=[...s,...a];if(null!=o&&o.length)throw r.rpcErrors.invalidInput(`Unsupported non-optional capabilities: ${o.join(", ")}`)}(e),function(e,t,n,s){var a;const{from:o}=e,i=o.toLowerCase(),c=null===(a=t[n])||void 0===a?void 0:a.includes(i);if(c||s)throw r.rpcErrors.methodNotSupported(`EIP-5792 is not supported for this chain and account - Chain ID: ${n}, Account: ${o}`)}(e,n,t,s)}(n,g,b,y);const C=(0,o.generateSecurityAlertId)(),w=l.bind(null,C),{batchId:v}=await a({from:p,networkClientId:h,origin:m,securityAlertId:C,transactions:f,validateSecurity:w});return{id:v}};var r=e("@metamask/rpc-errors"),s=e("@metamask/transaction-controller"),a=e("@metamask/eth-json-rpc-middleware"),o=e("../ppom/ppom-util");const i="1.0",c="1.0"}}},{package:"$root$",file:"app/scripts/lib/transaction/eip5792.ts"}],[198,{"../delegation":196,"../transaction-relay":201,"@ethersproject/abi":503,"@metamask/metamask-eth-abis":2099,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.Delegation7702PublishHook=void 0;var r=e("@metamask/utils"),s=e("@metamask/metamask-eth-abis"),a=e("@ethersproject/abi"),o=e("../delegation"),i=e("../transaction-relay");function c(e,t,n){l(e,t),t.set(e,n)}function l(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function d(e,t){return e.get(p(e,t))}function u(e,t,n){return e.set(p(e,t),n),n}function p(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}const h="0x",m={transactionHash:undefined},f=(0,r.createProjectLogger)("delegation-7702-publish-hook");var g=new WeakMap,b=new WeakMap,y=new WeakSet;async function C(e,t){try{return await p(y,this,w).call(this,e,t)}catch(e){throw f("Error",e),e}}async function w(e,t){const{chainId:n,gasFeeTokens:r,selectedGasFeeToken:s,txParams:a}=e,{from:c,maxFeePerGas:l,maxPriorityFeePerGas:u}=a,h=(await d(g,this).call(this,{address:c,chainIds:[n]})).find((e=>e.chainId.toLowerCase()===n.toLowerCase()));if(!(h&&(!h.delegationAddress||h.isSupported)))return f("Skipping as EIP-7702 is not supported",{from:c,chainId:n}),m;const{delegationAddress:b,upgradeContractAddress:C}=h;if(!s||null==r||!r.length)return f("Skipping as no selected gas fee token"),m;const w=r.find((e=>e.tokenAddress.toLowerCase()===s.toLowerCase()));if(!w)throw new Error("Selected gas fee token not found");const S=await p(y,this,k).call(this,e,w),M=p(y,this,v).call(this,e,w),E={data:(0,o.encodeRedeemDelegations)([[S]],[o.ExecutionMode.BATCH_DEFAULT_MODE],[M]),maxFeePerGas:l,maxPriorityFeePerGas:u,to:null};b||(E.authorizationList=await p(y,this,T).call(this,e,C)),f("Relay request",E);const{transactionHash:P}=await(0,i.submitRelayTransaction)(E);return{transactionHash:P}}function v(e,t){const{txParams:n}=e,{data:r,to:s,value:a}=n;return[{target:s,value:a??"0x0",callData:r??h},{target:t.tokenAddress,value:"0x0",callData:p(y,this,M).call(this,t.recipient,t.amount)}]}async function k(e,t){const{chainId:n,txParams:r}=e,{from:s}=r,a=p(y,this,S).call(this,r,t);f("Caveats",a);const i={authority:o.ROOT_AUTHORITY,caveats:a,delegate:o.ANY_BENEFICIARY,delegator:s,salt:(new Date).getTime()};f("Unsigned delegation",i);const c=await(0,o.signDelegation)({chainId:n,delegation:i,from:s,messenger:d(b,this)});return f("Delegation signature",c),{...i,signature:c}}function S(e,t){const{amount:n,recipient:s,tokenAddress:a}=t,{data:o,to:i}=e,c=(0,r.add0x)((0,r.remove0x)(n).padStart(64,"0"));return[{enforcer:null,terms:(0,r.add0x)([a,s,c,i,o??h].map(r.remove0x).join("")),args:h}]}async function T(e,t){const{chainId:n,txParams:r}=e,{from:s,nonce:a}=r;if(f("Including authorization as not upgraded"),!t)throw new Error("Upgrade contract address not found");const o=await d(b,this).call("KeyringController:signEip7702Authorization",{chainId:parseInt(n,16),contractAddress:t,from:s,nonce:parseInt(a,16)}),{r:i,s:c,yParity:l}=p(y,this,E).call(this,o);return f("Authorization signature",{authorizationSignature:o,r:i,s:c,yParity:l}),[{address:t,chainId:n,nonce:a,r:i,s:c,yParity:l}]}function M(e,t){return new a.Interface(s.abiERC20).encodeFunctionData("transfer",[e,t])}function E(e){return{r:e.slice(0,66),s:`0x${e.slice(66,130)}`,yParity:parseInt(e.slice(130,132),16)-27==0?"0x":"0x1"}}n.Delegation7702PublishHook=class{constructor({isAtomicBatchSupported:e,messenger:t}){var n,r;l(n=this,r=y),r.add(n),c(this,g,void 0),c(this,b,void 0),u(g,this,e),u(b,this,t)}getHook(){return p(y,this,C).bind(this)}}}}},{package:"$root$",file:"app/scripts/lib/transaction/hooks/delegation-7702-publish.ts"}],[199,{"../../../../shared/constants/app":5589,"../../../../shared/constants/gas":5595,"../../../../shared/constants/metametrics":5600,"../../../../shared/constants/transaction":5619,"../../../../shared/lib/confirmation.utils":5632,"../../../../shared/lib/transactions-controller-utils":5650,"../../../../shared/modules/Numeric":5652,"../../../../shared/modules/conversion.utils":5657,"../../../../shared/modules/gas.utils":5662,"../../../../shared/modules/metametrics":5665,"../../../../shared/modules/transaction.utils":5679,"../../../../ui/helpers/utils/metrics":6698,"../snap-keyring/metrics":178,"@metamask/rpc-errors":2415,"@metamask/transaction-controller":2773,"@metamask/utils":2822,"bignumber.js":3847,"ethereumjs-util":4197},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.handleTransactionSubmitted=n.handleTransactionRejected=n.handleTransactionFailed=n.handleTransactionDropped=n.handleTransactionConfirmed=n.handleTransactionApproved=n.handleTransactionAdded=n.handlePostTransactionBalanceUpdate=n.createTransactionEventFragmentWithTxId=n.METRICS_STATUS_FAILED=void 0;var r=e("bignumber.js"),s=e("ethereumjs-util"),a=e("@metamask/transaction-controller"),o=e("@metamask/utils"),i=e("@metamask/rpc-errors"),c=e("../../../../shared/constants/app"),l=e("../../../../shared/constants/gas"),d=e("../../../../shared/constants/metametrics"),u=e("../../../../shared/constants/transaction"),p=e("../../../../shared/lib/transactions-controller-utils"),h=e("../../../../shared/modules/conversion.utils"),m=e("../../../../shared/modules/metametrics"),f=e("../../../../shared/modules/transaction.utils"),g=e("../../../../ui/helpers/utils/metrics"),b=e("../snap-keyring/metrics"),y=e("../../../../shared/lib/confirmation.utils"),C=e("../../../../shared/modules/gas.utils"),w=e("../../../../shared/modules/Numeric");const v=n.METRICS_STATUS_FAILED="failed on-chain";n.handleTransactionAdded=async(e,t)=>{if(!t.transactionMeta)return;const{properties:n,sensitiveProperties:r}=await M({transactionEventPayload:t,transactionMetricsRequest:e});k({eventName:u.TransactionMetaMetricsEvent.added,transactionEventPayload:t,transactionMetricsRequest:e,payload:{properties:n,sensitiveProperties:r}})};n.handleTransactionApproved=async(e,t)=>{t.transactionMeta&&await S({eventName:u.TransactionMetaMetricsEvent.approved,transactionEventPayload:t,transactionMetricsRequest:e})};n.handleTransactionFailed=async(e,t)=>{if(!t.transactionMeta)return;const n={};t.error&&(n.error=t.error),await S({eventName:u.TransactionMetaMetricsEvent.finalized,extraParams:n,transactionEventPayload:t,transactionMetricsRequest:e})};n.handleTransactionConfirmed=async(e,t)=>{if(0===Object.keys(t).length)return;const n={},r={...t},{txReceipt:s}=r;n.gas_used=null==s?void 0:s.gasUsed,n.block_number=(null==s?void 0:s.blockNumber)&&(0,h.hexToDecimal)(s.blockNumber);const{submittedTime:a,blockTimestamp:o}=r;a&&(n.completion_time=function(e){return Math.round((Date.now()-e)/1e3).toString()}(a)),a&&o&&(n.completion_time_onchain=function(e,t){const n=2,r=Number((0,h.hexToDecimal)(t))-e/1e3;return(Math.round(r*10**n)/10**n).toString()}(a,o)),"0x0"===(null==s?void 0:s.status)&&(n.status=v),await S({eventName:u.TransactionMetaMetricsEvent.finalized,extraParams:n,transactionEventPayload:{actionId:r.actionId,transactionMeta:r},transactionMetricsRequest:e})};n.handleTransactionDropped=async(e,t)=>{if(!t.transactionMeta)return;await S({eventName:u.TransactionMetaMetricsEvent.finalized,extraParams:{dropped:!0},transactionEventPayload:t,transactionMetricsRequest:e})};n.handleTransactionRejected=async(e,t)=>{t.transactionMeta&&await S({eventName:u.TransactionMetaMetricsEvent.rejected,transactionEventPayload:t,transactionMetricsRequest:e})};n.handleTransactionSubmitted=async(e,t)=>{if(!t.transactionMeta)return;const{properties:n,sensitiveProperties:r}=await M({transactionEventPayload:t,transactionMetricsRequest:e});k({eventName:u.TransactionMetaMetricsEvent.submitted,transactionEventPayload:t,transactionMetricsRequest:e,payload:{properties:n,sensitiveProperties:r}})};n.createTransactionEventFragmentWithTxId=async(e,{transactionId:t,actionId:n})=>{const r={...e.getTransaction(t),actionId:n},{properties:s,sensitiveProperties:a}=await M({transactionEventPayload:{transactionMeta:r},transactionMetricsRequest:e});k({eventName:u.TransactionMetaMetricsEvent.approved,transactionEventPayload:{actionId:r.actionId,transactionMeta:r},transactionMetricsRequest:e,payload:{properties:s,sensitiveProperties:a}})};function k({eventName:e,transactionEventPayload:{transactionMeta:t,actionId:n},transactionMetricsRequest:r,payload:s}){if(function(e,t,n){const r=T(t,n.id);return void 0!==e(r)}(r.getEventFragmentById,e,t)&&e!==u.TransactionMetaMetricsEvent.submitted)return;const a=T(e,t.id);switch(e){case u.TransactionMetaMetricsEvent.added:r.createEventFragment({category:d.MetaMetricsEventCategory.Transactions,initialEvent:u.TransactionMetaMetricsEvent.added,successEvent:u.TransactionMetaMetricsEvent.approved,failureEvent:u.TransactionMetaMetricsEvent.rejected,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:n,uniqueIdentifier:a,persist:!0});break;case u.TransactionMetaMetricsEvent.approved:case u.TransactionMetaMetricsEvent.rejected:r.createEventFragment({category:d.MetaMetricsEventCategory.Transactions,successEvent:u.TransactionMetaMetricsEvent.approved,failureEvent:u.TransactionMetaMetricsEvent.rejected,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:n,uniqueIdentifier:a,persist:!0});break;case u.TransactionMetaMetricsEvent.submitted:r.createEventFragment({category:d.MetaMetricsEventCategory.Transactions,initialEvent:u.TransactionMetaMetricsEvent.submitted,successEvent:u.TransactionMetaMetricsEvent.finalized,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:n,uniqueIdentifier:a,persist:!0});break;case u.TransactionMetaMetricsEvent.finalized:r.createEventFragment({category:d.MetaMetricsEventCategory.Transactions,successEvent:u.TransactionMetaMetricsEvent.finalized,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:n,uniqueIdentifier:a,persist:!0})}}async function S({eventName:e,transactionEventPayload:t,transactionMetricsRequest:n,extraParams:r={}}){const{properties:s,sensitiveProperties:a}=await M({transactionEventPayload:t,transactionMetricsRequest:n,extraParams:r});k({eventName:e,transactionEventPayload:t,transactionMetricsRequest:n,payload:{properties:s,sensitiveProperties:a}}),function({eventName:e,transactionEventPayload:{transactionMeta:t},transactionMetricsRequest:n,payload:r}){const s=T(e,t.id);switch(e){case u.TransactionMetaMetricsEvent.approved:case u.TransactionMetaMetricsEvent.rejected:case u.TransactionMetaMetricsEvent.finalized:n.updateEventFragment(s,{properties:r.properties,sensitiveProperties:r.sensitiveProperties})}}({eventName:e,transactionEventPayload:t,transactionMetricsRequest:n,payload:{properties:s,sensitiveProperties:a}}),function({eventName:e,transactionMetricsRequest:t,transactionEventPayload:{transactionMeta:n}}){const r=T(e,n.id);switch(e){case u.TransactionMetaMetricsEvent.approved:case u.TransactionMetaMetricsEvent.finalized:t.finalizeEventFragment(r);break;case u.TransactionMetaMetricsEvent.rejected:t.finalizeEventFragment(r,{abandoned:!0})}}({eventName:e,transactionEventPayload:t,transactionMetricsRequest:n})}function T(e,t){return`transaction-${e===u.TransactionMetaMetricsEvent.finalized||e===u.TransactionMetaMetricsEvent.submitted?"submitted":"added"}-${t}`}async function M({transactionEventPayload:{transactionMeta:e},transactionMetricsRequest:t,extraParams:n={}}){var v;const{type:k,time:S,status:T,chainId:M,origin:E,txParams:{gasPrice:P,gas:A,maxFeePerGas:_,maxPriorityFeePerGas:I,estimateSuggested:x,estimateUsed:N},defaultGasEstimates:R,originalType:B,replacedById:O,customTokenAmount:j,dappProposedTokenAmount:$,currentTokenBalance:D,originalApprovalAmount:F,finalApprovalAmount:U,securityProviderResponse:L,simulationFails:q,id:H,userFeeLevel:K}=e,V=E===c.ORIGIN_METAMASK?"user":"dapp",G="dappSuggested"===K?"dapp_proposed":K,{assetType:z,tokenStandard:W}=await(0,f.determineTransactionAssetType)(e,t.provider,t.getTokenStandardAndDetails);let J;if(e.txParams.data){const n=await t.getMethodData(e.txParams.data);J=null==n?void 0:n.name}const Y={};if((0,f.isEIP1559Transaction)(e)?(Y.max_fee_per_gas=_,Y.max_priority_fee_per_gas=I):(Y.gas_price=P,Y.default_estimate=d.MetaMetricsEventTransactionEstimateType.DefaultEstimate),R){var Q,X;const{estimateType:n}=R;if(n){var Z,ee;Y.default_estimate=n===l.PriorityLevels.dAppSuggested?d.MetaMetricsEventTransactionEstimateType.DappProposed:n;let r=null===(Z=e.defaultGasEstimates)||void 0===Z?void 0:Z.maxFeePerGas,s=null===(ee=e.defaultGasEstimates)||void 0===ee?void 0:ee.maxPriorityFeePerGas;if([l.GasRecommendations.low,l.GasRecommendations.medium,l.GasRecommendations.high].includes(n)){var te,ne;const{gasFeeEstimates:e}=await t.getEIP1559GasFeeEstimates();var re,se;if(null!=e&&null!==(te=e[n])&&void 0!==te&&te.suggestedMaxFeePerGas)r=null===(re=e[n])||void 0===re?void 0:re.suggestedMaxFeePerGas,Y.default_max_fee_per_gas=r;if(null!=e&&null!==(ne=e[n])&&void 0!==ne&&ne.suggestedMaxPriorityFeePerGas)s=null===(se=e[n])||void 0===se?void 0:se.suggestedMaxPriorityFeePerGas,Y.default_max_priority_fee_per_gas=s}}null!==(Q=e.defaultGasEstimates)&&void 0!==Q&&Q.gas&&(Y.default_gas=e.defaultGasEstimates.gas),null!==(X=e.defaultGasEstimates)&&void 0!==X&&X.gasPrice&&(Y.default_gas_price=e.defaultGasEstimates.gasPrice)}x&&(Y.estimate_suggested=x),N&&(Y.estimate_used=N),null!=n&&n.gas_used&&(Y.gas_used=n.gas_used);const ae=function(e){const t={};for(const n in e)(0,s.isHexString)(e[n])?t[n]=(0,h.hexWEIToDecGWEI)(e[n]):t[n]=e[n];return t}(Y);let oe="0";e.txParams.maxFeePerGas&&(oe="2");const ie=k&&[a.TransactionType.contractInteraction,a.TransactionType.tokenMethodApprove,a.TransactionType.tokenMethodIncreaseAllowance,a.TransactionType.tokenMethodSafeTransferFrom,a.TransactionType.tokenMethodSetApprovalForAll,a.TransactionType.tokenMethodTransfer,a.TransactionType.tokenMethodTransferFrom,a.TransactionType.swap,a.TransactionType.swapAndSend,a.TransactionType.swapApproval].includes(k),ce="Approve";let le,de,ue,pe,he,me,fe=a.TransactionType.simpleSend;if(k===a.TransactionType.swapAndSend)fe=a.TransactionType.swapAndSend;else if(k===a.TransactionType.cancel)fe=a.TransactionType.cancel;else if(k===a.TransactionType.retry&&B)fe=B;else if(k===a.TransactionType.deployContract)fe=a.TransactionType.deployContract;else if(ie){var ge,be;fe=a.TransactionType.contractInteraction,de=J,he=null===(ge=e.txParams)||void 0===ge?void 0:ge.to,me=null===(be=e.txParams)||void 0===be||null===(be=be.data)||void 0===be?void 0:be.slice(0,10),de===ce&&W===u.TokenStandard.ERC20&&("0"===$||"0"===j?le=u.TransactionApprovalAmountType.revoke:j&&j!==$?le=u.TransactionApprovalAmountType.custom:$&&(le=u.TransactionApprovalAmountType.dappProposed),ue=function(e,t,n){if(e===u.TransactionApprovalAmountType.custom&&t&&n)return`${new r.BigNumber(t,10).div(n,10).times(100).round(2)}`;return null}(le,F,U),pe=function(e,t,n){if((e===u.TransactionApprovalAmountType.custom||e===u.TransactionApprovalAmountType.dappProposed)&&t&&n)return`${new r.BigNumber(t,16).div(n,10).times(100).round(2)}`;return null}(le,$,D))}const ye=t.getTransaction(O),Ce={RETRY:a.TransactionType.retry,CANCEL:a.TransactionType.cancel,SAME_NONCE:"other"};let we;null!=n&&n.dropped&&(we=Ce.SAME_NONCE,(null==ye?void 0:ye.type)===a.TransactionType.cancel?we=Ce.CANCEL:(null==ye?void 0:ye.type)===a.TransactionType.retry&&(we=Ce.RETRY));const ve=[];let ke=null;1===(null==L?void 0:L.flagAsDangerous)?ve.push(d.MetaMetricsEventUiCustomization.FlaggedAsMalicious):2===(null==L?void 0:L.flagAsDangerous)&&ve.push(d.MetaMetricsEventUiCustomization.FlaggedAsSafetyUnknown);const Se=(0,g.getBlockaidMetricsProps)(e);(null==Se||null===(v=Se.ui_customizations)||void 0===v?void 0:v.length)>0&&ve.push(...Se.ui_customizations),q&&ve.push(d.MetaMetricsEventUiCustomization.GasEstimationFailed);(0,y.shouldUseRedesignForTransactions)({transactionMetadataType:e.type})&&(ve.push(d.MetaMetricsEventUiCustomization.RedesignedConfirmation),ke=t.getIsConfirmationAdvancedDetailsOpen());const Te=(0,m.getSmartTransactionMetricsProperties)(t,e),Me=(0,g.getSwapAndSendMetricsProps)(e),Ee={hd_entropy_index:t.getHDEntropyIndex()};let Pe={chain_id:M,referrer:E,source:V,status:T,network:`${parseInt(M,16)}`,eip_1559_version:oe,gas_edit_type:"none",gas_edit_attempted:"none",gas_estimation_failed:Boolean(q),account_type:await t.getAccountType(t.getSelectedAddress()),device_model:await t.getDeviceModel(t.getSelectedAddress()),asset_type:z,token_standard:W,transaction_type:fe,transaction_speed_up:k===a.TransactionType.retry,transaction_internal_id:H,gas_fee_selected:G,...Se,ui_customizations:ve.length>0?ve:null,transaction_advanced_view:ke,transaction_contract_method:de?[de]:[],...Te,...Me,...Ee};const Ae=await(0,b.getSnapAndHardwareInfoForMetrics)(t.getAccountType,t.getDeviceModel,t.getHardwareTypeForMetric,t.snapAndHardwareMessenger);Object.assign(Pe,Ae),de===ce&&(Pe={...Pe,transaction_approval_amount_type:le});let _e={transaction_envelope_type:(0,f.isEIP1559Transaction)(e)?p.TRANSACTION_ENVELOPE_TYPE_NAMES.FEE_MARKET:p.TRANSACTION_ENVELOPE_TYPE_NAMES.LEGACY,first_seen:S,gas_limit:A,transaction_replaced:we,transaction_contract_address:he?[he]:[],transaction_contract_method_4byte:me,...n,...ae};return de===ce&&(_e={..._e,transaction_approval_amount_vs_balance_ratio:pe,transaction_approval_amount_vs_proposed_ratio:ue}),await async function(e,t,n,r){const s=origin&&origin!==c.ORIGIN_METAMASK,{delegationAddress:o,nestedTransactions:l,txParams:d}=e,{authorizationList:u}=d,p=Boolean(null==l?void 0:l.length),h=Boolean(null==u?void 0:u.length);s&&(n.api_method=p?c.MESSAGE_TYPE.WALLET_SEND_CALLS:c.MESSAGE_TYPE.ETH_SEND_TRANSACTION);p&&(n.batch_transaction_count=null==l?void 0:l.length,n.batch_transaction_method="eip7702",n.transaction_contract_method=await async function(e,t){const n=e.filter((e=>e.type===a.TransactionType.contractInteraction&&e.data)).map((e=>e.data)),r=await Promise.all(n.map((e=>t(e))));return r.map((e=>null==e?void 0:e.name)).filter((e=>null==e?void 0:e.length))}(l??[],t),r.transaction_contract_address=null==l?void 0:l.filter((e=>{var t;return e.type===a.TransactionType.contractInteraction&&(null===(t=e.to)||void 0===t?void 0:t.length)})).map((e=>e.to)));if(e.status===a.TransactionStatus.rejected){const{error:t}=e;n.eip7702_upgrade_rejection=h&&t.code===i.errorCodes.rpc.methodNotSupported}n.eip7702_upgrade_transaction=h,r.account_eip7702_upgraded=o}(e,t.getMethodData,Pe,_e),function(e,t,n,r){var s;const{batchId:a,batchTransactions:i,gasFeeTokens:c,nestedTransactions:l,selectedGasFeeToken:d}=e;t.gas_payment_tokens_available=null==c?void 0:c.map((e=>e.symbol)),t.gas_paid_with=null==c||null===(s=c.find((e=>e.tokenAddress.toLowerCase()===(null==d?void 0:d.toLowerCase()))))||void 0===s?void 0:s.symbol,t.gas_insufficient_native_asset=function(e,t){const{chainId:n,txParams:r}=e,{from:s,gas:a,gasPrice:i,maxFeePerGas:c,value:l}=r,d=t(s,n),u=(0,C.getMaximumGasTotalInHexWei)({gasLimit:a,gasPrice:i,maxFeePerGas:c}),p=(0,o.add0x)((0,h.addHexes)(u,l??"0x0"));return new w.Numeric(p,16).greaterThan(new w.Numeric(d,16))}(e,r),!a||null!=i&&i.length||null!=l&&l.length||(t.transaction_type="gas_payment")}(e,Pe,0,t.getAccountBalance),{properties:Pe,sensitiveProperties:_e}}n.handlePostTransactionBalanceUpdate=async({getParticipateInMetrics:e,trackEvent:t,getHDEntropyIndex:n},{transactionMeta:s,approvalTransactionMeta:a})=>{var o;if(e()&&s.swapMetaData)if("0x0"===(null===(o=s.txReceipt)||void 0===o?void 0:o.status))t({event:d.MetaMetricsEventName.SwapFailed,category:d.MetaMetricsEventCategory.Swaps,sensitiveProperties:{...s.swapMetaData},properties:{hd_entropy_index:n()}});else{var i;const e=(0,p.getSwapsTokensReceivedFromTxMeta)(s.destinationTokenSymbol,s,s.destinationTokenAddress,s.txParams.from,s.destinationTokenDecimals,a,s.chainId),o=e?`${new r.BigNumber(e,10).div(s.swapMetaData.token_to_amount,10).times(100).round(2)}%`:null,c=null!==(i=s.txReceipt)&&void 0!==i&&i.gasUsed&&s.swapMetaData.estimated_gas?`${new r.BigNumber(s.txReceipt.gasUsed,16).div(s.swapMetaData.estimated_gas,10).times(100).round(2)}%`:null,l=function(e,t){var n,s;let a="0x0";null!=t&&t.txReceipt&&(a=(0,p.calcGasTotal)(t.txReceipt.gasUsed,t.txReceipt.effectiveGasPrice));const o=(0,p.calcGasTotal)(null===(n=e.txReceipt)||void 0===n?void 0:n.gasUsed,null===(s=e.txReceipt)||void 0===s?void 0:s.effectiveGasPrice),i=new r.BigNumber(o,16).plus(a,16).toString(16);return{approvalGasCostInEth:Number((0,h.hexWEIToDecETH)(a)),tradeGasCostInEth:Number((0,h.hexWEIToDecETH)(o)),tradeAndApprovalGasCostInEth:Number((0,h.hexWEIToDecETH)(i))}}(s,a);t({event:d.MetaMetricsEventName.SwapCompleted,category:d.MetaMetricsEventCategory.Swaps,sensitiveProperties:{...s.swapMetaData,token_to_amount_received:e,quote_vs_executionRatio:o,estimated_vs_used_gasRatio:c,approval_gas_cost_in_eth:l.approvalGasCostInEth,trade_gas_cost_in_eth:l.tradeGasCostInEth,trade_and_approval_gas_cost_in_eth:l.tradeAndApprovalGasCostInEth,token_to_amount:s.swapMetaData.token_to_amount.toString(10)},properties:{hd_entropy_index:n()}})}}}}},{package:"$root$",file:"app/scripts/lib/transaction/metrics.ts"}],[20,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getInstitutionalSnapControllerMessenger=function(e){return e.getRestricted({name:"InstitutionalSnapController",allowedActions:["AccountsController:getAccountByAddress","SnapController:handleRequest","TransactionController:updateCustodialTransaction"],allowedEvents:[]})}}}},{package:"$root$",file:"app/scripts/controller-init/messengers/accounts/institutional-snap-controller-messenger.ts"}],[200,{"../../../../shared/constants/app":5589,"../../../../shared/constants/smartTransactions":5613,"../../../../shared/modules/conversion.utils":5657,"../../../../shared/modules/transaction.utils":5679,"@metamask/smart-transactions-controller/dist/types":2489,"@metamask/transaction-controller":2773,loglevel:4733},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.submitSmartTransactionHook=n.submitBatchSmartTransactionHook=void 0;var r,s=e("@metamask/smart-transactions-controller/dist/types"),a=e("@metamask/transaction-controller"),o=(r=e("loglevel"))&&r.__esModule?r:{default:r},i=e("../../../../shared/modules/conversion.utils"),c=e("../../../../shared/constants/smartTransactions"),l=e("../../../../shared/modules/transaction.utils"),d=e("../../../../shared/constants/app");function u(e,t,n){p(e,t),t.set(e,n)}function p(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function h(e,t){return e.get(f(e,t))}function m(e,t,n){return e.set(f(e,t),n),n}function f(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}var g=new WeakMap,b=new WeakMap,y=new WeakMap,C=new WeakMap,w=new WeakMap,v=new WeakMap,k=new WeakMap,S=new WeakMap,T=new WeakMap,M=new WeakMap,E=new WeakMap,P=new WeakMap,A=new WeakMap,_=new WeakMap,I=new WeakSet;class x{constructor(e){!function(e,t){p(e,t),t.add(e)}(this,I),u(this,g,void 0),u(this,b,void 0),u(this,y,void 0),u(this,C,void 0),u(this,w,void 0),u(this,v,void 0),u(this,k,void 0),u(this,S,void 0),u(this,T,void 0),u(this,M,void 0),u(this,E,void 0),u(this,P,void 0),u(this,A,void 0),u(this,_,void 0);const{transactionMeta:t,signedTransactionInHex:n,smartTransactionsController:r,transactionController:s,isSmartTransaction:o,controllerMessenger:i,featureFlags:c,transactions:l}=e;m(b,this,""),m(g,this,!1),m(M,this,t),m(E,this,n),m(S,this,r),m(T,this,s),m(k,this,o),m(C,this,i),m(w,this,c),m(v,this,t.origin!==d.ORIGIN_METAMASK),m(y,this,t.chainId),m(A,this,t.txParams),m(P,this,l),m(_,this,Boolean(t.type!==a.TransactionType.bridge||h(P,this)&&h(P,this).length>0))}async submit(){const e=!!h(M,this).type&&[a.TransactionType.swapAndSend,a.TransactionType.swapApproval,a.TransactionType.bridgeApproval].includes(h(M,this).type),t={transactionHash:undefined};if(!h(k,this)||e||(0,l.isLegacyTransaction)(h(M,this)))return t;let n;h(_,this)&&await f(I,this,B).call(this);try{n=await h(S,this).getFees({...h(A,this),chainId:h(y,this)},undefined,{networkClientId:h(M,this).networkClientId})}catch(e){return o.default.error("Error in smart transaction publish hook, falling back to regular transaction submission",e),f(I,this,j).call(this),t}try{var r;const e=await f(I,this,L).call(this,{getFeesResponse:n}),t=null==e?void 0:e.uuid;if(!t)throw new Error("No smart transaction UUID");await f(I,this,O).call(this,t);let s;if(s=(null===(r=h(w,this))||void 0===r||null===(r=r.smartTransactions)||void 0===r?void 0:r.extensionReturnTxHashAsap)&&null!=e&&e.txHash?e.txHash:await f(I,this,U).call(this,{uuid:t}),null===s)throw new Error("Transaction does not have a transaction hash, there was a problem");return{transactionHash:s}}catch(e){throw o.default.error("Error in smart transaction publish hook",e),f(I,this,j).call(this),e}}async submitBatch(){if(!h(k,this))throw new Error("submitBatch: Smart Transaction is required for batch submissions");h(_,this)&&await f(I,this,B).call(this);try{const e=await f(I,this,L).call(this),t=null==e?void 0:e.uuid;if(!t)throw new Error("submitBatch: No smart transaction UUID");await f(I,this,O).call(this,t);if(null===await f(I,this,U).call(this,{uuid:t}))throw new Error("submitBatch: Transaction does not have a transaction hash, there was a problem");let n;return n=null!=e&&e.txHashes?{results:e.txHashes.map((e=>({transactionHash:e})))}:{results:[]},n}catch(e){throw o.default.error("submitBatch: Error in smart transaction publish batch hook",e),f(I,this,j).call(this),e}}}async function N(e){try{await h(C,this).call("ApprovalController:endFlow",{id:e})}catch(e){}}async function R(e){try{await f(I,this,N).call(this,e),await h(C,this).call("ApprovalController:acceptRequest",e),K._=""}catch(e){o.default.error("Error ending existing approval flow",e)}}async function B(){K._&&await f(I,this,R).call(this,K._);const{id:e}=await h(C,this).call("ApprovalController:startFlow");m(b,this,e),K._=e}async function O(e){h(_,this)&&(f(I,this,$).call(this,{uuid:e}),f(I,this,F).call(this,{uuid:e}))}function j(){h(_,this)&&!h(g,this)&&(m(g,this,!0),f(I,this,N).call(this,h(b,this)),K._===h(b,this)&&(K._=""))}function $({uuid:e}){const t=()=>{f(I,this,j).call(this)};h(C,this).call("ApprovalController:addRequest",{id:h(b,this),origin:origin,type:d.SMART_TRANSACTION_CONFIRMATION_TYPES.showSmartTransactionStatusPage,requestState:{smartTransaction:{status:s.SmartTransactionStatuses.PENDING,creationTime:Date.now(),uuid:e},isDapp:h(v,this),txId:h(M,this).id}},!0).then(t,t)}async function D({smartTransaction:e}){return await h(C,this).call("ApprovalController:updateRequestState",{id:h(b,this),requestState:{smartTransaction:e,isDapp:h(v,this),txId:h(M,this).id}})}async function F({uuid:e}){h(C,this).subscribe("SmartTransactionsController:smartTransaction",(async t=>{if(t.uuid===e){const{status:e}=t;if(!e||e===s.SmartTransactionStatuses.PENDING)return;h(g,this)||await f(I,this,D).call(this,{smartTransaction:t})}}))}function U({uuid:e}){return new Promise((t=>{h(C,this).subscribe("SmartTransactionsController:smartTransaction",(async n=>{if(n.uuid===e){const{status:e,statusMetadata:r}=n;if(!e||e===s.SmartTransactionStatuses.PENDING)return;o.default.debug("Smart Transaction: ",n),null!=r&&r.minedHash?(o.default.debug("Smart Transaction - Received tx hash: ",null==r?void 0:r.minedHash),t(r.minedHash)):t(null)}}))}))}async function L({getFeesResponse:e}={}){let t=[];if(h(P,this)&&Array.isArray(h(P,this))&&h(P,this).length>0)t=h(P,this).filter((e=>null==e?void 0:e.signedTx)).map((e=>e.signedTx));else if(h(E,this))t=[h(E,this)];else if(e){var n;t=await f(I,this,H).call(this,(null===(n=e.tradeTxFees)||void 0===n?void 0:n.fees)??[],!1)}return await h(S,this).submitSignedTransactions({signedTransactions:t,signedCanceledTransactions:[],txParams:h(A,this),transactionMeta:h(M,this),networkClientId:h(M,this).networkClientId})}function q(e,t){if(!h(A,this))throw new Error("Transaction params are required");const n={...h(A,this),maxFeePerGas:`0x${(0,i.decimalToHex)(e.maxFeePerGas)}`,maxPriorityFeePerGas:`0x${(0,i.decimalToHex)(e.maxPriorityFeePerGas)}`,gas:t?`0x${(0,i.decimalToHex)(c.CANCEL_GAS_LIMIT_DEC)}`:h(A,this).gas};return t&&(n.to=n.from,n.data="0x"),n}async function H(e,t){if(!h(A,this)||!h(y,this))throw new Error("Transaction params and chainId are required");const n=e.map((e=>f(I,this,q).call(this,e,t))).map((e=>({...e,chainId:e.chainId||h(y,this)})));return await h(T,this).approveTransactionsWithSameNonce(n,{hasNonce:!0})}var K={_:""};n.submitSmartTransactionHook=e=>new x(e).submit();n.submitBatchSmartTransactionHook=e=>new x(e).submitBatch()}}},{package:"$root$",file:"app/scripts/lib/transaction/smart-transactions.ts"}],[201,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.submitRelayTransaction=async function(e){const t=await fetch(null,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){const e=await t.text();throw new Error(`Transaction relay submit failed with status: ${t.status} - ${e}`)}return await t.json()}}}},{package:"$root$",file:"app/scripts/lib/transaction/transaction-relay.ts"}],[202,{"../../../../shared/constants/security-provider":5611,"../../../../shared/lib/trace":5648,"../ppom/ppom-util":149,"@metamask/keyring-api":2002,"ethereumjs-util":4197},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.addDappTransaction=async function(e){const{dappRequest:t}=e,{id:n,method:r,origin:s}=t,{securityAlertResponse:a,traceContext:o}=t,l={actionId:n,method:r,origin:s,requireApproval:!0,securityAlertResponse:a};(0,i.endTrace)({name:i.TraceName.Middleware,id:n});const{waitForHash:d}=await c({...e,transactionOptions:{...l,traceContext:o}}),u=await d();return(0,i.endTrace)({name:i.TraceName.Transaction,id:n}),u},n.addTransaction=async function(e){await async function(e){const{chainId:t,ppomController:n,securityAlertsEnabled:r,transactionOptions:s,transactionParams:i,updateSecurityAlertResponse:c,internalAccounts:l}=e,{type:d}=s,u=o.SECURITY_PROVIDER_EXCLUDED_TRANSACTION_TYPES.includes(d);if(!r||u)return;if(l.some((({address:e})=>{var t;return e.toLowerCase()===(null===(t=i.to)||void 0===t?void 0:t.toLowerCase())})))return;try{const{from:r,to:l,value:d,data:u}=i,{actionId:p,origin:h}=s,m={method:"eth_sendTransaction",id:p??"",origin:h??"",params:[{from:r,to:l??"",value:d??"",data:u??""}],jsonrpc:"2.0"},f=(0,a.generateSecurityAlertId)();(0,a.validateRequestWithPPOM)({ppomController:n,request:m,securityAlertId:f,chainId:t,updateSecurityAlertResponse:c});const g={...o.LOADING_SECURITY_ALERT_RESPONSE,securityAlertId:f};e.transactionOptions.securityAlertResponse=g}catch(e){(0,a.handlePPOMError)(e,"Error validating JSON RPC using PPOM: ")}}(e);const{transactionMeta:t,waitForHash:n}=await c(e);if(!e.waitForSubmit)return n().catch((()=>{})),t;const r=await n();return function(e,t){return t.state.transactions.find((t=>t.hash===e))}(r,e.transactionController)},n.getTransactionById=l;var r=e("@metamask/keyring-api"),s=e("ethereumjs-util"),a=e("../ppom/ppom-util"),o=e("../../../../shared/constants/security-provider"),i=e("../../../../shared/lib/trace");async function c(e){const{selectedAccount:t}=e;return t.type===r.EthAccountType.Erc4337?async function(e){var t;const{networkClientId:n,transactionController:r,transactionOptions:a,transactionParams:o,userOperationController:i}=e,{maxFeePerGas:c,maxPriorityFeePerGas:d}=o,{origin:u,requireApproval:p,type:h}=a,m={...o,maxFeePerGas:(0,s.addHexPrefix)(c),maxPriorityFeePerGas:(0,s.addHexPrefix)(d)},f=null==a||null===(t=a.swaps)||void 0===t?void 0:t.meta;null!=f&&f.type&&delete f.type;const g={networkClientId:n,origin:u,requireApproval:p,swaps:f,type:h},b=await i.addUserOperationFromTransaction(m,g);i.startPollingByNetworkClientId(n);return{transactionMeta:l(b.id,r),waitForHash:b.transactionHash}}(e):async function(e){const{transactionController:t,transactionOptions:n,transactionParams:r,networkClientId:s}=e,{result:a,transactionMeta:o}=await t.addTransaction(r,{...n,networkClientId:s});return{transactionMeta:o,waitForHash:()=>a}}(e)}function l(e,t){return t.state.transactions.find((t=>t.id===e))}}}},{package:"$root$",file:"app/scripts/lib/transaction/util.ts"}],[203,{"../../../../shared/constants/app":5589,"../../../../shared/constants/verification":5621,"../../../../shared/modules/selectors/networks":5674,"@ethersproject/hash":532,"@ethersproject/wallet":599,"@metamask/rpc-errors":2415,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.createTxVerificationMiddleware=function(e,t=i.TRUSTED_SIGNERS){return function(n,d,u,p){if(n.method!==c.MESSAGE_TYPE.ETH_SEND_TRANSACTION||!Array.isArray(n.params)||!function(e){return(0,o.isObject)(e[0])&&"string"==typeof e[0].data&&"string"==typeof e[0].from&&"string"==typeof e[0].to&&"string"==typeof e[0].value&&(!(0,o.hasProperty)(e[0],"chainId")||"string"==typeof e[0].chainId&&e[0].chainId.startsWith("0x"))}(n.params))return u();const h=n.params[0],m="string"==typeof h.chainId?h.chainId.toLowerCase():(0,l.getCurrentChainId)({metamask:e.state}),f=(0,i.getExperience)(h.to.toLowerCase(),m);if(!f||!i.EXPERIENCES_TO_VERIFY.includes(f))return u();const g=`0x${h.data.slice(-i.TX_SIG_LEN)}`,b=(0,s.verifyMessage)(function(e){const t={to:(0,r.hashMessage)(e.to.toLowerCase()),from:(0,r.hashMessage)(e.from.toLowerCase()),data:(0,r.hashMessage)(e.data.toLowerCase().slice(0,e.data.length-i.TX_SIG_LEN)),value:(0,r.hashMessage)(e.value.toLowerCase())};return(0,r.hashMessage)(JSON.stringify(t))}(h),g);return b!==t[f]?p(a.rpcErrors.invalidParams("Invalid transaction signature.")):u()}};var r=e("@ethersproject/hash"),s=e("@ethersproject/wallet"),a=e("@metamask/rpc-errors"),o=e("@metamask/utils"),i=e("../../../../shared/constants/verification"),c=e("../../../../shared/constants/app"),l=e("../../../../shared/modules/selectors/networks")}}},{package:"$root$",file:"app/scripts/lib/tx-verification/tx-verification-middleware.ts"}],[205,{"../../development/build/constants":388,"../../shared/constants/app":5589,"../../shared/constants/bridge":5590,"../../shared/constants/hardware-wallets":5596,"../../shared/constants/keyring":5597,"../../shared/constants/logs":5599,"../../shared/constants/metametrics":5600,"../../shared/constants/methods-tags":5601,"../../shared/constants/multichain/networks":5603,"../../shared/constants/network":5604,"../../shared/constants/permissions":5608,"../../shared/constants/smartTransactions":5613,"../../shared/constants/swaps":5615,"../../shared/constants/time":5617,"../../shared/constants/tokens":5618,"../../shared/constants/transaction":5619,"../../shared/constants/urls":5620,"../../shared/lib/fetch-with-cache":5634,"../../shared/lib/metamask-controller-utils":5638,"../../shared/lib/storage-helpers":5644,"../../shared/lib/token-util":5647,"../../shared/lib/trace":5648,"../../shared/lib/transactions-controller-utils":5650,"../../shared/modules/caip-stream":5655,"../../shared/modules/mv3.utils":5666,"../../shared/modules/network.utils":5667,"../../shared/modules/selectors":5673,"../../shared/modules/selectors/networks":5674,"../../shared/modules/string-utils":5677,"../../shared/modules/transaction.utils":5679,"../../shared/notifications":5681,"../../shared/types/bridge-status":5682,"./constants/stream":9,"./controller-init/assets":11,"./controller-init/confirmations/ppom-controller-init":15,"./controller-init/confirmations/transaction-controller-init":16,"./controller-init/identity/authentication-controller-init":17,"./controller-init/identity/user-storage-controller-init":18,"./controller-init/institutional-snap/institutional-snap-controller-init":19,"./controller-init/multichain":49,"./controller-init/notifications/notification-services-controller-init":55,"./controller-init/notifications/notification-services-push-controller-init":56,"./controller-init/snaps":59,"./controller-init/utils":66,"./controllers/account-order":67,"./controllers/account-tracker-controller":68,"./controllers/alert-controller":69,"./controllers/app-metadata":70,"./controllers/app-state-controller":71,"./controllers/bridge-status/bridge-status-controller":72,"./controllers/bridge-status/constants":73,"./controllers/decrypt-message":76,"./controllers/encryption-public-key":77,"./controllers/metametrics-controller":79,"./controllers/metametrics-data-deletion/metametrics-data-deletion":80,"./controllers/network-order":81,"./controllers/onboarding":82,"./controllers/permissions":86,"./controllers/preferences-controller":89,"./controllers/swaps":93,"./detect-multiple-instances":96,"./lib/AccountIdentitiesPetnamesBridge":107,"./lib/AddressBookPetnamesBridge":108,"./lib/ComposableObservableStore":109,"./lib/PatchStore":110,"./lib/SnapsNameProvider":111,"./lib/WeakRefObjectMap":112,"./lib/approval/utils":113,"./lib/backup":114,"./lib/bridge-status/metrics":116,"./lib/createDupeReqFilterStream":117,"./lib/createEvmMethodsToNonEvmAccountReqFilterMiddleware":118,"./lib/createLoggerMiddleware":119,"./lib/createMainFrameOriginMiddleware":120,"./lib/createMetaRPCHandler":121,"./lib/createMetamaskMiddleware":122,"./lib/createOnboardingMiddleware":123,"./lib/createOriginMiddleware":124,"./lib/createOriginThrottlingMiddleware":125,"./lib/createRPCMethodTrackingMiddleware":126,"./lib/createTabIdMiddleware":128,"./lib/createTracingMiddleware":129,"./lib/encryptor-factory":130,"./lib/hardware-keyring-builder-factory":138,"./lib/multichain/address":142,"./lib/offscreen-bridge/lattice-offscreen-keyring":144,"./lib/offscreen-bridge/ledger-offscreen-bridge":145,"./lib/offscreen-bridge/trezor-offscreen-bridge":146,"./lib/ppom/ppom-middleware":148,"./lib/ppom/ppom-util":149,"./lib/rpc-method-middleware":169,"./lib/rpc-method-middleware/handlers/wallet-createSession":164,"./lib/segment":171,"./lib/signature/util":175,"./lib/snap-keyring":176,"./lib/snap-keyring/keyring-snaps-permissions":177,"./lib/state-utils":184,"./lib/stream-utils":189,"./lib/transaction/decode/util":195,"./lib/transaction/eip5792":197,"./lib/transaction/metrics":199,"./lib/transaction/util":202,"./lib/tx-verification/tx-verification-middleware":203,"./lib/util":204,"./services/data-deletion-service":384,"./translate":385,"@ethersproject/abi":503,"@keystonehq/metamask-airgapped-keyring":709,"@metamask/accounts-controller":1313,"@metamask/address-book-controller":1316,"@metamask/announcement-controller":1318,"@metamask/approval-controller":1321,"@metamask/assets-controllers":1351,"@metamask/base-controller":1405,"@metamask/bridge-controller":1411,"@metamask/chain-agnostic-permission":1495,"@metamask/controller-utils":1512,"@metamask/ens-controller":1541,"@metamask/eth-json-rpc-filters":1595,"@metamask/eth-json-rpc-filters/subscriptionManager":1597,"@metamask/eth-json-rpc-middleware":1609,"@metamask/eth-ledger-bridge-keyring":1669,"@metamask/eth-sig-util":1720,"@metamask/eth-trezor-keyring":1877,"@metamask/gas-fee-controller":1942,"@metamask/json-rpc-engine":1952,"@metamask/json-rpc-middleware-stream":1956,"@metamask/keyring-api":2002,"@metamask/keyring-controller":2009,"@metamask/logging-controller":2081,"@metamask/metamask-eth-abis":2099,"@metamask/multichain-api-middleware":2104,"@metamask/name-controller":2176,"@metamask/network-controller":2188,"@metamask/notification-services-controller/notification-services":2205,"@metamask/obs-store":2247,"@metamask/obs-store/dist/asStream":2246,"@metamask/permission-controller":2254,"@metamask/permission-log-controller":2263,"@metamask/phishing-controller":2266,"@metamask/queued-request-controller":2377,"@metamask/remote-feature-flag-controller":2408,"@metamask/rpc-errors":2415,"@metamask/scure-bip39/dist/wordlists/english":2419,"@metamask/selected-network-controller":2431,"@metamask/signature-controller":2438,"@metamask/smart-transactions-controller":2488,"@metamask/smart-transactions-controller/dist/types":2489,"@metamask/snaps-controllers":2496,"@metamask/snaps-rpc-methods":2561,"@metamask/snaps-utils":2718,"@metamask/transaction-controller":2773,"@metamask/user-operation-controller":2800,"@metamask/utils":2822,"@sentry/browser":2953,"await-semaphore":3786,buffer:3943,"eth-chainlist":4145,"eth-lattice-keyring":4150,events:4269,lodash:4725,loglevel:4733,nanoid:4829,"readable-stream":5144},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.default=n.METAMASK_CONTROLLER_EVENTS=void 0;var r=nn(e("events")),s=e("readable-stream"),a=e("@metamask/assets-controllers"),o=e("@metamask/json-rpc-engine"),i=e("@metamask/json-rpc-middleware-stream"),c=e("@metamask/obs-store"),l=e("@metamask/obs-store/dist/asStream"),d=e("@metamask/eth-json-rpc-middleware"),u=e("lodash"),p=e("@metamask/keyring-controller"),h=nn(e("@metamask/eth-json-rpc-filters")),m=nn(e("@metamask/eth-json-rpc-filters/subscriptionManager")),f=e("@metamask/rpc-errors"),g=e("await-semaphore"),b=nn(e("loglevel")),y=e("@metamask/eth-trezor-keyring"),C=e("@metamask/eth-ledger-bridge-keyring"),w=nn(e("eth-lattice-keyring")),v=e("eth-chainlist"),k=e("@keystonehq/metamask-airgapped-keyring"),S=e("nanoid"),T=e("@sentry/browser"),M=e("@metamask/address-book-controller"),E=e("@metamask/approval-controller"),P=e("@metamask/base-controller"),A=e("@metamask/ens-controller"),_=e("@metamask/phishing-controller"),I=e("@metamask/announcement-controller"),x=e("@metamask/network-controller"),N=e("@metamask/gas-fee-controller"),R=e("@metamask/permission-controller"),B=nn(e("@metamask/smart-transactions-controller")),O=e("@metamask/smart-transactions-controller/dist/types"),j=e("@metamask/selected-network-controller"),$=e("@metamask/logging-controller"),D=e("@metamask/permission-log-controller"),F=e("@metamask/snaps-controllers"),U=e("@metamask/snaps-rpc-methods"),L=e("@metamask/controller-utils"),q=e("@metamask/accounts-controller"),H=e("@metamask/remote-feature-flag-controller"),K=e("@metamask/signature-controller"),V=e("@metamask/scure-bip39/dist/wordlists/english"),G=e("@metamask/name-controller"),z=e("@metamask/queued-request-controller"),W=e("@metamask/user-operation-controller"),J=e("@metamask/bridge-controller"),Y=e("@metamask/transaction-controller"),Q=e("@metamask/snaps-utils"),X=e("@ethersproject/abi"),Z=e("@metamask/metamask-eth-abis"),ee=e("@metamask/keyring-api"),te=e("@metamask/utils"),ne=e("@metamask/eth-sig-util"),re=e("@metamask/notification-services-controller/notification-services"),se=e("@metamask/multichain-api-middleware"),ae=e("@metamask/chain-agnostic-permission"),oe=e("../../shared/constants/methods-tags"),ie=e("../../shared/constants/transaction"),ce=e("../../shared/constants/swaps"),le=e("../../shared/constants/network"),de=e("../../shared/constants/smartTransactions"),ue=e("../../shared/constants/hardware-wallets"),pe=e("../../shared/constants/keyring"),he=e("../../shared/constants/permissions"),me=e("../../shared/notifications"),fe=e("../../shared/constants/time"),ge=e("../../shared/constants/app"),be=e("../../shared/constants/metametrics"),ye=e("../../shared/constants/logs"),Ce=e("../../shared/lib/storage-helpers"),we=e("../../shared/lib/token-util"),ve=e("../../shared/modules/string-utils"),ke=e("../../shared/modules/transaction.utils"),Se=e("../../shared/constants/tokens"),Te=e("../../shared/lib/metamask-controller-utils"),Me=e("../../shared/modules/mv3.utils"),Ee=e("../../shared/modules/network.utils"),Pe=e("../../shared/modules/selectors"),Ae=(e("../../shared/modules/caip-stream"),e("../../shared/constants/urls")),_e=e("../../shared/lib/transactions-controller-utils"),Ie=e("../../shared/modules/selectors/networks"),xe=e("../../shared/lib/trace"),Ne=e("../../development/build/constants"),Re=nn(e("../../shared/lib/fetch-with-cache")),Be=e("../../shared/constants/multichain/networks"),Oe=e("../../shared/constants/bridge"),je=e("../../shared/types/bridge-status"),$e=e("./lib/transaction/metrics"),De=e("./lib/snap-keyring/keyring-snaps-permissions"),Fe=e("./lib/SnapsNameProvider"),Ue=e("./lib/AddressBookPetnamesBridge"),Le=e("./lib/AccountIdentitiesPetnamesBridge"),qe=e("./lib/ppom/ppom-middleware"),He=e("./detect-multiple-instances"),Ke=nn(e("./lib/ComposableObservableStore")),Ve=nn(e("./controllers/account-tracker-controller")),Ge=nn(e("./lib/createDupeReqFilterStream")),ze=nn(e("./lib/createLoggerMiddleware")),We=e("./lib/rpc-method-middleware"),Je=nn(e("./lib/createOriginMiddleware")),Ye=nn(e("./lib/createMainFrameOriginMiddleware")),Qe=nn(e("./lib/createTabIdMiddleware")),Xe=e("./controllers/network-order"),Ze=e("./controllers/account-order"),et=nn(e("./lib/createOnboardingMiddleware")),tt=e("./lib/stream-utils"),nt=e("./controllers/preferences-controller"),rt=e("./controllers/app-state-controller"),st=e("./controllers/alert-controller"),at=nn(e("./controllers/onboarding")),ot=nn(e("./lib/backup")),it=nn(e("./controllers/decrypt-message")),ct=nn(e("./controllers/swaps")),lt=nn(e("./controllers/metametrics-controller")),dt=e("./lib/segment"),ut=nn(e("./lib/createMetaRPCHandler")),pt=e("./lib/util"),ht=nn(e("./lib/createMetamaskMiddleware")),mt=e("./lib/hardware-keyring-builder-factory"),ft=nn(e("./controllers/encryption-public-key")),gt=nn(e("./controllers/app-metadata")),bt=e("./controllers/permissions"),yt=e("./controllers/metametrics-data-deletion/metametrics-data-deletion"),Ct=e("./services/data-deletion-service"),wt=nn(e("./lib/createRPCMethodTrackingMiddleware")),vt=e("./translate"),kt=e("./lib/offscreen-bridge/trezor-offscreen-bridge"),St=e("./lib/offscreen-bridge/ledger-offscreen-bridge"),Tt=e("./lib/snap-keyring"),Mt=e("./lib/encryptor-factory"),Et=e("./lib/transaction/util"),Pt=e("./lib/signature/util"),At=e("./lib/offscreen-bridge/lattice-offscreen-keyring"),_t=e("./lib/WeakRefObjectMap"),It=e("./constants/stream"),xt=e("./lib/tx-verification/tx-verification-middleware"),Nt=e("./lib/ppom/ppom-util"),Rt=nn(e("./lib/createEvmMethodsToNonEvmAccountReqFilterMiddleware")),Bt=e("./lib/multichain/address"),Ot=e("./lib/transaction/decode/util"),jt=nn(e("./lib/createTracingMiddleware")),$t=nn(e("./lib/createOriginThrottlingMiddleware")),Dt=e("./lib/PatchStore"),Ft=e("./lib/state-utils"),Ut=(e("./lib/rpc-method-middleware/handlers/wallet-createSession"),nn(e("./controllers/bridge-status/bridge-status-controller"))),Lt=e("./controllers/bridge-status/constants"),qt=e("./lib/approval/utils"),Ht=e("./lib/bridge-status/metrics"),Kt=e("./controller-init/institutional-snap/institutional-snap-controller-init"),Vt=e("./controller-init/multichain"),Gt=e("./controller-init/assets"),zt=e("./controller-init/confirmations/transaction-controller-init"),Wt=e("./controller-init/confirmations/ppom-controller-init"),Jt=e("./controller-init/utils"),Yt=e("./controller-init/snaps"),Qt=e("./controller-init/identity/authentication-controller-init"),Xt=e("./controller-init/identity/user-storage-controller-init"),Zt=e("./lib/transaction/eip5792"),en=e("./controller-init/notifications/notification-services-controller-init"),tn=e("./controller-init/notifications/notification-services-push-controller-init");function nn(e){return e&&e.__esModule?e:{default:e}}function rn(e,t){(function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")})(e,t),t.add(e)}function sn(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function an(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}n.METAMASK_CONTROLLER_EVENTS={UPDATE_BADGE:"updateBadge",DECRYPT_MESSAGE_MANAGER_UPDATE_BADGE:"DecryptMessageManager:updateBadge",ENCRYPTION_PUBLIC_KEY_MANAGER_UPDATE_BADGE:"EncryptionPublicKeyManager:updateBadge",APPROVAL_STATE_CHANGE:"ApprovalController:stateChange",APP_STATE_UNLOCK_CHANGE:"AppStateController:unlockChange",QUEUED_REQUEST_STATE_CHANGE:"QueuedRequestController:stateChange",METAMASK_NOTIFICATIONS_LIST_UPDATED:"NotificationServicesController:notificationsListUpdated",METAMASK_NOTIFICATIONS_MARK_AS_READ:"NotificationServicesController:markNotificationsAsRead"};const on="eip-1193",cn="caip-multichain",ln={[Ne.ENVIRONMENT.DEVELOPMENT]:H.EnvironmentType.Development,[Ne.ENVIRONMENT.RELEASE_CANDIDATE]:H.EnvironmentType.ReleaseCandidate,[Ne.ENVIRONMENT.PRODUCTION]:H.EnvironmentType.Production},dn={flask:H.DistributionType.Flask,main:H.DistributionType.Main,beta:H.DistributionType.Beta};var un=new WeakSet;class pn extends r.default{constructor(e){var t;super(),rn(this,un),sn(this,"_trackSnapExportUsage",(0,u.wrap)((0,u.memoize)((()=>(0,u.throttle)(((e,t,n,r)=>{var s;return this.metaMetricsController.trackEvent({event:be.MetaMetricsEventName.SnapExportUsed,category:be.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,export:t,snap_category:null===(s=this._getSnapMetadata(e))||void 0===s?void 0:s.category,success:n,origin:r}})}),60*fe.SECOND)),((e,t,n,r)=>`${e}${t}${r}`)),((e,...t)=>e(...t)(...t)))),sn(this,"handleWatchAssetRequest",(({asset:e,type:t,origin:n,networkClientId:r})=>{switch(t){case L.ERC20:return this.tokensController.watchAsset({asset:e,type:t,networkClientId:r});case L.ERC721:case L.ERC1155:return this.nftController.watchNft(e,t,n);default:throw new Error(`Asset type ${t} not supported`)}})),sn(this,"removePermissionsFor",(e=>{try{this.permissionController.revokePermissions(e)}catch(e){if(!(e instanceof R.PermissionsRequestNotFoundError))throw e}})),sn(this,"updateCaveat",((e,t,n,r)=>{try{this.controllerMessenger.call("PermissionController:updateCaveat",e,t,n,r)}catch(e){if(!(e instanceof R.PermissionsRequestNotFoundError))throw e}})),sn(this,"updateNetworksList",(e=>{try{this.networkOrderController.updateNetworksList(e)}catch(e){throw b.default.error(e.message),e}})),sn(this,"updateAccountsList",(e=>{try{this.accountOrderController.updateAccountsList(e)}catch(e){throw b.default.error(e.message),e}})),sn(this,"updateHiddenAccountsList",(e=>{try{this.accountOrderController.updateHiddenAccountsList(e)}catch(e){throw b.default.error(e.message),e}})),sn(this,"rejectPermissionsRequest",(e=>{try{this.permissionController.rejectPermissionsRequest(e)}catch(e){if(!(e instanceof R.PermissionsRequestNotFoundError))throw e}})),sn(this,"acceptPermissionsRequest",(e=>{try{this.permissionController.acceptPermissionsRequest(e)}catch(e){if(!(e instanceof R.PermissionsRequestNotFoundError))throw e}})),sn(this,"resolvePendingApproval",(async(e,t,n)=>{try{await this.approvalController.accept(e,t,n)}catch(e){if(!(e instanceof E.ApprovalRequestNotFoundError))throw e}})),sn(this,"rejectPendingApproval",((e,t)=>{try{this.approvalController.reject(e,new f.JsonRpcError(t.code,t.message,t.data))}catch(e){if(!(e instanceof E.ApprovalRequestNotFoundError))throw e}}));const{isFirstMetaMaskControllerSetup:n}=e;this.defaultMaxListeners=20,this.sendUpdate=(0,u.debounce)(this.privateSendUpdate.bind(this),200*fe.MILLISECOND),this.opts=e,this.extension=e.browser,this.platform=e.platform,this.notificationManager=e.notificationManager;const r=e.initState||{},s="12.15.2";this.recordFirstTimeInfo(r),this.featureFlags=e.featureFlags,this.activeControllerConnections=0,this.offscreenPromise=e.offscreenPromise??Promise.resolve(),this.getRequestAccountTabIds=e.getRequestAccountTabIds,this.getOpenMetamaskTabsIds=e.getOpenMetamaskTabsIds,this.initializeChainlist(),this.controllerMessenger=new P.Messenger,this.loggingController=new $.LoggingController({messenger:this.controllerMessenger.getRestricted({name:"LoggingController",allowedActions:[],allowedEvents:[]}),state:r.LoggingController}),this.localStoreApiWrapper=e.persistanceManager,this.currentMigrationVersion=e.currentMigrationVersion,this.store=new Ke.default({state:r,controllerMessenger:this.controllerMessenger,persist:!0}),this.connections={},this.createVaultMutex=new g.Mutex,this.extension.runtime.onInstalled.addListener((e=>{"update"===e.reason&&this.loggingController.add({type:$.LogType.GenericLog,data:{event:ye.LOG_EVENT.VERSION_UPDATE,previousVersion:e.previousVersion,version:s}})})),this.appMetadataController=new gt.default({state:r.AppMetadataController,messenger:this.controllerMessenger.getRestricted({name:"AppMetadataController",allowedActions:[],allowedEvents:[]}),currentMigrationVersion:this.currentMigrationVersion,currentAppVersion:s});const o=()=>{this.encryptionPublicKeyController.clearUnapproved(),this.decryptMessageController.clearUnapproved(),this.signatureController.clearUnapproved(),this.approvalController.clear(f.providerErrors.userRejectedRequest())};this.approvalController=new E.ApprovalController({messenger:this.controllerMessenger.getRestricted({name:"ApprovalController"}),showApprovalRequest:e.showUserConfirmation,typesExcludedFromRateLimiting:[L.ApprovalType.PersonalSign,L.ApprovalType.EthSignTypedData,L.ApprovalType.Transaction,L.ApprovalType.WatchAsset,L.ApprovalType.EthGetEncryptionPublicKey,L.ApprovalType.EthDecrypt,ge.SMART_TRANSACTION_CONFIRMATION_TYPES.showSmartTransactionStatusPage]}),this.queuedRequestController=new z.QueuedRequestController({messenger:this.controllerMessenger.getRestricted({name:"QueuedRequestController",allowedActions:["NetworkController:getState","NetworkController:setActiveNetwork","SelectedNetworkController:getNetworkClientIdForDomain"],allowedEvents:["SelectedNetworkController:stateChange"]}),shouldRequestSwitchNetwork:({method:e})=>oe.methodsRequiringNetworkSwitch.includes(e),canRequestSwitchNetworkWithoutApproval:({method:e})=>oe.methodsThatCanSwitchNetworkWithoutApproval.includes(e),clearPendingConfirmations:o,showApprovalRequest:()=>{this.approvalController.getTotalApprovalCount()>0&&e.showUserConfirmation()}});const i=this.controllerMessenger.getRestricted({name:"NetworkController"});let c=r.NetworkController;if(!c){c=(0,x.getDefaultNetworkControllerState)();const e=c.networkConfigurationsByChainId;let t;e[le.CHAIN_IDS.MAINNET].name=le.MAINNET_DISPLAY_NAME,delete e[le.CHAIN_IDS.GOERLI],delete e[le.CHAIN_IDS.LINEA_GOERLI],e[le.CHAIN_IDS.MEGAETH_TESTNET]=(0,u.cloneDeep)(le.DEFAULT_CUSTOM_TESTNET_MAP[le.CHAIN_IDS.MEGAETH_TESTNET]),Object.values(e).forEach((e=>{const t=e.rpcEndpoints[0].networkClientId;(0,te.hasProperty)(L.BlockExplorerUrl,t)&&(e.blockExplorerUrls=[L.BlockExplorerUrl[t]]),e.defaultBlockExplorerUrlIndex=0})),t=e[le.CHAIN_IDS.MAINNET],c.selectedNetworkClientId=t.rpcEndpoints[t.defaultRpcEndpointIndex].networkClientId}this.networkController=new x.NetworkController({messenger:i,state:c,infuraProjectId:e.infuraProjectId,getRpcServiceOptions:()=>({fetch:globalThis.fetch.bind(globalThis),btoa:globalThis.btoa.bind(globalThis)})}),this.networkController.initializeProvider(),this.provider=this.networkController.getProviderAndBlockTracker().provider,this.blockTracker=this.networkController.getProviderAndBlockTracker().blockTracker,this.deprecatedNetworkVersions={};const l=this.controllerMessenger.getRestricted({name:"AccountsController",allowedEvents:["SnapController:stateChange","KeyringController:accountRemoved","KeyringController:stateChange","SnapKeyring:accountAssetListUpdated","SnapKeyring:accountBalancesUpdated","SnapKeyring:accountTransactionsUpdated","MultichainNetworkController:networkDidChange"],allowedActions:["KeyringController:getAccounts","KeyringController:getKeyringsByType","KeyringController:getKeyringForAccount"]});this.accountsController=new q.AccountsController({messenger:l,state:r.AccountsController});const d=this.controllerMessenger.getRestricted({name:"PreferencesController",allowedActions:["AccountsController:setSelectedAccount","AccountsController:getSelectedAccount","AccountsController:getAccountByAddress","AccountsController:setAccountName","NetworkController:getState"],allowedEvents:["AccountsController:stateChange"]});this.preferencesController=new nt.PreferencesController({state:{currentLocale:e.initLangCode??"",...r.PreferencesController},messenger:d});const h=this.controllerMessenger.getRestricted({name:"TokenListController",allowedActions:["NetworkController:getNetworkClientById"],allowedEvents:["NetworkController:stateChange"]});this.tokenListController=new a.TokenListController({chainId:an(un,this,gn).call(this,{metamask:this.networkController.state}),preventPollingOnNetworkRestart:!an(un,this,fn).call(this,this.preferencesController.state),messenger:h,state:r.TokenListController});const m=this.controllerMessenger.getRestricted({name:"TokensController",allowedActions:["ApprovalController:addRequest","NetworkController:getNetworkClientById","AccountsController:getSelectedAccount","AccountsController:getAccount"],allowedEvents:["NetworkController:networkDidChange","AccountsController:selectedEvmAccountChange","PreferencesController:stateChange","TokenListController:stateChange","NetworkController:stateChange"]});this.tokensController=new a.TokensController({state:r.TokensController,provider:this.provider,messenger:m,chainId:an(un,this,gn).call(this)});const v=this.controllerMessenger.getRestricted({name:"MetaMetricsController",allowedActions:["PreferencesController:getState","NetworkController:getState","NetworkController:getNetworkClientById"],allowedEvents:["PreferencesController:stateChange","NetworkController:networkDidChange"]});this.metaMetricsController=new lt.default({state:r.MetaMetricsController,messenger:v,segment:dt.segment,version:"12.15.2",environment:"other",extension:this.extension,captureException:T.captureException}),this.on("update",(e=>{this.metaMetricsController.handleMetaMaskStateUpdate(e)}));const S=new Ct.DataDeletionService,U=this.controllerMessenger.getRestricted({name:"MetaMetricsDataDeletionController",allowedActions:["MetaMetricsController:getState"],allowedEvents:[]});this.metaMetricsDataDeletionController=new yt.MetaMetricsDataDeletionController({dataDeletionService:S,messenger:U,state:r.metaMetricsDataDeletionController});const V=this.controllerMessenger.getRestricted({name:"GasFeeController",allowedActions:["NetworkController:getEIP1559Compatibility","NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:["NetworkController:stateChange"]}),Q=ce.GAS_API_BASE_URL;this.gasFeeController=new N.GasFeeController({state:r.GasFeeController,interval:1e4,messenger:V,clientId:ce.SWAPS_CLIENT_ID,getProvider:()=>this.networkController.getProviderAndBlockTracker().provider,onNetworkDidChange:e=>{i.subscribe("NetworkController:networkDidChange",(()=>e(this.networkController.state)))},getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),legacyAPIEndpoint:`${Q}/networks/<chain_id>/gasPrices`,EIP1559APIEndpoint:`${Q}/networks/<chain_id>/suggestedGasFees`,getCurrentNetworkLegacyGasAPICompatibility:()=>an(un,this,gn).call(this)===le.CHAIN_IDS.BSC,getChainId:()=>an(un,this,gn).call(this)}),this.appStateController=new rt.AppStateController({addUnlockListener:this.on.bind(this,"unlock"),isUnlocked:this.isUnlocked.bind(this),state:r.AppStateController,onInactiveTimeout:()=>this.setLocked(),messenger:this.controllerMessenger.getRestricted({name:"AppStateController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,"PreferencesController:getState"],allowedEvents:["KeyringController:qrKeyringStateChange","PreferencesController:stateChange"]}),extension:this.extension});const X=this.controllerMessenger.getRestricted({name:"CurrencyRateController",allowedActions:[`${this.networkController.name}:getNetworkClientById`]});this.currencyRateController=new a.CurrencyRateController({includeUsdRate:!0,messenger:X,state:r.CurrencyController});const Z=this.currencyRateController.fetchMultiExchangeRate.bind(this.currencyRateController);this.currencyRateController.fetchMultiExchangeRate=(...e)=>this.preferencesController.state.useCurrencyRateCheck?Z(...e):{conversionRate:null,usdConversionRate:null};const ee=this.controllerMessenger.getRestricted({name:"TokenBalancesController",allowedActions:["NetworkController:getState","NetworkController:getNetworkClientById","TokensController:getState","PreferencesController:getState","AccountsController:getSelectedAccount"],allowedEvents:["PreferencesController:stateChange","TokensController:stateChange","NetworkController:stateChange"]});this.tokenBalancesController=new a.TokenBalancesController({messenger:ee,state:r.TokenBalancesController,interval:3e4});const ne=this.controllerMessenger.getRestricted({name:"PhishingController"});this.phishingController=new _.PhishingController({messenger:ne,state:r.PhishingController,hotlistRefreshInterval:undefined,stalelistRefreshInterval:undefined});const re=this.controllerMessenger.getRestricted({name:"AnnouncementController"});this.announcementController=new I.AnnouncementController({messenger:re,allAnnouncements:me.UI_NOTIFICATIONS,state:r.AnnouncementController});const se=this.controllerMessenger.getRestricted({name:"NetworkOrderController",allowedEvents:["NetworkController:stateChange"]});this.networkOrderController=new Xe.NetworkOrderController({messenger:se,state:r.NetworkOrderController});const ae=this.controllerMessenger.getRestricted({name:"AccountOrderController"});this.accountOrderController=new Ze.AccountOrderController({messenger:ae,state:r.AccountOrderController});const ie=this.controllerMessenger.getRestricted({name:"RatesController"});this.multichainRatesController=new a.RatesController({state:r.MultichainRatesController,messenger:ie,includeUsdRate:!0,fetchMultiExchangeRate:a.fetchMultiExchangeRate}),this.controllerMessenger.subscribe("PreferencesController:stateChange",(0,pt.previousValueComparator)(((e,t)=>{const{useCurrencyRateCheck:n}=e,{useCurrencyRateCheck:r}=t;r&&!n?this.tokenRatesController.enable():!r&&n&&this.tokenRatesController.disable()}),this.preferencesController.state)),this.ensController=new A.EnsController({messenger:this.controllerMessenger.getRestricted({name:"EnsController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:[]}),onNetworkDidChange:i.subscribe.bind(i,"NetworkController:networkDidChange")});const ue=this.controllerMessenger.getRestricted({name:"OnboardingController",allowedActions:[],allowedEvents:[]});this.onboardingController=new at.default({messenger:ue,state:r.OnboardingController});let pe=[(0,p.keyringBuilderFactory)(k.MetaMaskKeyring)];const Ce=null===(t=this.opts.overrides)||void 0===t?void 0:t.keyrings;if(!1===Me.isManifestV3){const e=[(null==Ce?void 0:Ce.lattice)||w.default,k.MetaMaskKeyring],t=[{keyring:(null==Ce?void 0:Ce.trezor)||y.TrezorKeyring,bridge:(null==Ce?void 0:Ce.trezorBridge)||y.TrezorConnectBridge},{keyring:(null==Ce?void 0:Ce.oneKey)||y.OneKeyKeyring,bridge:(null==Ce?void 0:Ce.oneKeyBridge)||y.TrezorConnectBridge},{keyring:(null==Ce?void 0:Ce.ledger)||C.LedgerKeyring,bridge:(null==Ce?void 0:Ce.ledgerBridge)||C.LedgerIframeBridge}];pe=e.map((e=>(0,p.keyringBuilderFactory)(e))),t.forEach((e=>pe.push((0,mt.hardwareKeyringBuilderFactory)(e.keyring,e.bridge))))}else pe.push((0,mt.hardwareKeyringBuilderFactory)(y.TrezorKeyring,(null==Ce?void 0:Ce.trezorBridge)||kt.TrezorOffscreenBridge),(0,mt.hardwareKeyringBuilderFactory)(y.OneKeyKeyring,(null==Ce?void 0:Ce.oneKey)||kt.TrezorOffscreenBridge),(0,mt.hardwareKeyringBuilderFactory)(C.LedgerKeyring,(null==Ce?void 0:Ce.ledgerBridge)||St.LedgerOffscreenBridge),(0,p.keyringBuilderFactory)(At.LatticeKeyringOffscreen));const we=this.controllerMessenger.getRestricted({name:"SnapKeyring",allowedActions:["ApprovalController:addRequest","ApprovalController:acceptRequest","ApprovalController:rejectRequest","ApprovalController:startFlow","ApprovalController:endFlow","ApprovalController:showSuccess","ApprovalController:showError","PhishingController:test","PhishingController:maybeUpdateState","KeyringController:getAccounts","AccountsController:setSelectedAccount","AccountsController:getAccountByAddress","AccountsController:setAccountName","AccountsController:listMultichainAccounts","SnapController:handleRequest","SnapController:get","PreferencesController:getState"]}),ve=async()=>{await this.keyringController.persistAllKeyrings(),await this.accountsController.updateAccounts()};pe.push((0,Tt.snapKeyringBuilder)(we,{persistKeyringHelper:()=>ve(),removeAccountHelper:e=>this.removeAccount(e),trackEvent:(...e)=>this.metaMetricsController.trackEvent(...e)}));const ke=this.controllerMessenger.getRestricted({name:"KeyringController"});this.keyringController=new p.KeyringController({cacheEncryptionKey:!0,keyringBuilders:pe,state:r.KeyringController,encryptor:e.encryptor||(0,Mt.encryptorFactory)(6e5),messenger:ke}),this.controllerMessenger.subscribe("KeyringController:unlock",(()=>this._onUnlock())),this.controllerMessenger.subscribe("KeyringController:lock",(()=>this._onLock())),this.controllerMessenger.subscribe("KeyringController:stateChange",(e=>{this._onKeyringControllerUpdate(e)})),this.permissionController=new R.PermissionController({messenger:this.controllerMessenger.getRestricted({name:"PermissionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,"SnapController:getPermitted","SnapController:install","SubjectMetadataController:getSubjectMetadata"]}),state:r.PermissionController,caveatSpecifications:(0,bt.getCaveatSpecifications)({listAccounts:this.accountsController.listAccounts.bind(this.accountsController),findNetworkClientIdByChainId:this.networkController.findNetworkClientIdByChainId.bind(this.networkController),isNonEvmScopeSupported:this.controllerMessenger.call.bind(this.controllerMessenger,"MultichainRouter:isSupportedScope"),getNonEvmAccountAddresses:this.controllerMessenger.call.bind(this.controllerMessenger,"MultichainRouter:getSupportedAccounts")}),permissionSpecifications:{...(0,bt.getPermissionSpecifications)(),...this.getSnapPermissionSpecifications()},unrestrictedMethods:bt.unrestrictedMethods}),this.selectedNetworkController=new j.SelectedNetworkController({messenger:this.controllerMessenger.getRestricted({name:"SelectedNetworkController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getState","NetworkController:getSelectedNetworkClient","PermissionController:hasPermissions","PermissionController:getSubjectNames"],allowedEvents:["NetworkController:stateChange","PermissionController:stateChange"]}),state:r.SelectedNetworkController,useRequestQueuePreference:!0,onPreferencesStateChange:()=>{},domainProxyMap:new _t.WeakRefObjectMap}),this.permissionLogController=new D.PermissionLogController({messenger:this.controllerMessenger.getRestricted({name:"PermissionLogController"}),restrictedMethods:new Set(Object.keys(he.RestrictedMethods)),state:r.PermissionLogController}),this.subjectMetadataController=new R.SubjectMetadataController({messenger:this.controllerMessenger.getRestricted({name:"SubjectMetadataController",allowedActions:[`${this.permissionController.name}:hasPermissions`]}),state:r.SubjectMetadataController,subjectCacheLimit:100});const Se=this.controllerMessenger.getRestricted({name:"MultichainRouter",allowedActions:["SnapController:getAll","SnapController:handleRequest",`${this.permissionController.name}:getPermissions`,"AccountsController:listMultichainAccounts"],allowedEvents:[]});this.multichainRouter=new F.MultichainRouter({messenger:Se,withSnapKeyring:this.keyringController.withKeyring.bind(this.keyringController,{type:"Snap Keyring"})}),this.accountTrackerController=new Ve.default({state:{accounts:{}},messenger:this.controllerMessenger.getRestricted({name:"AccountTrackerController",allowedActions:["AccountsController:getSelectedAccount","NetworkController:getState","NetworkController:getNetworkClientById","OnboardingController:getState","PreferencesController:getState"],allowedEvents:["AccountsController:selectedEvmAccountChange","OnboardingController:stateChange","KeyringController:accountRemoved"]}),provider:this.provider,blockTracker:this.blockTracker,getNetworkIdentifier:e=>{const{type:t,rpcUrl:n}=e??(0,Ie.getProviderConfig)({metamask:this.networkController.state});return t===le.NETWORK_TYPES.RPC?n:t}}),this.on("controllerConnectionChanged",(e=>{const{completedOnboarding:t}=this.onboardingController.state;e>0&&t?this.triggerNetworkrequests():this.stopNetworkRequests()})),this.controllerMessenger.subscribe(`${this.onboardingController.name}:stateChange`,(0,pt.previousValueComparator)((async(e,t)=>{const{completedOnboarding:n}=e,{completedOnboarding:r}=t;if(!n&&r){const{address:e}=this.accountsController.getSelectedAccount();await this._addAccountsWithBalance(),this.postOnboardingInitialization(),this.triggerNetworkrequests(),await this.tokenDetectionController.detectTokens({selectedAddress:e})}}),this.onboardingController.state));const Te=this.controllerMessenger.getRestricted({name:"TokenDetectionController",allowedActions:["AccountsController:getAccount","AccountsController:getSelectedAccount","KeyringController:getState","NetworkController:getNetworkClientById","NetworkController:getNetworkConfigurationByNetworkClientId","NetworkController:getState","PreferencesController:getState","TokenListController:getState","TokensController:getState","TokensController:addDetectedTokens"],allowedEvents:["AccountsController:selectedEvmAccountChange","KeyringController:lock","KeyringController:unlock","NetworkController:networkDidChange","PreferencesController:stateChange","TokenListController:stateChange"]});this.tokenDetectionController=new a.TokenDetectionController({messenger:Te,getBalancesInSingleCall:(...e)=>this.assetsContractController.getBalancesInSingleCall(...e),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),useAccountsAPI:!0,platform:"extension"});const Ee=this.controllerMessenger.getRestricted({name:"AddressBookController",allowedActions:[],allowedEvents:[]});this.addressBookController=new M.AddressBookController({messenger:Ee,state:r.AddressBookController}),this.alertController=new st.AlertController({state:r.AlertController,messenger:this.controllerMessenger.getRestricted({name:"AlertController",allowedEvents:["AccountsController:selectedAccountChange"],allowedActions:["AccountsController:getSelectedAccount"]})}),this.backup=new ot.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,accountsController:this.accountsController,networkController:this.networkController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.snapAndHardwareMetricsParams={getSelectedAccount:this.accountsController.getSelectedAccount.bind(this.accountsController),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getHardwareTypeForMetric:this.getHardwareTypeForMetric.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]})},this._addBridgeStatusControllerListeners(),this.decryptMessageController=new it.default({getState:this.getState.bind(this),messenger:this.controllerMessenger.getRestricted({name:"DecryptMessageController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,`${this.keyringController.name}:decryptMessage`],allowedEvents:["DecryptMessageManager:stateChange","DecryptMessageManager:unapprovedMessage"]}),managerMessenger:this.controllerMessenger.getRestricted({name:"DecryptMessageManager"}),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.encryptionPublicKeyController=new ft.default({messenger:this.controllerMessenger.getRestricted({name:"EncryptionPublicKeyController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`],allowedEvents:["EncryptionPublicKeyManager:stateChange","EncryptionPublicKeyManager:unapprovedMessage"]}),managerMessenger:this.controllerMessenger.getRestricted({name:"EncryptionPublicKeyManager"}),getEncryptionPublicKey:this.keyringController.getEncryptionPublicKey.bind(this.keyringController),getAccountKeyringType:this.keyringController.getAccountKeyringType.bind(this.keyringController),getState:this.getState.bind(this),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.signatureController=new K.SignatureController({messenger:this.controllerMessenger.getRestricted({name:"SignatureController",allowedActions:[`${this.accountsController.name}:getState`,`${this.approvalController.name}:addRequest`,`${this.keyringController.name}:signMessage`,`${this.keyringController.name}:signPersonalMessage`,`${this.keyringController.name}:signTypedMessage`,`${this.loggingController.name}:add`,`${this.networkController.name}:getNetworkClientById`]}),trace:xe.trace,decodingApiUrl:"https://signature-insights.api.cx.metamask.io/v1",isDecodeSignatureRequestEnabled:()=>this.preferencesController.state.useTransactionSimulations}),this.signatureController.hub.on("cancelWithReason",(({metadata:e,reason:t})=>{this.metaMetricsController.trackEvent({event:t,category:be.MetaMetricsEventCategory.Transactions,properties:{action:"Sign Request",type:e.type}})}));const Ae=this.controllerMessenger.getRestricted({name:"SwapsController",allowedActions:["NetworkController:getState","NetworkController:getNetworkClientById","TokenRatesController:getState"],allowedEvents:[]});this.swapsController=new ct.default({messenger:Ae,getBufferedGasLimit:async(e,t)=>{const{gas:n,simulationFails:r}=await this.txController.estimateGasBuffered(e.txParams,t,an(un,this,yn).call(this));return{gasLimit:n,simulationFails:r}},getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getLayer1GasFee:(...e)=>this.txController.getLayer1GasFee(...e),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},r.SwapsController);const _e=this.controllerMessenger.getRestricted({name:J.BRIDGE_CONTROLLER_NAME,allowedActions:["AccountsController:getSelectedMultichainAccount","SnapController:handleRequest","NetworkController:getState","NetworkController:getNetworkClientById","NetworkController:findNetworkClientIdByChainId"],allowedEvents:[]});this.bridgeController=new J.BridgeController({messenger:_e,clientId:J.BridgeClientId.EXTENSION,getLayer1GasFee:(...e)=>this.txController.getLayer1GasFee(...e),fetchFn:async(e,{headers:t,signal:n,...r})=>await(0,Re.default)({url:e,fetchOptions:{method:"GET",headers:t,signal:n},...r}),config:{customBridgeApiBaseUrl:Oe.BRIDGE_API_BASE_URL}});const Ne=this.controllerMessenger.getRestricted({name:Lt.BRIDGE_STATUS_CONTROLLER_NAME,allowedActions:["AccountsController:getSelectedMultichainAccount","NetworkController:getNetworkClientById","NetworkController:findNetworkClientIdByChainId","NetworkController:getState","TransactionController:getState"],allowedEvents:[]});this.bridgeStatusController=new Ut.default({messenger:Ne,state:r.BridgeStatusController});const Be=this.controllerMessenger.getRestricted({name:"SmartTransactionsController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:["NetworkController:stateChange"]});this.smartTransactionsController=new B.default({supportedChainIds:(0,de.getAllowedSmartTransactionsChainIds)(),clientId:O.ClientId.Extension,getNonceLock:e=>this.txController.getNonceLock(e,an(un,this,yn).call(this)),confirmExternalTransaction:(...e)=>this.txController.confirmExternalTransaction(...e),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),state:r.SmartTransactionsController,messenger:Be,getTransactions:(...e)=>this.txController.getTransactions(...e),updateTransaction:(...e)=>this.txController.updateTransaction(...e),getFeatureFlags:()=>{const e=this._getMetaMaskState();return(0,Pe.getFeatureFlagsByChainId)(e)},getMetaMetricsProps:async()=>{const e=this.accountsController.getSelectedAccount().address;return{accountHardwareType:await this.getHardwareTypeForMetric(e),accountType:await this.getAccountType(e),deviceModel:await this.getDeviceModel(e)}}});const je=()=>this.preferencesController.state.useExternalNameSources;this.nameController=new G.NameController({messenger:this.controllerMessenger.getRestricted({name:"NameController",allowedActions:[]}),providers:[new G.ENSNameProvider({reverseLookup:this.ensController.reverseResolveAddress.bind(this.ensController)}),new G.EtherscanNameProvider({isEnabled:je}),new G.TokenNameProvider({isEnabled:je}),new G.LensNameProvider({isEnabled:je}),new Fe.SnapsNameProvider({messenger:this.controllerMessenger.getRestricted({name:"SnapsNameProvider",allowedActions:["SnapController:getAll","SnapController:get","SnapController:handleRequest","PermissionController:getState"]})})],state:r.NameController});const $e=this.controllerMessenger.getRestricted({name:"PetnamesBridge",allowedEvents:["NameController:stateChange","AccountsController:stateChange","AddressBookController:stateChange"],allowedActions:["AccountsController:listAccounts"]});new Ue.AddressBookPetnamesBridge({addressBookController:this.addressBookController,nameController:this.nameController,messenger:$e}).init(),new Le.AccountIdentitiesPetnamesBridge({nameController:this.nameController,messenger:$e}).init(),this.userOperationController=new W.UserOperationController({entrypoint:null,getGasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),messenger:this.controllerMessenger.getRestricted({name:"UserOperationController",allowedActions:["ApprovalController:addRequest","NetworkController:getNetworkClientById","KeyringController:prepareUserOperation","KeyringController:patchUserOperation","KeyringController:signUserOperation"]}),state:r.UserOperationController}),this.userOperationController.hub.on("user-operation-added",this._onUserOperationAdded.bind(this)),this.userOperationController.hub.on("transaction-updated",this._onUserOperationTransactionUpdated.bind(this)),i.subscribe("NetworkController:networkDidChange",(()=>{this.accountTrackerController.updateAccounts()})),i.subscribe("NetworkController:networkWillChange",o.bind(this)),this.controllerMessenger.subscribe("PreferencesController:stateChange",(0,pt.previousValueComparator)(((e,t)=>{const{useExternalServices:n}=e,{useExternalServices:r}=t;r&&!n?(this.remoteFeatureFlagController.enable(),this.remoteFeatureFlagController.updateRemoteFeatureFlags()):!r&&n&&this.remoteFeatureFlagController.disable()}),this.preferencesController.state)),this.remoteFeatureFlagController=new H.RemoteFeatureFlagController({messenger:this.controllerMessenger.getRestricted({name:"RemoteFeatureFlagController",allowedActions:[],allowedEvents:[]}),fetchInterval:9e5,disabled:!this.preferencesController.state.useExternalServices,getMetaMetricsId:()=>this.metaMetricsController.getMetaMetricsId(),clientConfigApiService:new H.ClientConfigApiService({fetch:globalThis.fetch.bind(globalThis),config:{client:H.ClientType.Extension,distribution:this._getConfigForRemoteFeatureFlagRequest().distribution,environment:this._getConfigForRemoteFeatureFlagRequest().environment}})});const De=[this.networkController,this.preferencesController,this.gasFeeController,this.onboardingController,this.keyringController,this.smartTransactionsController],qe={ExecutionService:Yt.ExecutionServiceInit,InstitutionalSnapController:Kt.InstitutionalSnapControllerInit,RateLimitController:Yt.RateLimitControllerInit,SnapsRegistry:Yt.SnapsRegistryInit,SnapController:Yt.SnapControllerInit,SnapInsightsController:Yt.SnapInsightsControllerInit,SnapInterfaceController:Yt.SnapInterfaceControllerInit,CronjobController:Yt.CronjobControllerInit,PPOMController:Wt.PPOMControllerInit,TransactionController:zt.TransactionControllerInit,NftController:Gt.NftControllerInit,AssetsContractController:Gt.AssetsContractControllerInit,NftDetectionController:Gt.NftDetectionControllerInit,TokenRatesController:Gt.TokenRatesControllerInit,MultichainNetworkController:Vt.MultichainNetworkControllerInit,AuthenticationController:Qt.AuthenticationControllerInit,UserStorageController:Xt.UserStorageControllerInit,NotificationServicesController:en.NotificationServicesControllerInit,NotificationServicesPushController:tn.NotificationServicesPushControllerInit},{controllerApi:Ge,controllerMemState:ze,controllerPersistedState:We,controllersByName:Je}=an(un,this,Cn).call(this,{existingControllers:De,initFunctions:qe,initState:r});this.controllerApi=Ge,this.controllerMemState=ze,this.controllerPersistedState=We,this.controllersByName=Je,this.cronjobController=Je.CronjobController,this.rateLimitController=Je.RateLimitController,this.snapController=Je.SnapController,this.snapInsightsController=Je.SnapInsightsController,this.snapInterfaceController=Je.SnapInterfaceController,this.snapsRegistry=Je.SnapsRegistry,this.ppomController=Je.PPOMController,this.txController=Je.TransactionController,this.nftController=Je.NftController,this.nftDetectionController=Je.NftDetectionController,this.assetsContractController=Je.AssetsContractController,this.tokenRatesController=Je.TokenRatesController,this.multichainNetworkController=Je.MultichainNetworkController,this.authenticationController=Je.AuthenticationController,this.userStorageController=Je.UserStorageController,this.notificationServicesController=Je.NotificationServicesController,this.notificationServicesPushController=Je.NotificationServicesPushController,this.notificationServicesController.init(),this.controllerMessenger.subscribe("TransactionController:transactionStatusUpdated",(({transactionMeta:e})=>{this._onFinishedTransaction(e)})),this.controllerMessenger.subscribe("NotificationServicesPushController:onNewNotifications",(e=>{this.metaMetricsController.trackEvent({category:be.MetaMetricsEventCategory.PushNotifications,event:be.MetaMetricsEventName.PushNotificationReceived,properties:{notification_id:e.id,notification_type:e.type,chain_id:null==e?void 0:e.chain_id}})})),this.controllerMessenger.subscribe("NotificationServicesPushController:pushNotificationClicked",(e=>{this.metaMetricsController.trackEvent({category:be.MetaMetricsEventCategory.PushNotifications,event:be.MetaMetricsEventName.PushNotificationClicked,properties:{notification_id:e.id,notification_type:e.type,chain_id:null==e?void 0:e.chain_id}})})),this.metamaskMiddleware=(0,ht.default)({static:{eth_syncing:!1,web3_clientVersion:`MetaMask/v${s}`},version:s,getAccounts:({origin:e})=>{if(e===ge.ORIGIN_METAMASK){const e=this.accountsController.getSelectedAccount().address;return e?[e]:[]}return this.isUnlocked()?this.getPermittedAccounts(e):[]},processTransaction:(e,t)=>(0,Et.addDappTransaction)(this.getAddTransactionRequest({transactionParams:e,dappRequest:t})),processTypedMessage:(...e)=>(0,Pt.addTypedMessage)({signatureController:this.signatureController,signatureParams:e}),processTypedMessageV3:(...e)=>(0,Pt.addTypedMessage)({signatureController:this.signatureController,signatureParams:e}),processTypedMessageV4:(...e)=>(0,Pt.addTypedMessage)({signatureController:this.signatureController,signatureParams:e}),processPersonalMessage:(...e)=>(0,Pt.addPersonalMessage)({signatureController:this.signatureController,signatureParams:e}),processEncryptionPublicKey:this.encryptionPublicKeyController.newRequestEncryptionPublicKey.bind(this.encryptionPublicKeyController),processDecryptMessage:this.decryptMessageController.newRequestDecryptMessage.bind(this.decryptMessageController),getPendingNonce:this.getPendingNonce.bind(this),getPendingTransactionByHash:e=>this.txController.state.transactions.find((t=>t.hash===e&&t.status===Y.TransactionStatus.submitted)),processSendCalls:Zt.processSendCalls.bind(null,{addTransactionBatch:this.txController.addTransactionBatch.bind(this.txController),getDisabledUpgradeAccountsByChain:this.preferencesController.getDisabledUpgradeAccountsByChain.bind(this.preferencesController),validateSecurity:(e,t,n)=>(0,Nt.validateRequestWithPPOM)({chainId:n,ppomController:this.ppomController,request:t,securityAlertId:e,updateSecurityAlertResponse:this.updateSecurityAlertResponse.bind(this)}),getDismissSmartAccountSuggestionEnabled:()=>this.preferencesController.state.preferences.dismissSmartAccountSuggestionEnabled},this.controllerMessenger),getCallsStatus:Zt.getCallsStatus.bind(null,this.controllerMessenger),getCapabilities:Zt.getCapabilities}),this.on("update",(e=>this._onStateUpdate(e)));const Ye={AccountTracker:this.accountTrackerController,TokenRatesController:this.tokenRatesController,DecryptMessageController:this.decryptMessageController,EncryptionPublicKeyController:this.encryptionPublicKeyController,SignatureController:this.signatureController,SwapsController:this.swapsController,BridgeController:this.bridgeController,BridgeStatusController:this.bridgeStatusController,EnsController:this.ensController,ApprovalController:this.approvalController};this.store.updateStructure({AccountsController:this.accountsController,AppStateController:this.appStateController,AppMetadataController:this.appMetadataController,KeyringController:this.keyringController,PreferencesController:this.preferencesController,MetaMetricsController:this.metaMetricsController,MetaMetricsDataDeletionController:this.metaMetricsDataDeletionController,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,MultichainNetworkController:this.multichainNetworkController,NetworkController:this.networkController,AlertController:this.alertController,OnboardingController:this.onboardingController,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,TokenBalancesController:this.tokenBalancesController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,PhishingController:this.phishingController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,MultichainRatesController:this.multichainRatesController,NameController:this.nameController,UserOperationController:this.userOperationController,AuthenticationController:this.authenticationController,UserStorageController:this.userStorageController,NotificationServicesController:this.notificationServicesController,NotificationServicesPushController:this.notificationServicesPushController,RemoteFeatureFlagController:this.remoteFeatureFlagController,...Ye,...We}),this.memStore=new Ke.default({config:{AccountsController:this.accountsController,AppStateController:this.appStateController,AppMetadataController:this.appMetadataController,TokenRatesController:this.tokenRatesController,MultichainNetworkController:this.multichainNetworkController,NetworkController:this.networkController,KeyringController:this.keyringController,PreferencesController:this.preferencesController,MetaMetricsController:this.metaMetricsController,MetaMetricsDataDeletionController:this.metaMetricsDataDeletionController,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,AlertController:this.alertController,OnboardingController:this.onboardingController,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,TokenBalancesController:this.tokenBalancesController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,MultichainRatesController:this.multichainRatesController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,SnapInterfaceController:this.snapInterfaceController,SnapInsightsController:this.snapInsightsController,NameController:this.nameController,UserOperationController:this.userOperationController,AuthenticationController:this.authenticationController,UserStorageController:this.userStorageController,NotificationServicesController:this.notificationServicesController,QueuedRequestController:this.queuedRequestController,NotificationServicesPushController:this.notificationServicesPushController,RemoteFeatureFlagController:this.remoteFeatureFlagController,...Ye,...ze},controllerMessenger:this.controllerMessenger});const Qe=[this.accountTrackerController.resetState.bind(this.accountTrackerController),this.decryptMessageController.resetState.bind(this.decryptMessageController),this.encryptionPublicKeyController.resetState.bind(this.encryptionPublicKeyController),this.signatureController.resetState.bind(this.signatureController),this.swapsController.resetState.bind(this.swapsController),this.bridgeController.resetState.bind(this.bridgeController),this.ensController.resetState.bind(this.ensController),this.approvalController.clear.bind(this.approvalController)];Me.isManifestV3?!0===n&&(this.resetStates(Qe),this.extension.storage.session.set({isFirstMetaMaskControllerSetup:!1})):this.resetStates(Qe);!this.isUnlocked()&&this.onboardingController.state.completedOnboarding,this._startUISync(),this.extension.runtime.getPlatformInfo().then((({os:e})=>{this.appStateController.setBrowserEnvironment(e,this.extension.runtime.getBrowserInfo===undefined?"chrome":"firefox")})),this.setupControllerEventSubscriptions(),this.setupMultichainDataAndSubscriptions(),this.publicConfigStore=this.createPublicConfigStore(),this.extension.runtime.onMessageExternal.addListener(He.onMessageReceived),(0,He.checkForMultipleVersionsRunning)(),this.onboardingController.state.completedOnboarding&&this.postOnboardingInitialization()}getInfuraFeatureFlags(){(0,Re.default)({url:"https://swap.api.cx.metamask.io/featureFlags",cacheRefreshTime:20*fe.MINUTE}).then(this.onFeatureFlagResponseReceived).catch((e=>{b.default.warn("Feature flag endpoint is unreachable",e)}))}onFeatureFlagResponseReceived(e){const{multiChainAssets:t={}}=e,{pollInterval:n}=t;n>0&&this.tokenBalancesController.setIntervalLength(n*fe.SECOND)}postOnboardingInitialization(){const{usePhishDetect:e}=this.preferencesController.state;this.networkController.lookupNetwork(),e&&this.phishingController.maybeUpdateState()}triggerNetworkrequests(){an(un,this,bn).call(this),this.tokenDetectionController.enable(),this.getInfuraFeatureFlags()}stopNetworkRequests(){this.txController.stopIncomingTransactionPolling(),this.tokenDetectionController.disable()}resetStates(e){e.forEach((e=>{try{e()}catch(e){console.error(e)}}))}async getSnapKeyring(){let[e]=this.keyringController.getKeyringsByType(pe.KeyringType.snap);return e||(await this.keyringController.addNewKeyring(pe.KeyringType.snap),[e]=this.keyringController.getKeyringsByType(pe.KeyringType.snap)),e}trackInsightSnapView(e){this.metaMetricsController.trackEvent({event:be.MetaMetricsEventName.InsightSnapViewed,category:be.MetaMetricsEventCategory.Snaps,properties:{snap_id:e}})}_getSnapMetadata(e){var t;return null===(t=this.snapsRegistry.state.database)||void 0===t||null===(t=t.verifiedSnaps)||void 0===t||null===(t=t[e])||void 0===t?void 0:t.metadata}async handleSnapRequest(e){try{const t=await this.controllerMessenger.call("SnapController:handleRequest",e);return this._trackSnapExportUsage(e.snapId,e.handler,!0,e.origin),t}catch(t){throw this._trackSnapExportUsage(e.snapId,e.handler,!1,e.origin),t}}getLocale(){const{currentLocale:e}=this.preferencesController.state;return e}getPreferences(){const{preferences:e,securityAlertsEnabled:t,useCurrencyRateCheck:n,useTransactionSimulations:r,useTokenDetection:s,useMultiAccountBalanceChecker:a,openSeaEnabled:o,useNftDetection:i}=this.preferencesController.state;return{privacyMode:e.privacyMode,securityAlertsEnabled:t,useCurrencyRateCheck:n,useTransactionSimulations:r,useTokenDetection:s,useMultiAccountBalanceChecker:a,openSeaEnabled:o,useNftDetection:i}}getSnapPermissionSpecifications(){return{...(0,U.buildSnapEndowmentSpecifications)(Object.keys(he.ExcludedSnapEndowments)),...(0,U.buildSnapRestrictedMethodSpecifications)(Object.keys(he.ExcludedSnapPermissions),{getPreferences:()=>{const e=this.getLocale(),t=this.currencyRateController.state.currentCurrency,{privacyMode:n,securityAlertsEnabled:r,useCurrencyRateCheck:s,useTransactionSimulations:a,useTokenDetection:o,useMultiAccountBalanceChecker:i,openSeaEnabled:c,useNftDetection:l}=this.getPreferences();return{locale:e,currency:t,hideBalances:n,useSecurityAlerts:r,useExternalPricingData:s,simulateOnChainActions:a,useTokenDetection:o,batchCheckBalances:i,displayNftMedia:c,useNftDetection:l}},clearSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:clearSnapState"),getMnemonic:async e=>{if(!e)return this.getPrimaryKeyringMnemonic();try{const{type:t,mnemonic:n}=await this.controllerMessenger.call("KeyringController:withKeyring",{id:e},(async({keyring:e})=>({type:e.type,mnemonic:e.mnemonic})));if(t!==p.KeyringTypes.hd||!n)throw new Error(`Entropy source with ID "${e}" not found.`);return n}catch{throw new Error(`Entropy source with ID "${e}" not found.`)}},getMnemonicSeed:async e=>{if(!e)return this.getPrimaryKeyringMnemonicSeed();try{const{type:t,seed:n}=await this.controllerMessenger.call("KeyringController:withKeyring",{id:e},(async({keyring:e})=>({type:e.type,seed:e.seed})));if(t!==p.KeyringTypes.hd||!n)throw new Error(`Entropy source with ID "${e}" not found.`);return n}catch{throw new Error(`Entropy source with ID "${e}" not found.`)}},getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),handleSnapRpcRequest:this.handleSnapRequest.bind(this),getSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getSnapState"),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),showNativeNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showNativeNotification",e,t.message),showInAppNotification:(e,t)=>{const{message:n,title:r,footerLink:s}=t,a={interfaceId:t.content,message:n,title:r,footerLink:s};return this.controllerMessenger.call("RateLimitController:call",e,"showInAppNotification",e,a)},updateSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:updateSnapState"),maybeUpdatePhishingList:()=>{const{usePhishDetect:e}=this.preferencesController.state;e&&this.controllerMessenger.call("PhishingController:maybeUpdateState")},isOnPhishingList:e=>{const{usePhishDetect:t}=this.preferencesController.state;return!!t&&this.controllerMessenger.call("PhishingController:testOrigin",e).result},createInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:createInterface"),getInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:getInterface"),getClientCryptography:()=>({}),getSnapKeyring:this.getSnapKeyring.bind(this)})}}setupControllerEventSubscriptions(){let e;this.controllerMessenger.subscribe("PreferencesController:stateChange",(0,pt.previousValueComparator)((async(e,t)=>{const{currentLocale:n}=t;an(un,this,bn).call(this),await(0,vt.updateCurrentLocale)(n),an(un,this,mn).call(this,t,e)}),this.preferencesController.state)),this.controllerMessenger.subscribe(`${this.accountsController.name}:selectedAccountChange`,(async t=>{t.address&&t.address!==e&&(e=t.address,await this._onAccountChange(t.address))})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{const n=(0,bt.diffMap)(e,t);for(const[e,t]of n.entries())this._notifyAccountsChange(e,t)}),bt.getPermittedAccountsByOrigin),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{const n=(0,bt.diffMap)(e,t);for(const[e,t]of n.entries()){const n=this.selectedNetworkController.getNetworkClientIdForDomain(e),r=this.networkController.getNetworkConfigurationByNetworkClientId(n);if(!r){b.default.warn(`No network configuration found for clientId: ${n}`);continue}const{chainId:s}=r;if(t.length>0&&!t.includes(s)){const n=this.networkController.findNetworkClientIdByChainId(t[0]);this.networkController.setActiveNetwork(n),this.selectedNetworkController.setNetworkClientIdForDomain(e,n)}}}),bt.getPermittedChainsByOrigin),this.controllerMessenger.subscribe("NetworkController:networkRemoved",(({chainId:e})=>{const t=(0,te.toCaipChainId)("eip155",(0,te.hexToBigInt)(e).toString(10));this.removeAllScopePermissions(t)})),this.controllerMessenger.subscribe("NetworkController:networkDidChange",(async()=>{!0===this.preferencesController.state.useExternalServices&&(this.txController.stopIncomingTransactionPolling(),await this.txController.updateIncomingTransactions(),this.txController.startIncomingTransactionPolling())})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstallStarted`,((e,t,n)=>{var r;const s=null===(r=this._getSnapMetadata(e))||void 0===r?void 0:r.category;this.metaMetricsController.trackEvent({event:n?be.MetaMetricsEventName.SnapUpdateStarted:be.MetaMetricsEventName.SnapInstallStarted,category:be.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,origin:t,snap_category:s}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstallFailed`,((e,t,n,r)=>{var s;const a=r.includes("User rejected the request."),o=n?be.MetaMetricsEventName.SnapUpdateFailed:be.MetaMetricsEventName.SnapInstallFailed,i=n?be.MetaMetricsEventName.SnapUpdateRejected:be.MetaMetricsEventName.SnapInstallRejected,c=null===(s=this._getSnapMetadata(e))||void 0===s?void 0:s.category;this.metaMetricsController.trackEvent({event:a?i:o,category:be.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,origin:t,snap_category:c}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstalled`,((e,t,n)=>{var r;if(n)return;const s=e.id,a=null===(r=this._getSnapMetadata(s))||void 0===r?void 0:r.category;this.metaMetricsController.trackEvent({event:be.MetaMetricsEventName.SnapInstalled,category:be.MetaMetricsEventCategory.Snaps,properties:{snap_id:s,version:e.version,origin:t,snap_category:a}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUpdated`,((e,t,n,r)=>{var s;if(r)return;const a=e.id,o=null===(s=this._getSnapMetadata(a))||void 0===s?void 0:s.category;this.metaMetricsController.trackEvent({event:be.MetaMetricsEventName.SnapUpdated,category:be.MetaMetricsEventCategory.Snaps,properties:{snap_id:a,old_version:t,new_version:e.version,origin:n,snap_category:o}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapTerminated`,(e=>{const t=Object.values(this.approvalController.state.pendingApprovals).filter((t=>t.origin===e.id&&t.type.startsWith(he.RestrictedMethods.snap_dialog)));for(const e of t)this.approvalController.reject(e.id,new Error("Snap was terminated."))})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUninstalled`,(e=>{var t;const n=this.notificationServicesController.getNotificationsByType(re.TRIGGER_TYPES.SNAP).filter((t=>t.data.origin===e.id)).map((e=>e.id));this.notificationServicesController.deleteNotificationsById(n);const r=e.id,s=null===(t=this._getSnapMetadata(r))||void 0===t?void 0:t.category;this.metaMetricsController.trackEvent({event:be.MetaMetricsEventName.SnapUninstalled,category:be.MetaMetricsEventCategory.Snaps,properties:{snap_id:r,version:e.version,snap_category:s}})}))}setupMultichainDataAndSubscriptions(){(0,ee.isEvmAccountType)(this.accountsController.getSelectedMultichainAccount().type)||this.multichainRatesController.start(),this.controllerMessenger.subscribe("AccountsController:selectedAccountChange",(e=>{(0,ee.isEvmAccountType)(e.type)?this.multichainRatesController.stop():this.multichainRatesController.start()})),this.controllerMessenger.subscribe("CurrencyRateController:stateChange",(({currentCurrency:e})=>{e!==this.multichainRatesController.state.fiatCurrency&&this.multichainRatesController.setFiatCurrency(e)})),this.controllerMessenger.subscribe("MultichainTransactionsController:transactionConfirmed",(e=>{this.metaMetricsController.trackEvent({event:be.MetaMetricsEventName.TransactionFinalized,category:be.MetaMetricsEventCategory.Transactions,properties:{id:e.id,timestamp:e.timestamp,chain_id_caip:e.chain,status:e.status,type:e.type,fees:e.fees}})})),this.controllerMessenger.subscribe("MultichainTransactionsController:transactionSubmitted",(e=>{this.metaMetricsController.trackEvent({event:be.MetaMetricsEventName.TransactionSubmitted,category:be.MetaMetricsEventCategory.Transactions,properties:{id:e.id,timestamp:e.timestamp,chain_id_caip:e.chain,status:e.status,type:e.type,fees:e.fees}})}))}addMultichainApiEthSubscriptionMiddleware({scope:e,origin:t,tabId:n}){const r=this.multichainSubscriptionManager.subscribe({scope:e,origin:t,tabId:n});this.multichainMiddlewareManager.addMiddleware({scope:e,origin:t,tabId:n,middleware:r.middleware})}removeMultichainApiEthSubscriptionMiddleware({scope:e,origin:t}){this.multichainMiddlewareManager.removeMiddlewareByScopeAndOrigin(e,t),this.multichainSubscriptionManager.unsubscribeByScopeAndOrigin(e,t)}createPublicConfigStore(){const e=new c.ObservableStore,t=async({isUnlocked:e})=>{const{chainId:t,networkVersion:n,isConnected:r}=await this.getProviderNetworkState();return{isUnlocked:e,chainId:t,networkVersion:r?n:"loading"}},n=async n=>{var r;(null===(r=n.networksMetadata[n.selectedNetworkClientId])||void 0===r?void 0:r.status)===le.NetworkStatus.Available&&e.putState(await t(n))};return this.on("update",n),n(this.getState()),e}async getProviderState(e){const t=await this.getProviderNetworkState(e),n={};return{isUnlocked:!0,accounts:this.getPermittedAccounts(e),...n,...t}}async getProviderNetworkState(e=j.METAMASK_DOMAIN){const t=this.controllerMessenger.call("SelectedNetworkController:getNetworkClientIdForDomain",e),n=this.controllerMessenger.call("NetworkController:getNetworkClientById",t),{chainId:r}=n.configuration,{completedOnboarding:s}=this.onboardingController.state;let a=this.deprecatedNetworkVersions[t];if(a===undefined&&s){try{const e=await n.provider.request({method:"net_version"});a=(0,Ee.convertNetworkId)(e)}catch(e){console.error(e),a=null}this.deprecatedNetworkVersions[t]=a}const o=this.networkController.state.networksMetadata[t];return{chainId:r,networkVersion:a??"loading",isConnected:(null==o?void 0:o.status)===le.NetworkStatus.Available}}getState(){const{vault:e}=this.keyringController.state,t=Boolean(e),n=this.memStore.getFlatState();return{isInitialized:t,...(0,Ft.sanitizeUIState)(n)}}getApi(){const{accountsController:e,addressBookController:t,alertController:n,appStateController:r,keyringController:s,nftController:a,nftDetectionController:o,currencyRateController:i,tokenBalancesController:c,tokenDetectionController:l,ensController:d,tokenListController:u,gasFeeController:p,metaMetricsController:h,networkController:m,multichainNetworkController:f,announcementController:g,onboardingController:b,permissionController:y,preferencesController:C,tokensController:w,smartTransactionsController:v,txController:k,backup:S,approvalController:T,phishingController:M,tokenRatesController:E,accountTrackerController:P,authenticationController:A,userStorageController:_,notificationServicesController:I,notificationServicesPushController:x}=this;return{getState:this.getState.bind(this),setCurrentCurrency:i.setCurrentCurrency.bind(i),setUseBlockie:C.setUseBlockie.bind(C),setUsePhishDetect:C.setUsePhishDetect.bind(C),setUseMultiAccountBalanceChecker:C.setUseMultiAccountBalanceChecker.bind(C),setUseSafeChainsListValidation:C.setUseSafeChainsListValidation.bind(C),setUseTokenDetection:C.setUseTokenDetection.bind(C),setUseNftDetection:C.setUseNftDetection.bind(C),setUse4ByteResolution:C.setUse4ByteResolution.bind(C),setUseCurrencyRateCheck:C.setUseCurrencyRateCheck.bind(C),setOpenSeaEnabled:C.setOpenSeaEnabled.bind(C),getProviderConfig:()=>(0,Ie.getProviderConfig)({metamask:this.networkController.state}),grantPermissionsIncremental:this.permissionController.grantPermissionsIncremental.bind(this.permissionController),grantPermissions:this.permissionController.grantPermissions.bind(this.permissionController),setSecurityAlertsEnabled:C.setSecurityAlertsEnabled.bind(C),setAddSnapAccountEnabled:C.setAddSnapAccountEnabled.bind(C),setUseExternalNameSources:C.setUseExternalNameSources.bind(C),setUseTransactionSimulations:C.setUseTransactionSimulations.bind(C),setIpfsGateway:C.setIpfsGateway.bind(C),setIsIpfsGatewayEnabled:C.setIsIpfsGatewayEnabled.bind(C),setUseAddressBarEnsResolution:C.setUseAddressBarEnsResolution.bind(C),setParticipateInMetaMetrics:h.setParticipateInMetaMetrics.bind(h),setDataCollectionForMarketing:h.setDataCollectionForMarketing.bind(h),setMarketingCampaignCookieId:h.setMarketingCampaignCookieId.bind(h),setCurrentLocale:C.setCurrentLocale.bind(C),setServiceWorkerKeepAlivePreference:C.setServiceWorkerKeepAlivePreference.bind(C),markPasswordForgotten:this.markPasswordForgotten.bind(this),unMarkPasswordForgotten:this.unMarkPasswordForgotten.bind(this),getRequestAccountTabIds:this.getRequestAccountTabIds,getOpenMetamaskTabsIds:this.getOpenMetamaskTabsIds,markNotificationPopupAsAutomaticallyClosed:()=>this.notificationManager.markAsAutomaticallyClosed(),getCode:this.getCode.bind(this),addNewAccount:this.addNewAccount.bind(this),getSeedPhrase:this.getSeedPhrase.bind(this),resetAccount:this.resetAccount.bind(this),removeAccount:this.removeAccount.bind(this),importAccountWithStrategy:this.importAccountWithStrategy.bind(this),getNextAvailableAccountName:e.getNextAvailableAccountName.bind(e),getAccountsBySnapId:e=>(0,Tt.getAccountsBySnapId)(this.getSnapKeyring.bind(this),e),connectHardware:this.connectHardware.bind(this),forgetDevice:this.forgetDevice.bind(this),checkHardwareStatus:this.checkHardwareStatus.bind(this),unlockHardwareWalletAccount:this.unlockHardwareWalletAccount.bind(this),attemptLedgerTransportCreation:this.attemptLedgerTransportCreation.bind(this),submitQRHardwareCryptoHDKey:s.submitQRCryptoHDKey.bind(s),submitQRHardwareCryptoAccount:s.submitQRCryptoAccount.bind(s),cancelSyncQRHardware:s.cancelQRSynchronization.bind(s),submitQRHardwareSignature:s.submitQRSignature.bind(s),cancelQRHardwareSignRequest:s.cancelQRSignRequest.bind(s),submitPassword:this.submitPassword.bind(this),verifyPassword:this.verifyPassword.bind(this),setActiveNetwork:async e=>await this.multichainNetworkController.setActiveNetwork(e),setActiveNetworkConfigurationId:e=>{this.networkController.setActiveNetwork(e)},setNetworkClientIdForDomain:(e,t)=>this.selectedNetworkController.setNetworkClientIdForDomain(e,t),rollbackToPreviousProvider:m.rollbackToPreviousProvider.bind(m),addNetwork:this.networkController.addNetwork.bind(this.networkController),updateNetwork:this.networkController.updateNetwork.bind(this.networkController),removeNetwork:this.networkController.removeNetwork.bind(this.networkController),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getNetworkConfigurationByNetworkClientId:this.networkController.getNetworkConfigurationByNetworkClientId.bind(this.networkController),setSelectedAddress:e=>{const t=this.accountsController.getAccountByAddress(e);if(!t)throw new Error(`No account found for address: ${e}`);this.accountsController.setSelectedAccount(t.id)},toggleExternalServices:this.toggleExternalServices.bind(this),addToken:w.addToken.bind(w),updateTokenType:w.updateTokenType.bind(w),setFeatureFlag:C.setFeatureFlag.bind(C),setPreference:C.setPreference.bind(C),addKnownMethodData:C.addKnownMethodData.bind(C),setDismissSeedBackUpReminder:C.setDismissSeedBackUpReminder.bind(C),setOverrideContentSecurityPolicyHeader:C.setOverrideContentSecurityPolicyHeader.bind(C),setAdvancedGasFee:C.setAdvancedGasFee.bind(C),setTheme:C.setTheme.bind(C),disableAccountUpgrade:C.disableAccountUpgrade.bind(C),setSnapsAddSnapAccountModalDismissed:C.setSnapsAddSnapAccountModalDismissed.bind(C),setManageInstitutionalWallets:C.setManageInstitutionalWallets.bind(C),setSelectedInternalAccount:e=>{this.accountsController.getAccount(e)&&this.accountsController.setSelectedAccount(e)},setAccountName:e.setAccountName.bind(e),setAccountLabel:(e,t)=>{const n=this.accountsController.getAccountByAddress(e);if(n===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setAccountName(n.id,t)},getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTokenSymbol:this.getTokenSymbol.bind(this),getTokenStandardAndDetailsByChain:this.getTokenStandardAndDetailsByChain.bind(this),addNft:a.addNft.bind(a),addNftVerifyOwnership:a.addNftVerifyOwnership.bind(a),removeAndIgnoreNft:a.removeAndIgnoreNft.bind(a),removeNft:a.removeNft.bind(a),checkAndUpdateAllNftsOwnershipStatus:a.checkAndUpdateAllNftsOwnershipStatus.bind(a),checkAndUpdateSingleNftOwnershipStatus:a.checkAndUpdateSingleNftOwnershipStatus.bind(a),getNFTContractInfo:a.getNFTContractInfo.bind(a),isNftOwner:a.isNftOwner.bind(a),setAddressBook:t.set.bind(t),removeFromAddressBook:t.delete.bind(t),setLastActiveTime:r.setLastActiveTime.bind(r),setCurrentExtensionPopupId:r.setCurrentExtensionPopupId.bind(r),setDefaultHomeActiveTabName:r.setDefaultHomeActiveTabName.bind(r),setConnectedStatusPopoverHasBeenShown:r.setConnectedStatusPopoverHasBeenShown.bind(r),setRecoveryPhraseReminderHasBeenShown:r.setRecoveryPhraseReminderHasBeenShown.bind(r),setRecoveryPhraseReminderLastShown:r.setRecoveryPhraseReminderLastShown.bind(r),setTermsOfUseLastAgreed:r.setTermsOfUseLastAgreed.bind(r),setSurveyLinkLastClickedOrClosed:r.setSurveyLinkLastClickedOrClosed.bind(r),setOnboardingDate:r.setOnboardingDate.bind(r),setLastViewedUserSurvey:r.setLastViewedUserSurvey.bind(r),setRampCardClosed:r.setRampCardClosed.bind(r),setNewPrivacyPolicyToastClickedOrClosed:r.setNewPrivacyPolicyToastClickedOrClosed.bind(r),setNewPrivacyPolicyToastShownDate:r.setNewPrivacyPolicyToastShownDate.bind(r),setSnapsInstallPrivacyWarningShownStatus:r.setSnapsInstallPrivacyWarningShownStatus.bind(r),setOutdatedBrowserWarningLastShown:r.setOutdatedBrowserWarningLastShown.bind(r),setShowTestnetMessageInDropdown:r.setShowTestnetMessageInDropdown.bind(r),setShowBetaHeader:r.setShowBetaHeader.bind(r),setShowPermissionsTour:r.setShowPermissionsTour.bind(r),setShowAccountBanner:r.setShowAccountBanner.bind(r),setShowNetworkBanner:r.setShowNetworkBanner.bind(r),updateNftDropDownState:r.updateNftDropDownState.bind(r),setSwitchedNetworkDetails:r.setSwitchedNetworkDetails.bind(r),clearSwitchedNetworkDetails:r.clearSwitchedNetworkDetails.bind(r),setSwitchedNetworkNeverShowMessage:r.setSwitchedNetworkNeverShowMessage.bind(r),getLastInteractedConfirmationInfo:r.getLastInteractedConfirmationInfo.bind(r),setLastInteractedConfirmationInfo:r.setLastInteractedConfirmationInfo.bind(r),updateSlides:r.updateSlides.bind(r),removeSlide:r.removeSlide.bind(r),tryReverseResolveAddress:d.reverseResolveAddress.bind(d),setLocked:this.setLocked.bind(this),createNewVaultAndKeychain:this.createNewVaultAndKeychain.bind(this),createNewVaultAndRestore:this.createNewVaultAndRestore.bind(this),generateNewMnemonicAndAddToVault:this.generateNewMnemonicAndAddToVault.bind(this),importMnemonicToVault:this.importMnemonicToVault.bind(this),exportAccount:this.exportAccount.bind(this),updateTransaction:k.updateTransaction.bind(k),approveTransactionsWithSameNonce:k.approveTransactionsWithSameNonce.bind(k),createCancelTransaction:this.createCancelTransaction.bind(this),createSpeedUpTransaction:this.createSpeedUpTransaction.bind(this),estimateGas:this.estimateGas.bind(this),estimateGasFee:k.estimateGasFee.bind(k),getNextNonce:this.getNextNonce.bind(this),addTransaction:(e,t)=>(0,Et.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!1})),addTransactionAndWaitForPublish:(e,t)=>(0,Et.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!0})),createTransactionEventFragment:$e.createTransactionEventFragmentWithTxId.bind(null,this.getTransactionMetricsRequest()),setTransactionActive:k.setTransactionActive.bind(k),decryptMessage:this.decryptMessageController.decryptMessage.bind(this.decryptMessageController),decryptMessageInline:this.decryptMessageController.decryptMessageInline.bind(this.decryptMessageController),cancelDecryptMessage:this.decryptMessageController.cancelDecryptMessage.bind(this.decryptMessageController),encryptionPublicKey:this.encryptionPublicKeyController.encryptionPublicKey.bind(this.encryptionPublicKeyController),cancelEncryptionPublicKey:this.encryptionPublicKeyController.cancelEncryptionPublicKey.bind(this.encryptionPublicKeyController),setSeedPhraseBackedUp:b.setSeedPhraseBackedUp.bind(b),completeOnboarding:b.completeOnboarding.bind(b),setFirstTimeFlowType:b.setFirstTimeFlowType.bind(b),setAlertEnabledness:n.setAlertEnabledness.bind(n),setUnconnectedAccountAlertShown:n.setUnconnectedAccountAlertShown.bind(n),setWeb3ShimUsageAlertDismissed:n.setWeb3ShimUsageAlertDismissed.bind(n),removePermissionsFor:this.removePermissionsFor,approvePermissionsRequest:this.acceptPermissionsRequest,rejectPermissionsRequest:this.rejectPermissionsRequest,...(0,bt.getPermissionBackgroundApiMethods)({permissionController:y,approvalController:T,accountsController:e,networkController:m,multichainNetworkController:f}),disableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disable"),enableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:enable"),updateSnap:(e,t)=>(this.controllerMessenger.call("SnapController:install",e,t),null),removeSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:remove"),handleSnapRequest:this.handleSnapRequest.bind(this),revokeDynamicSnapPermissions:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:revokeDynamicPermissions"),disconnectOriginFromSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disconnectOrigin"),updateNetworksList:this.updateNetworksList.bind(this),updateAccountsList:this.updateAccountsList.bind(this),updateHiddenAccountsList:this.updateHiddenAccountsList.bind(this),getPhishingResult:async e=>(await M.maybeUpdateState(),M.test(e)),deleteInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:deleteInterface"),updateInterfaceState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:updateInterfaceState"),fetchAndSetQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:fetchAndSetQuotes"),setSelectedQuoteAggId:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSelectedQuoteAggId"),resetSwapsState:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:resetSwapsState"),setSwapsTokens:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTokens"),clearSwapsQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:clearSwapsQuotes"),setApproveTxId:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setApproveTxId"),setTradeTxId:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setTradeTxId"),setSwapsTxGasPrice:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxGasPrice"),setSwapsTxGasLimit:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxGasLimit"),setSwapsTxMaxFeePerGas:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxMaxFeePerGas"),setSwapsTxMaxFeePriorityPerGas:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxMaxFeePriorityPerGas"),safeRefetchQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:safeRefetchQuotes"),stopPollingForQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:stopPollingForQuotes"),setBackgroundSwapRouteState:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setBackgroundSwapRouteState"),resetPostFetchState:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:resetPostFetchState"),setSwapsErrorKey:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsErrorKey"),setInitialGasEstimate:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setInitialGasEstimate"),setCustomApproveTxData:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setCustomApproveTxData"),setSwapsLiveness:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsLiveness"),setSwapsFeatureFlags:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsFeatureFlags"),setSwapsUserFeeLevel:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsUserFeeLevel"),setSwapsQuotesPollingLimitEnabled:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsQuotesPollingLimitEnabled"),[J.BridgeBackgroundAction.SET_FEATURE_FLAGS]:this.controllerMessenger.call.bind(this.controllerMessenger,`${J.BRIDGE_CONTROLLER_NAME}:${J.BridgeBackgroundAction.SET_FEATURE_FLAGS}`),[J.BridgeBackgroundAction.RESET_STATE]:this.controllerMessenger.call.bind(this.controllerMessenger,`${J.BRIDGE_CONTROLLER_NAME}:${J.BridgeBackgroundAction.RESET_STATE}`),[J.BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE]:this.controllerMessenger.call.bind(this.controllerMessenger,`${J.BRIDGE_CONTROLLER_NAME}:${J.BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE}`),[J.BridgeUserAction.UPDATE_QUOTE_PARAMS]:this.controllerMessenger.call.bind(this.controllerMessenger,`${J.BRIDGE_CONTROLLER_NAME}:${J.BridgeUserAction.UPDATE_QUOTE_PARAMS}`),[je.BridgeStatusAction.START_POLLING_FOR_BRIDGE_TX_STATUS]:this.controllerMessenger.call.bind(this.controllerMessenger,`${Lt.BRIDGE_STATUS_CONTROLLER_NAME}:${je.BridgeStatusAction.START_POLLING_FOR_BRIDGE_TX_STATUS}`),fetchSmartTransactionFees:v.getFees.bind(v),clearSmartTransactionFees:v.clearFees.bind(v),submitSignedTransactions:v.submitSignedTransactions.bind(v),cancelSmartTransaction:v.cancelSmartTransaction.bind(v),fetchSmartTransactionsLiveness:v.fetchLiveness.bind(v),updateSmartTransaction:v.updateSmartTransaction.bind(v),setStatusRefreshInterval:v.setStatusRefreshInterval.bind(v),trackMetaMetricsEvent:h.trackEvent.bind(h),trackMetaMetricsPage:h.trackPage.bind(h),createEventFragment:h.createEventFragment.bind(h),updateEventFragment:h.updateEventFragment.bind(h),finalizeEventFragment:h.finalizeEventFragment.bind(h),trackInsightSnapView:this.trackInsightSnapView.bind(this),rejectAllPendingApprovals:this.rejectAllPendingApprovals.bind(this),rejectPendingApproval:this.rejectPendingApproval,requestUserApproval:T.addAndShowApprovalRequest.bind(T),resolvePendingApproval:this.resolvePendingApproval,resetViewedNotifications:g.resetViewed.bind(g),updateViewedNotifications:g.updateViewed.bind(g),currencyRateStartPolling:i.startPolling.bind(i),currencyRateStopPollingByPollingToken:i.stopPollingByPollingToken.bind(i),tokenRatesStartPolling:E.startPolling.bind(E),tokenRatesStopPollingByPollingToken:E.stopPollingByPollingToken.bind(E),accountTrackerStartPolling:P.startPollingByNetworkClientId.bind(P),accountTrackerStopPollingByPollingToken:P.stopPollingByPollingToken.bind(P),tokenDetectionStartPolling:l.startPolling.bind(l),tokenDetectionStopPollingByPollingToken:l.stopPollingByPollingToken.bind(l),tokenListStartPolling:u.startPolling.bind(u),tokenListStopPollingByPollingToken:u.stopPollingByPollingToken.bind(u),tokenBalancesStartPolling:c.startPolling.bind(c),tokenBalancesStopPollingByPollingToken:c.stopPollingByPollingToken.bind(c),gasFeeStartPolling:p.startPolling.bind(p),gasFeeStopPollingByPollingToken:p.stopPollingByPollingToken.bind(p),getGasFeeTimeEstimate:p.getTimeEstimate.bind(p),addPollingTokenToAppState:r.addPollingToken.bind(r),removePollingTokenFromAppState:r.removePollingToken.bind(r),updateThrottledOriginState:r.updateThrottledOriginState.bind(r),backupUserData:S.backupUserData.bind(S),restoreUserData:S.restoreUserData.bind(S),detectTokens:l.detectTokens.bind(l),detectNfts:o.detectNfts.bind(o),addDetectedTokens:w.addDetectedTokens.bind(w),addImportedTokens:w.addTokens.bind(w),ignoreTokens:w.ignoreTokens.bind(w),getBalancesInSingleCall:(...e)=>this.assetsContractController.getBalancesInSingleCall(...e),performSignIn:A.performSignIn.bind(A),performSignOut:A.performSignOut.bind(A),enableProfileSyncing:_.enableProfileSyncing.bind(_),disableProfileSyncing:_.disableProfileSyncing.bind(_),syncInternalAccountsWithUserStorage:_.syncInternalAccountsWithUserStorage.bind(_),deleteAccountSyncingDataFromUserStorage:_.performDeleteStorageAllFeatureEntries.bind(_),checkAccountsPresence:I.checkAccountsPresence.bind(I),createOnChainTriggers:I.createOnChainTriggers.bind(I),deleteOnChainTriggersByAccount:I.deleteOnChainTriggersByAccount.bind(I),updateOnChainTriggersByAccount:I.updateOnChainTriggersByAccount.bind(I),fetchAndUpdateMetamaskNotifications:I.fetchAndUpdateMetamaskNotifications.bind(I),deleteNotificationsById:I.deleteNotificationsById.bind(I),getNotificationsByType:I.getNotificationsByType.bind(I),markMetamaskNotificationsAsRead:I.markMetamaskNotificationsAsRead.bind(I),setFeatureAnnouncementsEnabled:I.setFeatureAnnouncementsEnabled.bind(I),enablePushNotifications:x.enablePushNotifications.bind(x),disablePushNotifications:x.disablePushNotifications.bind(x),updateTriggerPushNotifications:x.updateTriggerPushNotifications.bind(x),enableMetamaskNotifications:I.enableMetamaskNotifications.bind(I),disableMetamaskNotifications:I.disableNotificationServices.bind(I),throwTestError:this.throwTestError.bind(this),updateProposedNames:this.nameController.updateProposedNames.bind(this.nameController),setName:this.nameController.setName.bind(this.nameController),createSnapAccount:async(e,t,n)=>{const r=await this.getSnapKeyring();return await r.createAccount(e,t,n)},decodeTransactionData:e=>(0,Ot.decodeTransactionData)({...e,provider:this.provider}),createMetaMetricsDataDeletionTask:this.metaMetricsDataDeletionController.createMetaMetricsDataDeletionTask.bind(this.metaMetricsDataDeletionController),updateDataDeletionTaskStatus:this.metaMetricsDataDeletionController.updateDataDeletionTaskStatus.bind(this.metaMetricsDataDeletionController),endTrace:xe.endTrace}}rejectOriginPendingApprovals(e){(0,qt.rejectOriginApprovals)({approvalController:this.approvalController,deleteInterface:e=>this.controllerMessenger.call("SnapInterfaceController:deleteInterface",e),origin:e})}async exportAccount(e,t){return await this.verifyPassword(t),this.keyringController.exportAccount(t,e)}async getTokenStandardAndDetails(e,t,n){var r,s,a,o;const i=an(un,this,gn).call(this),{tokensChainsCache:c}=this.tokenListController.state,l=(null==c||null===(r=c[i])||void 0===r?void 0:r.data)||{},{allTokens:d}=this.tokensController.state,u=(null==d||null===(s=d[i])||void 0===s?void 0:s[t])||[],p={...Se.STATIC_MAINNET_TOKEN_LIST[null==e?void 0:e.toLowerCase()]||{},...l[null==e?void 0:e.toLowerCase()]||{},...u.find((({address:t})=>(0,ve.isEqualCaseInsensitive)(t,e)))||{}},h=(0,ve.isEqualCaseInsensitive)(p.standard,ie.TokenStandard.ERC20)||!0===p.erc20,m=!(n||(0,ve.isEqualCaseInsensitive)(p.standard,ie.TokenStandard.ERC1155)||(0,ve.isEqualCaseInsensitive)(p.standard,ie.TokenStandard.ERC721)||p.erc721),f=p.decimals!==undefined&&p.symbol;let g;if(h||m&&f)try{const n=t?await(0,we.fetchTokenBalance)(e,t,this.provider):undefined;g={address:e,balance:n,standard:ie.TokenStandard.ERC20,decimals:p.decimals,symbol:p.symbol}}catch(e){b.default.warn(`Failed to get token balance. Error: ${e}`)}if(g===undefined)try{g=await this.assetsContractController.getTokenStandardAndDetails(e,t,n)}catch(e){b.default.warn(`Failed to get token standard and details. Error: ${e}`)}if(g){if((0,ve.isEqualCaseInsensitive)(g.standard,ie.TokenStandard.ERC1155))try{const r=await(0,we.fetchERC1155Balance)(e,t,n,this.provider),s=null!=r&&r._hex?parseInt(r._hex,16).toString():null;g={...g,balance:s}}catch(e){b.default.warn("Failed to get token balance. Error:",e)}}return{...g,decimals:null===(a=g)||void 0===a||null===(a=a.decimals)||void 0===a?void 0:a.toString(10),balance:null===(o=g)||void 0===o||null===(o=o.balance)||void 0===o?void 0:o.toString(10)}}async getTokenStandardAndDetailsByChain(e,t,n,r){var s,a,o,i;const{tokensChainsCache:c}=this.tokenListController.state,l=(null==c||null===(s=c[r])||void 0===s?void 0:s.data)||{},{allTokens:d}=this.tokensController.state,u=this.accountsController.getSelectedAccount(),p=(null==d||null===(a=d[r])||void 0===a?void 0:a[u.address])||[];let h={};r===le.CHAIN_IDS.MAINNET&&(h=Se.STATIC_MAINNET_TOKEN_LIST[null==e?void 0:e.toLowerCase()]||{});const m=l[null==e?void 0:e.toLowerCase()]||{},f=p.find((({address:t})=>(0,ve.isEqualCaseInsensitive)(t,e)))||{},g={...h,...m,...f},y=(0,ve.isEqualCaseInsensitive)(g.standard,ie.TokenStandard.ERC20)||!0===g.erc20,C=!(n||(0,ve.isEqualCaseInsensitive)(g.standard,ie.TokenStandard.ERC1155)||(0,ve.isEqualCaseInsensitive)(g.standard,ie.TokenStandard.ERC721)||g.erc721),w=g.decimals!==undefined&&g.symbol;let v;if(y||C&&w)try{let n=0;an(un,this,gn).call(this)===r&&(n=await(0,we.fetchTokenBalance)(e,t,this.provider)),v={address:e,balance:n,standard:ie.TokenStandard.ERC20,decimals:g.decimals,symbol:g.symbol}}catch(e){b.default.warn(`Failed to get token balance. Error: ${e}`)}if(v===undefined)try{var k,S;const s=null===(k=this.networkController)||void 0===k||null===(k=k.state)||void 0===k||null===(k=k.networkConfigurationsByChainId)||void 0===k||null===(k=k[r])||void 0===k||null===(k=k.rpcEndpoints[null===(S=this.networkController)||void 0===S||null===(S=S.state)||void 0===S||null===(S=S.networkConfigurationsByChainId)||void 0===S||null===(S=S[r])||void 0===S?void 0:S.defaultRpcEndpointIndex])||void 0===k?void 0:k.networkClientId;v=await this.assetsContractController.getTokenStandardAndDetails(e,t,n,s)}catch(e){b.default.warn(`Failed to get token standard and details. Error: ${e}`)}if(v){if((0,ve.isEqualCaseInsensitive)(v.standard,ie.TokenStandard.ERC1155))try{const r=await(0,we.fetchERC1155Balance)(e,t,n,this.provider),s=null!=r&&r._hex?parseInt(r._hex,16).toString():null;v={...v,balance:s}}catch(e){b.default.warn("Failed to get token balance. Error:",e)}}return{...v,decimals:null===(o=v)||void 0===o||null===(o=o.decimals)||void 0===o?void 0:o.toString(10),balance:null===(i=v)||void 0===i||null===(i=i.balance)||void 0===i?void 0:i.toString(10)}}async getTokenSymbol(e){try{const t=await this.assetsContractController.getTokenStandardAndDetails(e);return null==t?void 0:t.symbol}catch(e){return null}}async createNewVaultAndKeychain(e){const t=await this.createVaultMutex.acquire();try{return await this.keyringController.createNewVaultAndKeychain(e)}finally{t()}}async importMnemonicToVault(e){const n=await this.createVaultMutex.acquire();try{if(this.keyringController.getKeyringsByType(p.KeyringTypes.hd).some((n=>t.from(this._convertEnglishWordlistIndicesToCodepoints(n.mnemonic)).toString("utf8")===e)))throw new Error("This Secret Recovery Phrase has already been imported.");const{id:n}=await this.keyringController.addNewKeyring(p.KeyringTypes.hd,{mnemonic:e,numberOfAccounts:1}),[r]=await this.keyringController.withKeyring({id:n},(async({keyring:e})=>e.getAccounts())),s=this.accountsController.getAccountByAddress(r);return this.accountsController.setSelectedAccount(s.id),await this._addAccountsWithBalance(n),r}finally{n()}}async generateNewMnemonicAndAddToVault(){const e=await this.createVaultMutex.acquire();try{const{id:e}=await this.keyringController.addNewKeyring(p.KeyringTypes.hd),[t]=await this.keyringController.withKeyring({id:e},(async({keyring:e})=>e.getAccounts())),n=this.accountsController.getAccountByAddress(t);return this.accountsController.setSelectedAccount(n.id),t}finally{e()}}async createNewVaultAndRestore(e,n){const r=await this.createVaultMutex.acquire();try{const{completedOnboarding:r}=this.onboardingController.state,s=t.from(n);this.permissionController.clearState(),this.snapController.clearState(),this.accountOrderController.updateHiddenAccountsList([]),this.accountTrackerController.clearAccounts(),this.txController.clearUnapprovedTransactions(),r&&this.tokenDetectionController.enable(),await this.keyringController.createNewVaultAndRestore(e,this._convertMnemonicToWordlistIndices(s)),r&&(await this._addAccountsWithBalance(),an(un,this,hn).call(this,{name:ue.HardwareDeviceNames.ledger},(async e=>this.setLedgerTransportPreference(e))))}finally{r()}}async _addAccountsWithBalance(e){try{const r=an(un,this,gn).call(this),s=e?{id:e}:{type:p.KeyringTypes.hd},{accounts:a}=await this.keyringController.withKeyring(s,(async({keyring:e})=>({accounts:await e.getAccounts()})));let o=a[a.length-1];for(let e=a.length;;e++){if("0x0"===await this.getBalance(o,this.provider)){var t,n;await this.tokenDetectionController.detectTokens({chainIds:[r],selectedAddress:o});const s=null===(t=this.tokensController.state.allTokens)||void 0===t||null===(t=t[r])||void 0===t?void 0:t[o],a=null===(n=this.tokensController.state.allDetectedTokens)||void 0===n||null===(n=n[r])||void 0===n?void 0:n[o];if(0===((null==s?void 0:s.length)??0)&&0===((null==a?void 0:a.length)??0)){1!==e&&await this.removeAccount(o);break}}o=await this.keyringController.withKeyring(s,(async({keyring:e})=>{const[t]=await e.addAccounts(1);return t}))}}catch(e){b.default.warn(`Failed to add accounts with balance. Error: ${e}`)}finally{await this.userStorageController.setIsAccountSyncingReadyToBeDispatched(!0)}}_convertMnemonicToWordlistIndices(e){const t=e.toString().split(" ").map((e=>V.wordlist.indexOf(e)));return new Uint8Array(new Uint16Array(t).buffer)}_convertEnglishWordlistIndicesToCodepoints(e){return t.from(Array.from(new Uint16Array(e.buffer)).map((e=>V.wordlist[e])).join(" "))}async getBalance(e,t){const n=this.accountTrackerController.state.accountsByChainId[an(un,this,gn).call(this)],r=null==n?void 0:n[e];if(r&&r.balance)return r.balance;try{return await t.request({method:"eth_getBalance",params:[e,"latest"]})||"0x0"}catch(e){throw b.default.error(e),e}}async submitPassword(e){const{completedOnboarding:t}=this.onboardingController.state;await this.offscreenPromise,await this.keyringController.submitPassword(e);try{await this.blockTracker.checkForLatestBlock()}catch(e){b.default.error("Error while unlocking extension.",e)}await this.accountsController.updateAccounts(),t&&an(un,this,hn).call(this,{name:ue.HardwareDeviceNames.ledger},(async e=>this.setLedgerTransportPreference(e)))}async _loginUser(e){try{await this.submitPassword(e),await this.accountTrackerController.updateAccountsAllActiveNetworks()}finally{this._startUISync()}}_startUISync(){this.emit("startUISync"),this.startUISync=!0,this.memStore.subscribe(this.sendUpdate.bind(this))}async submitEncryptionKey(){try{const{loginToken:e,loginSalt:t}=await this.extension.storage.session.get(["loginToken","loginSalt"]);if(e&&t){const{vault:n}=this.keyringController.state;if(JSON.parse(n).salt!==t)return console.warn("submitEncryptionKey: Stored salt and vault salt do not match"),void await this.clearLoginArtifacts();await this.keyringController.submitEncryptionKey(e,t)}}catch(e){throw await this.clearLoginArtifacts(),e}}async clearLoginArtifacts(){await this.extension.storage.session.remove(["loginToken","loginSalt"])}async verifyPassword(e){await this.keyringController.verifyPassword(e)}getPrimaryKeyringMnemonic(){const[e]=this.keyringController.getKeyringsByType(pe.KeyringType.hdKeyTree);if(!e.mnemonic)throw new Error("Primary keyring mnemonic unavailable.");return e.mnemonic}getPrimaryKeyringMnemonicSeed(){const[e]=this.keyringController.getKeyringsByType(pe.KeyringType.hdKeyTree);if(!e.seed)throw new Error("Primary keyring mnemonic unavailable.");return e.seed}async attemptLedgerTransportCreation(){return await an(un,this,hn).call(this,{name:ue.HardwareDeviceNames.ledger},(async e=>e.attemptMakeApp()))}async connectHardware(e,t,n){return an(un,this,hn).call(this,{name:e,hdPath:n},(async n=>{e===ue.HardwareDeviceNames.ledger&&await this.setLedgerTransportPreference(n);let r=[];switch(t){case-1:r=await n.getPreviousPage();break;case 1:r=await n.getNextPage();break;default:r=await n.getFirstPage()}const s=await this.keyringController.getAccounts(),a=[...new Set(s.concat(r.map((e=>e.address.toLowerCase()))))];return this.accountTrackerController.syncWithAddresses(a),r}))}async checkHardwareStatus(e,t){return an(un,this,hn).call(this,{name:e,hdPath:t},(async e=>e.isUnlocked()))}async getHardwareTypeForMetric(e){return await this.keyringController.withKeyring({address:e},(({keyring:e})=>ue.HardwareKeyringType[e.type]))}async forgetDevice(e){return an(un,this,hn).call(this,{name:e},(async e=>{for(const t of e.accounts)this._onAccountRemoved(t);return e.forgetDevice(),!0}))}async getAccountType(e){switch(await this.keyringController.getAccountKeyringType(e)){case pe.KeyringType.trezor:case pe.KeyringType.oneKey:case pe.KeyringType.lattice:case pe.KeyringType.qr:case pe.KeyringType.ledger:return"hardware";case pe.KeyringType.imported:return"imported";case pe.KeyringType.snap:return"snap";default:return"MetaMask"}}async getDeviceModel(e){return this.keyringController.withKeyring({address:e},(async({keyring:e})=>{switch(e.type){case pe.KeyringType.trezor:case pe.KeyringType.oneKey:return e.getModel();case pe.KeyringType.qr:return e.getName();case pe.KeyringType.ledger:return ue.HardwareDeviceNames.ledger;case pe.KeyringType.lattice:return ue.HardwareDeviceNames.lattice;default:return undefined}}))}getAccountLabel(e,t,n){return`${e[0].toUpperCase()}${e.slice(1)} ${parseInt(t,10)+1} ${n||""}`.trim()}async unlockHardwareWalletAccount(e,t,n,r){const{address:s,label:a}=await an(un,this,hn).call(this,{name:t,hdPath:n},(async n=>{n.setAccountToUnlock(e);const[s]=await n.addAccounts(1);return{address:(0,ne.normalize)(s),label:this.getAccountLabel(t===ue.HardwareDeviceNames.qr?n.getName():t,e,r)}}));this.preferencesController.setAccountLabel(s,a),this.preferencesController.setSelectedAddress(s);const o=this.accountsController.getAccountByAddress(s);this.accountsController.setAccountName(o.id,a);const i=this.accountsController.listAccounts(),{identities:c}=this.preferencesController.state;return{unlockedAccount:s,identities:c,accounts:i}}async addNewAccount(e,t){const n=await this.keyringController.getAccounts(),r=t?{id:t}:{type:p.KeyringTypes.hd},s=await this.keyringController.withKeyring(r,(async({keyring:t})=>{if(t.type!==p.KeyringTypes.hd)throw new Error("Cannot add account to non-HD keyring");const n=await t.getAccounts();if(e&&e!==n.length){if(e>n.length)throw new Error("Account out of sequence");const t=n[e];if(!t)throw new Error(`Can't find account at index ${e}`);return t}const[r]=await t.addAccounts(1);return r}));return n.includes(s)||this.preferencesController.setSelectedAddress(s),s}async getSeedPhrase(e,t){return this._convertEnglishWordlistIndicesToCodepoints(await this.keyringController.exportSeedPhrase(e,t))}async resetAccount(){const e=this.accountsController.getSelectedAccount().address,t=an(un,this,gn).call(this);return this.txController.wipeTransactions({address:e,chainId:t}),this.smartTransactionsController.wipeSmartTransactions({address:e,ignoreNetwork:!1}),this.bridgeStatusController.wipeBridgeStatus({address:e,ignoreNetwork:!1}),this.networkController.resetConnection(),e}captureKeyringTypesWithMissingIdentities(e=[],t=[]){const n=t.filter((t=>!e.some((e=>e.address.toLowerCase()===t.toLowerCase())))).map((e=>this.keyringController.getAccountKeyringType(e))),r=e.length,s=this.accountTrackerController.state.accountsByChainId[an(un,this,gn).call(this)],a=Object.keys(s||{}).length;(0,T.captureException)(new Error(`Attempt to get permission specifications failed because their were ${t.length} accounts, but ${r} identities, and the ${n} keyrings included accounts with missing identities. Meanwhile, there are ${a} accounts in the account tracker.`))}sortEvmAccountsByLastSelected(e){const t=this.accountsController.listAccounts();return this.sortAddressesWithInternalAccounts(e,t)}sortMultichainAccountsByLastSelected(e){const t=this.accountsController.listMultichainAccounts();return this.sortAddressesWithInternalAccounts(e,t)}sortAddressesWithInternalAccounts(e,t){return e.sort(((n,r)=>{const s=t.find((e=>e.address.toLowerCase()===n.toLowerCase())),a=t.find((e=>e.address.toLowerCase()===r.toLowerCase()));if(!s)throw this.captureKeyringTypesWithMissingIdentities(t,e),new Error(`Missing identity for address: "${n}".`);if(!a)throw this.captureKeyringTypesWithMissingIdentities(t,e),new Error(`Missing identity for address: "${r}".`);return s.metadata.lastSelected===a.metadata.lastSelected?0:s.metadata.lastSelected===undefined?1:a.metadata.lastSelected===undefined?-1:a.metadata.lastSelected-s.metadata.lastSelected}))}getPermittedAccounts(e,{ignoreLock:t}={}){let n;try{n=this.permissionController.getCaveat(e,ae.Caip25EndowmentPermissionName,ae.Caip25CaveatType)}catch(e){if(e instanceof R.PermissionDoesNotExistError)return[];throw e}if(!this.isUnlocked()&&!t)return[];const r=(0,ae.getEthAccounts)(n.value);return this.sortEvmAccountsByLastSelected(r)}removeAllScopePermissions(e){this.permissionController.updatePermissionsByCaveat(ae.Caip25CaveatType,(t=>ae.Caip25CaveatMutators[ae.Caip25CaveatType].removeScope(t,e)))}removeAllAccountPermissions(e){this.permissionController.updatePermissionsByCaveat(ae.Caip25CaveatType,(t=>ae.Caip25CaveatMutators[ae.Caip25CaveatType].removeAccount(t,e)))}async removeAccount(e){return this._onAccountRemoved(e),await this.keyringController.removeAccount(e),e}async importAccountWithStrategy(e,t){const n=await this.keyringController.importAccountWithStrategy(e,t);this.preferencesController.setSelectedAddress(n)}async requestPermissionApproval(e,t,n={}){const r=(0,S.nanoid)();return this.approvalController.addAndShowApprovalRequest({id:r,origin:e,requestData:{metadata:{id:r,origin:e},permissions:t,...n},type:R.MethodNames.RequestPermissions})}async requestApprovalPermittedChainsPermission(e,t){const n=(0,ae.setPermittedEthChainIds)({requiredScopes:{},optionalScopes:{},sessionProperties:{},isMultichainOrigin:!1},[t]);await this.permissionController.requestPermissionsIncremental({origin:e},{[ae.Caip25EndowmentPermissionName]:{caveats:[{type:ae.Caip25CaveatType,value:n}]}})}async requestPermittedChainsPermissionIncremental({origin:e,chainId:t,autoApprove:n,metadata:r}){if((0,Q.isSnapId)(e))throw new Error(`Cannot request permittedChains permission for Snaps with origin "${e}"`);const s=(0,ae.setPermittedEthChainIds)({requiredScopes:{},optionalScopes:{},sessionProperties:{},isMultichainOrigin:!1},[t]);if(!n){let t;return r&&(t={metadata:r}),void await this.permissionController.requestPermissionsIncremental({origin:e},{[ae.Caip25EndowmentPermissionName]:{caveats:[{type:ae.Caip25CaveatType,value:s}]}},t)}await this.permissionController.grantPermissionsIncremental({subject:{origin:e},approvedPermissions:{[ae.Caip25EndowmentPermissionName]:{caveats:[{type:ae.Caip25CaveatType,value:s}]}}})}getCaip25PermissionFromLegacyPermissions(e,t={}){var n,r;const s=(0,u.pick)(t,[he.RestrictedMethods.eth_accounts,bt.PermissionNames.permittedChains]);s[he.RestrictedMethods.eth_accounts]||(s[he.RestrictedMethods.eth_accounts]={}),s[bt.PermissionNames.permittedChains]||(s[bt.PermissionNames.permittedChains]={}),(0,Q.isSnapId)(e)&&delete s[bt.PermissionNames.permittedChains];const a=(null===(n=s[he.RestrictedMethods.eth_accounts])||void 0===n||null===(n=n.caveats)||void 0===n||null===(n=n.find((e=>e.type===he.CaveatTypes.restrictReturnedAccounts)))||void 0===n?void 0:n.value)??[],o=(null===(r=s[bt.PermissionNames.permittedChains])||void 0===r||null===(r=r.caveats)||void 0===r||null===(r=r.find((e=>e.type===he.CaveatTypes.restrictNetworkSwitching)))||void 0===r?void 0:r.value)??[],i=(0,ae.setPermittedEthChainIds)({requiredScopes:{},optionalScopes:{"wallet:eip155":{accounts:[]}},sessionProperties:{},isMultichainOrigin:!1},(0,Q.isSnapId)(e)?[]:o),c=(0,ae.setEthAccounts)(i,a);return{[ae.Caip25EndowmentPermissionName]:{caveats:[{type:ae.Caip25CaveatType,value:c}]}}}getNonEvmSupportedMethods(e){return this.controllerMessenger.call("MultichainRouter:getSupportedMethods",e)}notifySolanaAccountChangedForCurrentAccount(e){let t;try{t=this.permissionController.getCaveat(e,ae.Caip25EndowmentPermissionName,ae.Caip25CaveatType)}catch{}if(!t)return;const n=t.value.sessionProperties[ae.KnownSessionProperties.SolanaAccountChangedNotifications],r=(0,ae.getSessionScopes)(t.value,{getNonEvmSupportedMethods:this.getNonEvmSupportedMethods.bind(this)}),s=r[Be.MultichainNetworks.SOLANA]||r[Be.MultichainNetworks.SOLANA_DEVNET]||r[Be.MultichainNetworks.SOLANA_TESTNET];if(n&&s){const{accounts:t}=s,n=t.map((e=>{const{address:t}=(0,te.parseCaipAccountId)(e);return t})),[r]=this.sortMultichainAccountsByLastSelected(n);r&&this._notifySolanaAccountChange(e,[r])}}getAddTransactionRequest({transactionParams:e,transactionOptions:t,dappRequest:n,...r}){var s;return{internalAccounts:this.accountsController.listAccounts(),dappRequest:n,networkClientId:(null==n?void 0:n.networkClientId)??(null==t?void 0:t.networkClientId),selectedAccount:this.accountsController.getAccountByAddress(e.from),transactionController:this.txController,transactionOptions:t,transactionParams:e,userOperationController:this.userOperationController,chainId:an(un,this,gn).call(this),ppomController:this.ppomController,securityAlertsEnabled:null===(s=this.preferencesController.state)||void 0===s?void 0:s.securityAlertsEnabled,updateSecurityAlertResponse:this.updateSecurityAlertResponse.bind(this),...r}}async getCurrentAccountEIP1559Compatibility(){return!0}async createCancelTransaction(e,t,n){await this.txController.stopTransaction(e,t,n);return this.getState()}async createSpeedUpTransaction(e,t,n){await this.txController.speedUpTransaction(e,t,n);return this.getState()}async estimateGas(e){return new Promise(((t,n)=>{this.provider.request({method:"eth_estimateGas",params:[e]}).then((e=>t(e.toString(16)))).catch((e=>n(e)))}))}async updateSecurityAlertResponse(e,t,n){await(0,Nt.updateSecurityAlertResponse)({appStateController:this.appStateController,method:e,securityAlertId:t,securityAlertResponse:n,signatureController:this.signatureController,transactionController:this.txController})}getHDEntropyIndex(){const e=this.accountsController.getSelectedAccount(),t=this.keyringController.state.keyrings.filter((e=>e.type===p.KeyringTypes.hd)).findIndex((t=>t.accounts.includes(e.address)));return-1===t?undefined:t}markPasswordForgotten(){this.preferencesController.setPasswordForgotten(!0),this.sendUpdate()}unMarkPasswordForgotten(){this.preferencesController.setPasswordForgotten(!1),this.sendUpdate()}setupUntrustedCommunicationEip1193({connectionStream:e,sender:t,subjectType:n}){if(t.url&&this.onboardingController.state.completedOnboarding&&this.preferencesController.state.usePhishDetect){const{hostname:n}=new URL(t.url);this.phishingController.maybeUpdateState();const r=this.phishingController.test(t.url);if(null!=r&&r.result)return this.sendPhishingWarning(e,n),void this.metaMetricsController.trackEvent({event:be.MetaMetricsEventName.PhishingPageDisplayed,category:be.MetaMetricsEventCategory.Phishing,properties:{url:n}})}let r;r=n||(t.id&&t.id!==this.extension.runtime.id?R.SubjectType.Extension:R.SubjectType.Website);const s=(0,tt.setupMultiplex)(e);this.setupProviderConnectionEip1193(s.createStream("metamask-provider"),t,r),t.url&&this.setupPublicConfig(s.createStream("publicConfig"))}setupUntrustedCommunicationCaip({connectionStream:e,sender:t,subjectType:n}){}setupTrustedCommunication(e,t){const n=(0,tt.setupMultiplex)(e);this.setupControllerConnection(n.createStream("controller")),this.setupProviderConnectionEip1193(n.createStream("provider"),t,R.SubjectType.Internal)}setupPhishingCommunication({connectionStream:e}){const{usePhishDetect:t}=this.preferencesController.state;if(!t)return;const n=(0,tt.setupMultiplex)(e).createStream("metamask-phishing-safelist");n.on("data",(0,ut.default)({safelistPhishingDomain:this.safelistPhishingDomain.bind(this),backToSafetyPhishingWarning:this.backToSafetyPhishingWarning.bind(this)},n))}setUpCookieHandlerCommunication({connectionStream:e}){const{metaMetricsId:t,dataCollectionForMarketing:n,participateInMetaMetrics:r}=this.metaMetricsController.state;if(t&&n&&r){const t=(0,tt.setupMultiplex)(e).createStream(It.METAMASK_COOKIE_HANDLER);t.on("data",(0,ut.default)({getCookieFromMarketingPage:this.getCookieFromMarketingPage.bind(this)},t))}}getCookieFromMarketingPage(e){const{ga_client_id:t}=e;this.metaMetricsController.setMarketingCampaignCookieId(t)}sendPhishingWarning(e,t){(0,tt.setupMultiplex)(e).createStream("phishing").write({hostname:t})}setupControllerConnection(e){const t=new Dt.PatchStore(this.memStore);let n=!1;const r=()=>{if(!(0,tt.isStreamWritable)(e)||!n)return;const r=t.flushPendingPatches();e.write({jsonrpc:"2.0",method:"sendUpdate",params:[r]})},a={...this.getApi(),...this.controllerApi,startPatches:()=>{n=!0,r()},getStatePatches:()=>t.flushPendingPatches()};this.on("update",r),this.activeControllerConnections+=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.on("data",(0,ut.default)(a,e));const o=()=>{(0,tt.isStreamWritable)(e)&&e.write({jsonrpc:"2.0",method:"startUISync"})};this.startUISync?o():this.once("startUISync",o);const i=()=>{e.mmFinished||(this.activeControllerConnections-=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.mmFinished=!0,this.removeListener("update",r),t.destroy())};e.mmFinished=!1,(0,s.finished)(e,i),e.once("close",i),e.once("end",i)}setupProviderConnectionEip1193(e,t,n){let r,a;r=n===R.SubjectType.Internal?ge.ORIGIN_METAMASK:n===R.SubjectType.Snap?t.snapId:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:r,extensionId:t.id,subjectType:R.SubjectType.Extension}),t.tab&&t.tab.id&&(a=t.tab.id);let o=r;t.tab&&t.tab.url&&(o=new URL(t.tab.url).origin);const c=this.setupProviderEngineEip1193({origin:r,sender:t,subjectType:n,tabId:a,mainFrameOrigin:o}),l=(0,Ge.default)(),d=(0,i.createEngineStream)({engine:c}),u=this.addConnection(r,{tabId:a,apiType:on,engine:c});(0,s.pipeline)(e,l,d,e,(e=>{var t;c.destroy(),u&&this.removeConnection(r,u),!e||null!==(t=e.message)&&void 0!==t&&t.match("Premature close")||b.default.error(e)})),n!==R.SubjectType.Internal&&this._notifyChainChangeForConnection({engine:c},r)}setupProviderConnectionCaip(e,t,n){}setupProviderEngineEip1193({origin:e,subjectType:t,sender:n,tabId:r,mainFrameOrigin:s}){const a=new o.JsonRpcEngine;a.push((0,Je.default)({origin:e})),s&&a.push((0,Ye.default)({mainFrameOrigin:s})),a.push((0,j.createSelectedNetworkMiddleware)(this.controllerMessenger));{const e=(0,z.createQueuedRequestMiddleware)({enqueueRequest:this.queuedRequestController.enqueueRequest.bind(this.queuedRequestController),shouldEnqueueRequest:e=>oe.methodsThatShouldBeEnqueued.includes(e.method),useRequestQueue:()=>!0});a.push(e)}const i=this.selectedNetworkController.getProviderAndBlockTracker(e),c=(0,h.default)(i),l=(0,m.default)(i);return l.events.on("notification",(e=>a.emit("notification",e))),r&&a.push((0,Qe.default)({tabId:r})),a.push((0,ze.default)({origin:e})),a.push(this.permissionLogController.createMiddleware()),e===Ae.BaseUrl.Portfolio&&a.push((0,xt.createTxVerificationMiddleware)(this.networkController)),a.push((0,jt.default)()),a.push((0,$t.default)({getThrottledOriginState:this.appStateController.getThrottledOriginState.bind(this.appStateController),updateThrottledOriginState:this.appStateController.updateThrottledOriginState.bind(this.appStateController)})),a.push((0,qe.createPPOMMiddleware)(this.ppomController,this.preferencesController,this.networkController,this.appStateController,this.accountsController,this.updateSecurityAlertResponse.bind(this))),a.push((0,wt.default)({getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getHDEntropyIndex:this.getHDEntropyIndex.bind(this),getHardwareTypeForMetric:this.getHardwareTypeForMetric.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),appStateController:this.appStateController,metaMetricsController:this.metaMetricsController})),a.push((0,We.createUnsupportedMethodMiddleware)()),a.push((0,We.createEthAccountsMethodMiddleware)({getAccounts:this.getPermittedAccounts.bind(this,e)})),t!==R.SubjectType.Internal&&a.push(this.permissionController.createPermissionMiddleware({origin:e})),t===R.SubjectType.Website&&a.push((0,et.default)({location:n.url,registerOnboarding:this.onboardingController.registerOnboarding})),a.push((0,Rt.default)({messenger:this.controllerMessenger.getRestricted({name:"EvmMethodsToNonEvmAccountFilterMessenger",allowedActions:["AccountsController:getSelectedAccount"]})})),a.push((0,We.createEip1193MethodMiddleware)({subjectType:t,addSubjectMetadata:this.subjectMetadataController.addSubjectMetadata.bind(this.subjectMetadataController),metamaskState:this.getState(),getProviderState:this.getProviderState.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),handleWatchAssetRequest:this.handleWatchAssetRequest.bind(this),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),sendMetrics:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAccounts:this.getPermittedAccounts.bind(this,e),getCaip25PermissionFromLegacyPermissionsForOrigin:this.getCaip25PermissionFromLegacyPermissions.bind(this,e),getPermissionsForOrigin:this.permissionController.getPermissions.bind(this.permissionController,e),requestPermittedChainsPermissionIncrementalForOrigin:t=>this.requestPermittedChainsPermissionIncremental({...t,origin:e}),requestPermissionsForOrigin:t=>this.permissionController.requestPermissions({origin:e},t),revokePermissionsForOrigin:t=>{try{this.permissionController.revokePermissions({[e]:t})}catch(e){console.log(e)}},getCaveat:({target:t,caveatType:n})=>{try{return this.permissionController.getCaveat(e,t,n)}catch(e){if(!(e instanceof R.PermissionDoesNotExistError))throw e}return undefined},setActiveNetwork:async t=>{await this.networkController.setActiveNetwork(t),this.permissionController.hasPermission(e,ae.Caip25EndowmentPermissionName)&&this.selectedNetworkController.setNetworkClientIdForDomain(e,t)},addNetwork:this.networkController.addNetwork.bind(this.networkController),updateNetwork:this.networkController.updateNetwork.bind(this.networkController),getNetworkConfigurationByChainId:this.networkController.getNetworkConfigurationByChainId.bind(this.networkController),setTokenNetworkFilter:e=>{const{tokenNetworkFilter:t}=this.preferencesController.getPreferences();e&&1===Object.keys(t).length&&this.preferencesController.setPreference("tokenNetworkFilter",{[e]:!0})},getCurrentChainIdForDomain:e=>{const t=this.selectedNetworkController.getNetworkClientIdForDomain(e),{chainId:n}=this.networkController.getNetworkConfigurationByNetworkClientId(t);return n},getWeb3ShimUsageState:this.alertController.getWeb3ShimUsageState.bind(this.alertController),setWeb3ShimUsageRecorded:this.alertController.setWeb3ShimUsageRecorded.bind(this.alertController),updateCaveat:this.permissionController.updateCaveat.bind(this.permissionController,e),hasApprovalRequestsForOrigin:()=>this.approvalController.has({origin:e}),rejectApprovalRequestsForOrigin:()=>this.rejectOriginPendingApprovals(e)})),a.push((0,U.createSnapsMethodMiddleware)(t===R.SubjectType.Snap,{clearSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:clearSnapState",e),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getPermitted",e),requestPermissions:async t=>await this.permissionController.requestPermissions({origin:e},t),getPermissions:this.permissionController.getPermissions.bind(this.permissionController,e),getSnapFile:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getFile",e),getSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getSnapState",e),updateSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:updateSnapState",e),installSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:install",e),invokeSnap:this.permissionController.executeRestrictedMethod.bind(this.permissionController,e,he.RestrictedMethods.wallet_snap),getIsLocked:()=>!this.appStateController.isUnlocked(),getInterfaceState:(...t)=>this.controllerMessenger.call("SnapInterfaceController:getInterface",e,...t).state,getInterfaceContext:(...t)=>this.controllerMessenger.call("SnapInterfaceController:getInterface",e,...t).context,createInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:createInterface",e),updateInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:updateInterface",e),resolveInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:resolveInterface",e),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),getAllSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getAll"),getCurrencyRate:e=>{const t=this.multichainRatesController.state.rates[e],{fiatCurrency:n}=this.multichainRatesController.state;return t?{...t,currency:n}:undefined},getEntropySources:()=>{const e=this.controllerMessenger.call("KeyringController:getState");return e.keyrings.map(((t,n)=>t.type===p.KeyringTypes.hd?{id:e.keyringsMetadata[n].id,name:e.keyringsMetadata[n].name,type:"mnemonic",primary:0===n}:null)).filter(Boolean)},hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),scheduleBackgroundEvent:t=>this.controllerMessenger.call("CronjobController:scheduleBackgroundEvent",{...t,snapId:e}),cancelBackgroundEvent:this.controllerMessenger.call.bind(this.controllerMessenger,"CronjobController:cancelBackgroundEvent",e),getBackgroundEvents:this.controllerMessenger.call.bind(this.controllerMessenger,"CronjobController:getBackgroundEvents",e),getNetworkConfigurationByChainId:this.controllerMessenger.call.bind(this.controllerMessenger,"NetworkController:getNetworkConfigurationByChainId"),getNetworkClientById:this.controllerMessenger.call.bind(this.controllerMessenger,"NetworkController:getNetworkClientById"),handleSnapRpcRequest:t=>this.handleSnapRequest({...t,origin:e}),getAllowedKeyringMethods:(0,De.keyringSnapPermissionsBuilder)(this.subjectMetadataController,e)})),a.push(c),a.push(l.middleware),a.push(this.metamaskMiddleware),a.push((0,d.providerAsMiddleware)(i.provider)),a}setupProviderEngineCaip({origin:e,sender:t,subjectType:n,tabId:r}){return null}setupPublicConfig(e){const t=(0,l.storeAsStream)(this.publicConfigStore);(0,s.pipeline)(t,e,(e=>{var n;t.destroy(),!e||null!==(n=e.message)&&void 0!==n&&n.match("Premature close")||b.default.error(e)}))}addConnection(e,{tabId:t,apiType:n,engine:r}){if(e===ge.ORIGIN_METAMASK)return null;this.connections[e]||(this.connections[e]={});const s=(0,S.nanoid)();return this.connections[e][s]={tabId:t,apiType:n,engine:r},s}removeConnection(e,t){const n=this.connections[e];n&&(delete n[t],0===Object.keys(n).length&&delete this.connections[e])}removeAllConnections(e){const t=this.connections[e];t&&Object.keys(t).forEach((t=>{this.removeConnection(e,t)}))}notifyConnections(e,t,n){const r=this.connections[e];r&&Object.values(r).forEach((e=>{n&&e.apiType!==n||e.engine&&e.engine.emit("notification",t)}))}notifyAllConnections(e,t){const n="function"==typeof e?t=>e(t):()=>e;Object.keys(this.connections).forEach((e=>{Object.values(this.connections[e]).forEach((async r=>{if(!t||r.apiType===t)try{this.notifyConnection(r,await n(e))}catch(e){console.error(e)}}))}))}notifyConnection(e,t){try{e.engine&&e.engine.emit("notification",t)}catch(e){console.error(e)}}async _onKeyringControllerUpdate(e){const{keyrings:t}=e,n=t.reduce(((e,{accounts:t})=>e.concat(t)),[]).filter(Bt.isEthAddress);n.length&&this.accountTrackerController.syncWithAddresses(n)}_onUnlock(){this.unMarkPasswordForgotten(),this.emit("unlock")}_onLock(){this.emit("lock")}_onStateUpdate(e){this.isClientOpenAndUnlocked=e.isUnlocked&&this._isClientOpen,this._notifyChainChange()}_onAccountRemoved(e){this.removeAllAccountPermissions(e)}privateSendUpdate(){this.emit("update",this.getState())}isUnlocked(){return this.keyringController.state.isUnlocked}getExternalPendingTransactions(e){return this.smartTransactionsController.getTransactions({addressFrom:e,status:"pending"})}async initializeChainlist(){const e=`cachedFetch:${le.CHAIN_SPEC_URL}`,{cachedResponse:t}=await(0,Ce.getStorageItem)(e)||{};t||await(0,Ce.setStorageItem)(e,{cachedResponse:(0,v.rawChainData)(),cachedTime:0})}async getPendingNonce(e,t){const{nonceDetails:n,releaseLock:r}=await this.txController.getNonceLock(e,t),s=n.params.highestSuggested;return r(),s}async getNextNonce(e,t){const n=await this.txController.getNonceLock(e,t);return n.releaseLock(),n.nextNonce}throwTestError(e){setTimeout((()=>{const t=new Error(e);throw t.name="TestError",t}))}_addBridgeStatusControllerListeners(){this.controllerMessenger.subscribe("BridgeStatusController:bridgeTransactionComplete",(e=>(0,Ht.handleBridgeTransactionComplete)(e,{backgroundState:this.getState(),trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}))),this.controllerMessenger.subscribe("BridgeStatusController:bridgeTransactionFailed",(e=>(0,Ht.handleBridgeTransactionFailed)(e,{backgroundState:this.getState(),trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}))),this.controllerMessenger.subscribe("TransactionController:transactionFailed",(({transactionMeta:e})=>{const{type:t,status:n}=e,r=t===Y.TransactionType.bridge,s=[Y.TransactionStatus.approved,Y.TransactionStatus.signed].includes(n);r&&!s&&(0,Ht.handleTransactionFailedTypeBridge)({transactionMeta:e},{backgroundState:this.getState(),trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)})}))}getTransactionMetricsRequest(){return{...{createEventFragment:this.metaMetricsController.createEventFragment.bind(this.metaMetricsController),finalizeEventFragment:this.metaMetricsController.finalizeEventFragment.bind(this.metaMetricsController),getEventFragmentById:this.metaMetricsController.getEventFragmentById.bind(this.metaMetricsController),getParticipateInMetrics:()=>this.metaMetricsController.state.participateInMetaMetrics,trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),updateEventFragment:this.metaMetricsController.updateEventFragment.bind(this.metaMetricsController),getAccountBalance:(e,t)=>{var n;return null===(n=this.accountTrackerController.state.accountsByChainId)||void 0===n||null===(n=n[t])||void 0===n||null===(n=n[e])||void 0===n?void 0:n.balance},getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getHardwareTypeForMetric:this.getHardwareTypeForMetric.bind(this),getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getSelectedAddress:()=>this.accountsController.getSelectedAccount().address,getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTransaction:e=>this.txController.state.transactions.find((t=>t.id===e)),getIsSmartTransaction:()=>(0,Pe.getIsSmartTransaction)(this._getMetaMaskState()),getSmartTransactionByMinedTxHash:e=>this.smartTransactionsController.getSmartTransactionByMinedTxHash(e),getMethodData:e=>{if(!e)return null;const{knownMethodData:t,use4ByteResolution:n}=this.preferencesController.state,r=(0,pt.addHexPrefix)(e);return(0,pt.getMethodDataName)(t,n,r,this.preferencesController.addKnownMethodData.bind(this.preferencesController),this.provider)},getIsConfirmationAdvancedDetailsOpen:()=>this.preferencesController.state.preferences.showConfirmationAdvancedDetails,getHDEntropyIndex:this.getHDEntropyIndex.bind(this)},snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),provider:this.provider}}updateAccountBalanceForTransactionNetwork(e){const{networkClientId:t,txParams:{from:n}}=e;this.accountTrackerController.updateAccountByAddress({from:n,networkClientId:t})}toggleExternalServices(e){this.preferencesController.toggleExternalServices(e),this.tokenListController.updatePreventPollingOnNetworkRestart(!e),e?(this.tokenDetectionController.enable(),this.gasFeeController.enableNonRPCGasFeeApis()):(this.tokenDetectionController.disable(),this.gasFeeController.disableNonRPCGasFeeApis())}async setLedgerTransportPreference(e){const t=window.navigator.hid?ue.LedgerTransportTypes.webhid:ue.LedgerTransportTypes.u2f;return null!=e&&e.updateTransportMethod?e.updateTransportMethod(t).catch((e=>{throw e})):undefined}recordFirstTimeInfo(e){if(!("firstTimeInfo"in e)){const t="12.15.2";e.firstTimeInfo={version:t,date:Date.now()}}}set isClientOpen(e){this._isClientOpen=e}onClientClosed(){try{this.gasFeeController.stopAllPolling(),this.currencyRateController.stopAllPolling(),this.tokenRatesController.stopAllPolling(),this.tokenDetectionController.stopAllPolling(),this.tokenListController.stopAllPolling(),this.tokenBalancesController.stopAllPolling(),this.appStateController.clearPollingTokens(),this.accountTrackerController.stopAllPolling()}catch(e){console.error(e)}}onEnvironmentTypeClosed(e){const t=ge.POLLING_TOKEN_ENVIRONMENT_TYPES[e];this.appStateController.state[t].forEach((e=>{this.gasFeeController.stopPollingByPollingToken(e),this.currencyRateController.stopPollingByPollingToken(e),this.tokenRatesController.stopPollingByPollingToken(e),this.tokenDetectionController.stopPollingByPollingToken(e),this.tokenListController.stopPollingByPollingToken(e),this.tokenBalancesController.stopPollingByPollingToken(e),this.accountTrackerController.stopPollingByPollingToken(e),this.appStateController.removePollingToken(e,t)}))}safelistPhishingDomain(e){return this.metaMetricsController.trackEvent({category:be.MetaMetricsEventCategory.Phishing,event:be.MetaMetricsEventName.ProceedAnywayClicked,properties:{url:e,referrer:{url:e}}}),this.phishingController.bypass(e)}async backToSafetyPhishingWarning(){this.metaMetricsController.trackEvent({category:be.MetaMetricsEventCategory.Navigation,event:be.MetaMetricsEventName.PortfolioLinkClicked,properties:{location:"phishing_page",text:"Back to safety"}}),await this.platform.switchToAnotherURL(undefined,"https://portfolio.metamask.io/?metamaskEntry=phishing_page_portfolio_button")}setLocked(){return this.keyringController.setLocked()}rejectAllPendingApprovals(){(0,qt.rejectAllApprovals)({approvalController:this.approvalController,deleteInterface:e=>this.controllerMessenger.call("SnapInterfaceController:deleteInterface",e)})}async getCode(e,t){const{provider:n}=this.networkController.getNetworkClientById(t);return await n.request({method:"eth_getCode",params:[e]})}async _onAccountChange(e){const t=(0,bt.getPermittedAccountsByOrigin)(this.permissionController.state);for(const[n,r]of t.entries())r.includes(e)&&this._notifyAccountsChange(n,r);await this.txController.updateIncomingTransactions()}_notifyAccountsChange(e,t){this.notifyConnections(e,{method:bt.NOTIFICATION_NAMES.accountsChanged,params:t.length<2?t:this.getPermittedAccounts(e)},on),this.permissionLogController.updateAccountsHistory(e,t)}async _notifyAuthorizationChange(e,t){this.notifyConnections(e,{method:se.MultichainApiNotifications.sessionChanged,params:{sessionScopes:(0,ae.getSessionScopes)(t,{getNonEvmSupportedMethods:this.getNonEvmSupportedMethods.bind(this)})}},cn)}async _notifySolanaAccountChange(e,t){this.notifyConnections(e,{method:se.MultichainApiNotifications.walletNotify,params:{scope:Be.MultichainNetworks.SOLANA,notification:{method:bt.NOTIFICATION_NAMES.accountsChanged,params:t}}},cn)}async _notifyChainChange(){this.notifyAllConnections((async e=>({method:bt.NOTIFICATION_NAMES.chainChanged,params:await this.getProviderNetworkState(e)})),on)}async _notifyChainChangeForConnection(e,t){this.notifyConnection(e,{method:bt.NOTIFICATION_NAMES.chainChanged,params:await this.getProviderNetworkState(t)})}async _onFinishedTransaction(e){[Y.TransactionStatus.confirmed,Y.TransactionStatus.failed].includes(e.status)&&(await this._createTransactionNotifcation(e),await this._updateNFTOwnership(e),this._trackTransactionFailure(e),await this.tokenBalancesController.updateBalancesByChainId({chainId:e.chainId}))}async _createTransactionNotifcation(e){const{chainId:t}=e;let n={};if(t){var r,s;const e=null===(r=this.networkController.state.networkConfigurationsByChainId)||void 0===r?void 0:r[t];n={blockExplorerUrl:null==e||null===(s=e.blockExplorerUrls)||void 0===s?void 0:s[null==e?void 0:e.defaultBlockExplorerUrlIndex]}}try{await this.platform.showTransactionNotification(e,n)}catch(e){b.default.error("Failed to create transaction notification",e)}}async _updateNFTOwnership(e){const{type:t,txParams:n,chainId:r,txReceipt:s}=e,a=this.accountsController.getSelectedAccount().address,{allNfts:o}=this.nftController.state,i=null==s?void 0:s.logs,c=t===Y.TransactionType.contractInteraction&&i,l=(t===Y.TransactionType.tokenMethodTransferFrom||t===Y.TransactionType.tokenMethodSafeTransferFrom)&&n!==undefined;if(c||l)if(l){var d;const{data:e,to:t,from:s}=n,a=(0,ke.parseStandardTokenTransactionData)(e),i=(0,we.getTokenIdParam)(a)??(0,Te.getTokenValueParam)(a),c=null==o||null===(d=o[s])||void 0===d||null===(d=d[r])||void 0===d?void 0:d.find((({address:e,tokenId:n})=>(0,ve.isEqualCaseInsensitive)(e,t)&&n===i));c&&this.nftController.checkAndUpdateSingleNftOwnershipStatus(c,!1,{userAddress:s})}else{const e=i.map((e=>{const t=e.topics&&e.topics[0]===_e.TRANSFER_SINFLE_LOG_TOPIC_HASH,n=e.topics&&e.topics[0]===_e.TOKEN_TRANSFER_LOG_TOPIC_HASH;let r;return t&&(r=e.topics&&e.topics[3]&&e.topics[3].match(null==a?void 0:a.slice(2))),n&&(r=e.topics&&e.topics[2]&&e.topics[2].match(null==a?void 0:a.slice(2))),{isERC1155NftTransfer:t,isERC721NftTransfer:n,isTransferToSelectedAddress:r,...e}}));if(0!==e.length){const t=[];e.forEach((e=>{if(e.isTransferToSelectedAddress&&(e.isERC1155NftTransfer||e.isERC721NftTransfer)){let n;n=e.isERC1155NftTransfer?new X.Interface(Z.abiERC1155):new X.Interface(Z.abiERC721);try{const r=n.parseLog({data:e.data,topics:e.topics});t.push({contract:e.address,...r})}catch(e){}}}));const n=[],s=[];t.forEach((e=>{var t;const i=(0,we.getTokenIdParam)(e),c=null==o||null===(t=o[a])||void 0===t||null===(t=t[r])||void 0===t?void 0:t.find((({address:t,tokenId:n})=>(0,ve.isEqualCaseInsensitive)(t,e.contract)&&n===i));c?n.push(c):s.push({tokenId:i,...e})}));const i=n.map((async e=>this.nftController.checkAndUpdateSingleNftOwnershipStatus(e,!1,{selectedAddress:a})));await Promise.allSettled(i);const c=s.map((async e=>this.nftController.addNft(e.contract,e.tokenId)));await Promise.allSettled(c)}}}_trackTransactionFailure(e){var t,n;const{txReceipt:r}=e,s=this.getState(),{allTokens:a}=this.tokensController.state,o=this.accountsController.getSelectedAccount(),i=(null==a||null===(t=a[e.chainId])||void 0===t?void 0:t[o.address])||[];r&&"0x0"===r.status&&this.metaMetricsController.trackEvent({event:"Tx Status Update: On-Chain Failure",category:be.MetaMetricsEventCategory.Background,properties:{action:"Transactions",errorMessage:null===(n=e.simulationFails)||void 0===n?void 0:n.reason,numberOfTokens:i.length,numberOfAccounts:Object.keys(s.accounts).length}},{matomoEvent:!0})}_onUserOperationAdded(e){const t=this.txController.state.transactions.find((t=>t.id===e.id));t&&(t.type===Y.TransactionType.swap?this.controllerMessenger.publish("TransactionController:transactionNewSwap",{transactionMeta:t}):t.type===Y.TransactionType.swapApproval&&this.controllerMessenger.publish("TransactionController:transactionNewSwapApproval",{transactionMeta:t}))}_onUserOperationTransactionUpdated(e){const t={...e,txParams:{...e.txParams,from:this.accountsController.getSelectedAccount().address}};this.txController.state.transactions.some((e=>e.id===t.id))||this.txController.update((e=>{e.transactions.push(t)})),this.txController.updateTransaction(t,"Generated from user operation"),this.controllerMessenger.publish("TransactionController:transactionStatusUpdated",{transactionMeta:t})}_getMetaMaskState(){return{metamask:this.getState()}}_getConfigForRemoteFeatureFlagRequest(){return{distribution:dn.main||H.DistributionType.Main,environment:ln.other||H.EnvironmentType.Development}}}async function hn(e,t){var n,r,s,a,o;const i=null===(n=this.opts.overrides)||void 0===n?void 0:n.keyrings;let c=null;switch(e.name){case ue.HardwareDeviceNames.trezor:c=(null==i||null===(r=i.trezor)||void 0===r?void 0:r.type)||y.TrezorKeyring.type;break;case ue.HardwareDeviceNames.oneKey:c=(null==i||null===(s=i.oneKey)||void 0===s?void 0:s.type)||(null===y.OneKeyKeyring||void 0===y.OneKeyKeyring?void 0:y.OneKeyKeyring.type);break;case ue.HardwareDeviceNames.ledger:c=(null==i||null===(a=i.ledger)||void 0===a?void 0:a.type)||C.LedgerKeyring.type;break;case ue.HardwareDeviceNames.qr:c=k.MetaMaskKeyring.type;break;case ue.HardwareDeviceNames.lattice:c=(null==i||null===(o=i.lattice)||void 0===o?void 0:o.type)||w.default.type;break;default:throw new Error("MetamaskController:#withKeyringForDevice - Unknown device")}return this.keyringController.withKeyring({type:c},(async({keyring:n})=>{if(e.hdPath&&n.setHdPath&&n.setHdPath(e.hdPath),e.name===ue.HardwareDeviceNames.lattice&&(n.appName="MetaMask"),e.name===ue.HardwareDeviceNames.trezor||e.name===ue.HardwareDeviceNames.oneKey){const e=n.getModel();this.appStateController.setTrezorModel(e)}return n.network=(0,Ie.getProviderConfig)({metamask:this.networkController.state}).type,await t(n)}),{createIfMissing:!0})}function mn(e,t){const n=an(un,this,fn).call(this,t),r=an(un,this,fn).call(this,e);n!==r&&this.tokenListController.updatePreventPollingOnNetworkRestart(!r)}function fn(e){const{useTokenDetection:t,useTransactionSimulations:n,preferences:r}=e??{},{petnamesEnabled:s}=r??{};return t||s||n}function gn(){const e=an(un,this,yn).call(this);return this.networkController.getNetworkClientById(e).configuration.chainId}function bn(){!0===this.preferencesController.state.useExternalServices&&(this.txController.stopIncomingTransactionPolling(),this.txController.startIncomingTransactionPolling())}function yn(){return this.networkController.state.selectedNetworkClientId}function Cn({existingControllers:e,initFunctions:t,initState:n}){const r={getFlatState:this.getState.bind(this),getGlobalChainId:an(un,this,gn).bind(this),getPermittedAccounts:this.getPermittedAccounts.bind(this),getProvider:()=>this.provider,getStateUI:this._getMetaMaskState.bind(this),getTransactionMetricsRequest:this.getTransactionMetricsRequest.bind(this),updateAccountBalanceForTransactionNetwork:this.updateAccountBalanceForTransactionNetwork.bind(this),offscreenPromise:this.offscreenPromise,preinstalledSnaps:this.opts.preinstalledSnaps,persistedState:n,removeAllConnections:this.removeAllConnections.bind(this),setupUntrustedCommunicationEip1193:this.setupUntrustedCommunicationEip1193.bind(this),showNotification:this.platform._showNotification,getMetaMetricsId:this.metaMetricsController.getMetaMetricsId.bind(this.metaMetricsController),trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)};return(0,Jt.initControllers)({baseControllerMessenger:this.controllerMessenger,existingControllers:e,initFunctions:t,initRequest:r})}n.default=pn}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"$root$",file:"app/scripts/metamask-controller.js"}],[2051,{"@metamask/keyring-snap-client":2055},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i,c=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},l=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.KeyringInternalSnapClient=void 0;const d=e("@metamask/keyring-snap-client");class u{constructor(e,t,n,i){r.set(this,void 0),s.set(this,void 0),a.set(this,void 0),o.set(this,void 0),c(this,a,e,"f"),c(this,r,t,"f"),c(this,s,n,"f"),c(this,o,i,"f")}async send(e){return l(this,a,"f").call("SnapController:handleRequest",{snapId:l(this,r,"f"),origin:l(this,s,"f"),handler:l(this,o,"f"),request:e})}}r=new WeakMap,s=new WeakMap,a=new WeakMap,o=new WeakMap;class p extends d.KeyringClient{constructor({messenger:e,snapId:t="undefined",origin:n="metamask",handler:r="onKeyringRequest"}){super(new u(e,t,n,r)),i.set(this,void 0),c(this,i,e,"f")}withSnapId(e){return new p({messenger:l(this,i,"f"),snapId:e})}}n.KeyringInternalSnapClient=p,i=new WeakMap}}},{package:"@metamask/keyring-internal-snap-client",file:"node_modules/@metamask/keyring-internal-snap-client/dist/KeyringInternalSnapClient.cjs"}],[2052,{"./KeyringInternalSnapClient.cjs":2051},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(n,"__esModule",{value:!0}),s(e("./KeyringInternalSnapClient.cjs"),n)}}},{package:"@metamask/keyring-internal-snap-client",file:"node_modules/@metamask/keyring-internal-snap-client/dist/index.cjs"}],[206,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:2,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=2;try{"etherscan"===t.data.config.provider.type&&(t.data.config.provider.type="rpc",t.data.config.provider.rpcTarget="https://rpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/002.js"}],[207,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:3,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=3;try{"https://rawtestrpc.metamask.io/"===t.data.config.provider.rpcTarget&&(t.data.config.provider.rpcTarget="https://testrpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/003.js"}],[208,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:4,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=4;try{if("rpc"!==t.data.config.provider.type)return Promise.resolve(t);switch(t.data.config.provider.rpcTarget){case"https://testrpc.metamask.io/":t.data.config.provider={type:"testnet"};break;case"https://rpc.metamask.io/":t.data.config.provider={type:"mainnet"}}}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/004.js"}],[2089,{"@metamask/base-controller":1405,events:4269,uuid:5533},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.AbstractMessageManager=void 0;const r=e("@metamask/base-controller"),s=e("events"),a=e("uuid"),o={unapprovedMessages:{persist:!1,anonymous:!1},unapprovedMessagesCount:{persist:!1,anonymous:!1}};class i extends r.BaseController{constructor({additionalFinishStatuses:e,messenger:t,name:n,securityProviderRequest:r,state:a={}}){super({messenger:t,metadata:o,name:n,state:{unapprovedMessages:{},unapprovedMessagesCount:0,...a}}),this.internalEvents=new s.EventEmitter,this.messages=[],this.securityProviderRequest=r,this.additionalFinishStatuses=e??[]}addRequestToMessageParams(e,t){const n={...e};return t&&(n.requestId=t.id,n.origin=t.origin),n}createUnapprovedMessage(e,t,n){return{id:(0,a.v1)(),messageParams:e,securityAlertResponse:n?.securityAlertResponse,status:"unapproved",time:Date.now(),type:t}}saveMessageList(e=!0){this.update((e=>{e.unapprovedMessages=this.getUnapprovedMessages(),e.unapprovedMessagesCount=this.getUnapprovedMessagesCount()})),e&&this.messagingSystem.publish(`${this.name}:updateBadge`)}setMessageStatus(e,t){const n=this.getMessage(e);if(!n)throw new Error(`${this.name}: Message not found for id: ${e}.`);const r={...n,status:t};this.updateMessage(r),this.internalEvents.emit(`${e}:${t}`,r),("rejected"===t||"signed"===t||"errored"===t||this.additionalFinishStatuses.includes(t))&&this.internalEvents.emit(`${e}:finished`,r)}updateMessage(e,t=!0){const n=this.messages.findIndex((t=>e.id===t.id));-1!==n&&(this.messages[n]=e),this.saveMessageList(t)}async securityCheck(e){if(this.securityProviderRequest){const t=await this.securityProviderRequest(e,e.type);return{...e,securityProviderResponse:t}}return e}clearUnapprovedMessages(){this.update((e=>{e.unapprovedMessages={},e.unapprovedMessagesCount=0}))}getUnapprovedMessagesCount(){return Object.keys(this.getUnapprovedMessages()).length}getUnapprovedMessages(){return this.messages.filter((e=>"unapproved"===e.status)).reduce(((e,t)=>(e[t.id]=t,e)),{})}async addMessage(e){const t=await this.securityCheck(e);this.messages.push(t),this.saveMessageList()}getMessage(e){return this.messages.find((t=>t.id===e))}getAllMessages(){return this.messages}approveMessage(e){return this.setMessageStatusApproved(e.metamaskId),this.prepMessageForSigning(e)}setMessageStatusApproved(e){this.setMessageStatus(e,"approved")}setMessageStatusInProgress(e){this.setMessageStatus(e,"inProgress")}setMessageStatusSigned(e,t){this.setMessageStatusAndResult(e,t,"signed")}setMessageStatusAndResult(e,t,n){this.setResult(e,t),this.setMessageStatus(e,n)}setResult(e,t){const n=this.getMessage(e);n&&this.updateMessage({...n,rawSig:t},!1)}setMetadata(e,t){const n=this.getMessage(e);if(!n)throw new Error(`${this.name}: Message not found for id: ${e}.`);this.updateMessage({...n,metadata:t},!1)}rejectMessage(e){this.setMessageStatus(e,"rejected")}async waitForFinishStatus(e,t){const{metamaskId:n,...r}=e;return new Promise(((e,s)=>{this.internalEvents.once(`${n}:finished`,(n=>{switch(n.status){case"signed":return e(n.rawSig);case"rejected":return s(new Error(`MetaMask ${t} Signature: User denied message signature.`));case"errored":return s(new Error(`MetaMask ${t} Signature: ${n.error}`));default:return s(new Error(`MetaMask ${t} Signature: Unknown problem: ${JSON.stringify(r)}`))}}))}))}}n.AbstractMessageManager=i,n.default=i}}},{package:"@metamask/message-manager",file:"node_modules/@metamask/message-manager/dist/AbstractMessageManager.cjs"}],[209,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:5,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=5;try{const e=function(e){const{config:t}=e,n={...e,KeyringController:{vault:e.vault,selectedAccount:t.selectedAccount,walletNicknames:e.walletNicknames}};return delete n.vault,delete n.walletNicknames,delete n.config.selectedAccount,n}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #5${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/005.js"}],[2090,{"./AbstractMessageManager.cjs":2089,"./utils.cjs":2094,"@metamask/controller-utils":1512},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.DecryptMessageManager=void 0;const r=e("@metamask/controller-utils"),s=e("./AbstractMessageManager.cjs"),a=e("./utils.cjs"),o="DecryptMessageManager";class i extends s.AbstractMessageManager{constructor({additionalFinishStatuses:e,messenger:t,securityProviderRequest:n,state:r}){super({additionalFinishStatuses:e,messenger:t,name:o,securityProviderRequest:n,state:r})}async addUnapprovedMessageAsync(e,t){(0,a.validateDecryptedMessageData)(e);const n=await this.addUnapprovedMessage(e,t);return new Promise(((t,r)=>{this.internalEvents.once(`${n}:finished`,(n=>{switch(n.status){case"decrypted":return t(n.rawSig);case"rejected":return r(new Error("MetaMask DecryptMessage: User denied message decryption."));case"errored":return r(new Error("MetaMask DecryptMessage: This message cannot be decrypted."));default:return r(new Error(`MetaMask DecryptMessage: Unknown problem: ${JSON.stringify(e)}`))}}))}))}async addUnapprovedMessage(e,t){const n=this.addRequestToMessageParams(e,t);e.data=(0,a.normalizeMessageData)(e.data);const s=this.createUnapprovedMessage(n,r.ApprovalType.EthDecrypt,t),i=s.id;return await this.addMessage(s),this.messagingSystem.publish(`${o}:unapprovedMessage`,{...n,metamaskId:i}),i}prepMessageForSigning(e){return delete e.metamaskId,Promise.resolve(e)}}n.DecryptMessageManager=i}}},{package:"@metamask/message-manager",file:"node_modules/@metamask/message-manager/dist/DecryptMessageManager.cjs"}],[2091,{"./AbstractMessageManager.cjs":2089,"./utils.cjs":2094,"@metamask/controller-utils":1512},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.EncryptionPublicKeyManager=void 0;const r=e("@metamask/controller-utils"),s=e("./AbstractMessageManager.cjs"),a=e("./utils.cjs");class o extends s.AbstractMessageManager{constructor({additionalFinishStatuses:e,messenger:t,securityProviderRequest:n,state:r}){super({additionalFinishStatuses:e,messenger:t,name:"EncryptionPublicKeyManager",securityProviderRequest:n,state:r})}async addUnapprovedMessageAsync(e,t){(0,a.validateEncryptionPublicKeyMessageData)(e);const n=await this.addUnapprovedMessage(e,t);return new Promise(((t,r)=>{this.internalEvents.once(`${n}:finished`,(n=>{switch(n.status){case"received":return t(n.rawSig);case"rejected":return r(new Error("MetaMask EncryptionPublicKey: User denied message EncryptionPublicKey."));default:return r(new Error(`MetaMask EncryptionPublicKey: Unknown problem: ${JSON.stringify(e)}`))}}))}))}async addUnapprovedMessage(e,t){const n=this.addRequestToMessageParams(e,t),s=this.createUnapprovedMessage(n,r.ApprovalType.EthGetEncryptionPublicKey,t),a=s.id;return await this.addMessage(s),this.messagingSystem.publish(`${this.name}:unapprovedMessage`,{...n,metamaskId:a}),a}prepMessageForSigning(e){return delete e.metamaskId,Promise.resolve({from:e.data})}}n.EncryptionPublicKeyManager=o,n.default=o}}},{package:"@metamask/message-manager",file:"node_modules/@metamask/message-manager/dist/EncryptionPublicKeyManager.cjs"}],[2092,{"./AbstractMessageManager.cjs":2089,"./DecryptMessageManager.cjs":2090,"./EncryptionPublicKeyManager.cjs":2091,"./types.cjs":2093},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(n,"__esModule",{value:!0}),s(e("./AbstractMessageManager.cjs"),n),s(e("./EncryptionPublicKeyManager.cjs"),n),s(e("./DecryptMessageManager.cjs"),n),s(e("./types.cjs"),n)}}},{package:"@metamask/message-manager",file:"node_modules/@metamask/message-manager/dist/index.cjs"}],[2093,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0})}}},{package:"@metamask/message-manager",file:"node_modules/@metamask/message-manager/dist/types.cjs"}],[2094,{"@metamask/controller-utils":1512,"@metamask/utils":2822,buffer:3943},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.validateDecryptedMessageData=n.validateEncryptionPublicKeyMessageData=n.normalizeMessageData=void 0;const r=e("@metamask/controller-utils"),s=e("@metamask/utils"),a=/^[0-9A-Fa-f]+$/gu;function o(e,t){if(!e||"string"!=typeof e||!(0,r.isValidHexAddress)(e))throw new Error(`Invalid "${t}" address: ${e} must be a valid string.`)}n.normalizeMessageData=function(e){try{const t=(0,s.remove0x)(e);if(t.match(a))return(0,s.add0x)(t)}catch(e){}return(0,s.bytesToHex)(t.from(e,"utf8"))},n.validateEncryptionPublicKeyMessageData=function(e){const{from:t}=e;o(t,"from")},n.validateDecryptedMessageData=function(e){const{from:t}=e;o(t,"from")}}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@metamask/message-manager",file:"node_modules/@metamask/message-manager/dist/utils.cjs"}],[21,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getAssetsContractControllerMessenger=function(e){return e.getRestricted({name:"AssetsContractController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getNetworkConfigurationByNetworkClientId","NetworkController:getSelectedNetworkClient","NetworkController:getState"],allowedEvents:["PreferencesController:stateChange","NetworkController:networkDidChange"]})}}}},{package:"$root$",file:"app/scripts/controller-init/messengers/assets/assets-contract-controller-messenger.ts"}],[210,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:6,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=6;try{const e=function(e){const t=e.KeyringController,n={...e,PreferencesController:{selectedAddress:t.selectedAccount}};return delete n.KeyringController.selectedAccount,n}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #6${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/006.js"}],[2100,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r;Object.defineProperty(n,"__esModule",{value:!0}),n.MultichainApiNotifications=void 0,function(e){e.sessionChanged="wallet_sessionChanged",e.walletNotify="wallet_notify"}(r||(n.MultichainApiNotifications=r={}))}}},{package:"@metamask/multichain-api-middleware",file:"node_modules/@metamask/multichain-api-middleware/dist/handlers/types.cjs"}],[2101,{"@metamask/chain-agnostic-permission":2115},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.walletGetSession=void 0;const r=e("@metamask/chain-agnostic-permission");n.walletGetSession={methodNames:["wallet_getSession"],implementation:async function(e,t,n,s,a){let o;try{o=a.getCaveatForOrigin(r.Caip25EndowmentPermissionName,r.Caip25CaveatType)}catch{}return o?(t.result={sessionScopes:(0,r.getSessionScopes)(o.value,{getNonEvmSupportedMethods:a.getNonEvmSupportedMethods})},s()):(t.result={sessionScopes:{}},s())},hookNames:{getCaveatForOrigin:!0,getNonEvmSupportedMethods:!0}}}}},{package:"@metamask/multichain-api-middleware",file:"node_modules/@metamask/multichain-api-middleware/dist/handlers/wallet-getSession.cjs"}],[2102,{"@metamask/chain-agnostic-permission":2115,"@metamask/rpc-errors":2415,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.walletInvokeMethod=void 0;const r=e("@metamask/chain-agnostic-permission"),s=e("@metamask/rpc-errors"),a=e("@metamask/utils");n.walletInvokeMethod={methodNames:["wallet_invokeMethod"],implementation:async function(e,t,n,o,i){const{scope:c,request:l}=e.params;let d;(0,r.assertIsInternalScopeString)(c);try{d=i.getCaveatForOrigin(r.Caip25EndowmentPermissionName,r.Caip25CaveatType)}catch{}if(!d?.value?.isMultichainOrigin)return o(s.providerErrors.unauthorized());const u=(0,r.getSessionScopes)(d.value,{getNonEvmSupportedMethods:i.getNonEvmSupportedMethods})[c];if(!u?.methods?.includes(l.method))return o(s.providerErrors.unauthorized());const{namespace:p,reference:h}=(0,r.parseScopeString)(c),m=p===a.KnownCaipNamespace.Wallet&&(!h||h===a.KnownCaipNamespace.Eip155)||p===a.KnownCaipNamespace.Eip155,f={...e,scope:c,method:l.method,params:l.params};if(m){let t;return p===a.KnownCaipNamespace.Wallet?t=i.getSelectedNetworkClientId():p===a.KnownCaipNamespace.Eip155&&h&&(t=i.findNetworkClientIdByChainId((0,a.numberToHex)(parseInt(h,10)))),t?(Object.assign(e,{...f,networkClientId:t}),n()):(console.error("failed to resolve network client for wallet_invokeMethod",e),o(s.rpcErrors.internal()))}try{t.result=await i.handleNonEvmRequestForOrigin({connectedAddresses:u.accounts,scope:c,request:f})}catch(e){return o(e)}return o()},hookNames:{getCaveatForOrigin:!0,findNetworkClientIdByChainId:!0,getSelectedNetworkClientId:!0,getNonEvmSupportedMethods:!0,handleNonEvmRequestForOrigin:!0}}}}},{package:"@metamask/multichain-api-middleware",file:"node_modules/@metamask/multichain-api-middleware/dist/handlers/wallet-invokeMethod.cjs"}],[2103,{"@metamask/chain-agnostic-permission":2115,"@metamask/permission-controller":2254,"@metamask/rpc-errors":2415},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.walletRevokeSession=void 0;const r=e("@metamask/chain-agnostic-permission"),s=e("@metamask/permission-controller"),a=e("@metamask/rpc-errors");n.walletRevokeSession={methodNames:["wallet_revokeSession"],implementation:async function(e,t,n,o,i){try{i.revokePermissionForOrigin(r.Caip25EndowmentPermissionName)}catch(e){if(!(e instanceof s.UnrecognizedSubjectError||e instanceof s.PermissionDoesNotExistError))return console.error(e),o(a.rpcErrors.internal())}return t.result=!0,o()},hookNames:{revokePermissionForOrigin:!0}}}}},{package:"@metamask/multichain-api-middleware",file:"node_modules/@metamask/multichain-api-middleware/dist/handlers/wallet-revokeSession.cjs"}],[2104,{"./handlers/types.cjs":2100,"./handlers/wallet-getSession.cjs":2101,"./handlers/wallet-invokeMethod.cjs":2102,"./handlers/wallet-revokeSession.cjs":2103,"./middlewares/MultichainMiddlewareManager.cjs":2105,"./middlewares/MultichainSubscriptionManager.cjs":2106,"./middlewares/multichainMethodCallValidatorMiddleware.cjs":2107},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.MultichainApiNotifications=n.MultichainSubscriptionManager=n.MultichainMiddlewareManager=n.multichainMethodCallValidatorMiddleware=n.walletRevokeSession=n.walletInvokeMethod=n.walletGetSession=void 0;var r=e("./handlers/wallet-getSession.cjs");Object.defineProperty(n,"walletGetSession",{enumerable:!0,get:function(){return r.walletGetSession}});var s=e("./handlers/wallet-invokeMethod.cjs");Object.defineProperty(n,"walletInvokeMethod",{enumerable:!0,get:function(){return s.walletInvokeMethod}});var a=e("./handlers/wallet-revokeSession.cjs");Object.defineProperty(n,"walletRevokeSession",{enumerable:!0,get:function(){return a.walletRevokeSession}});var o=e("./middlewares/multichainMethodCallValidatorMiddleware.cjs");Object.defineProperty(n,"multichainMethodCallValidatorMiddleware",{enumerable:!0,get:function(){return o.multichainMethodCallValidatorMiddleware}});var i=e("./middlewares/MultichainMiddlewareManager.cjs");Object.defineProperty(n,"MultichainMiddlewareManager",{enumerable:!0,get:function(){return i.MultichainMiddlewareManager}});var c=e("./middlewares/MultichainSubscriptionManager.cjs");Object.defineProperty(n,"MultichainSubscriptionManager",{enumerable:!0,get:function(){return c.MultichainSubscriptionManager}});var l=e("./handlers/types.cjs");Object.defineProperty(n,"MultichainApiNotifications",{enumerable:!0,get:function(){return l.MultichainApiNotifications}})}}},{package:"@metamask/multichain-api-middleware",file:"node_modules/@metamask/multichain-api-middleware/dist/index.cjs"}],[2105,{"@metamask/rpc-errors":2415},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i,c=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},l=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n};Object.defineProperty(n,"__esModule",{value:!0}),n.MultichainMiddlewareManager=void 0;const d=e("@metamask/rpc-errors"),u=["eth_subscribe","eth_unsubscribe"];n.MultichainMiddlewareManager=class{constructor(){r.add(this),s.set(this,[])}addMiddleware(e){const{scope:t,origin:n,tabId:o}=e;c(this,r,"m",a).call(this,{scope:t,origin:n,tabId:o})||c(this,s,"f").push(e)}removeMiddlewareByScope(e){c(this,s,"f").forEach((t=>{t.scope===e&&c(this,r,"m",i).call(this,t)}))}removeMiddlewareByScopeAndOrigin(e,t){c(this,s,"f").forEach((n=>{n.scope===e&&n.origin===t&&c(this,r,"m",i).call(this,n)}))}removeMiddlewareByOriginAndTabId(e,t){c(this,s,"f").forEach((n=>{n.origin===e&&n.tabId===t&&c(this,r,"m",i).call(this,n)}))}generateMultichainMiddlewareForOriginAndTabId(e,t){const n=(n,s,o,i)=>{const{scope:l}=n,p=c(this,r,"m",a).call(this,{scope:l,origin:e,tabId:t});return u.includes(n.method)?p?(p.middleware(n,s,o,i),undefined):i(d.rpcErrors.methodNotFound()):o()};return n.destroy=this.removeMiddlewareByOriginAndTabId.bind(this,e,t),n}},s=new WeakMap,r=new WeakSet,a=function({scope:e,origin:t,tabId:n}){return c(this,s,"f").find((r=>r.scope===e&&r.origin===t&&r.tabId===n))},o=function({scope:e,origin:t,tabId:n}){l(this,s,c(this,s,"f").filter((r=>r.scope!==e||r.origin!==t||r.tabId!==n)),"f")},i=function(e){Promise.resolve(e.middleware.destroy?.()).catch((()=>{})),c(this,r,"m",o).call(this,e)}}}},{package:"@metamask/multichain-api-middleware",file:"node_modules/@metamask/multichain-api-middleware/dist/middlewares/MultichainMiddlewareManager.cjs"}],[2106,{"../handlers/types.cjs":2100,"@metamask/controller-utils":1512,"@metamask/eth-json-rpc-filters/subscriptionManager.js":1597,"@metamask/safe-event-emitter":2417,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i,c,l,d=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},u=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},p=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.MultichainSubscriptionManager=void 0;const h=e("@metamask/controller-utils"),m=p(e("@metamask/eth-json-rpc-filters/subscriptionManager.js")),f=p(e("@metamask/safe-event-emitter")),g=e("@metamask/utils"),b=e("../handlers/types.cjs");class y extends f.default{constructor(e){super(),r.add(this),s.set(this,void 0),a.set(this,void 0),o.set(this,[]),d(this,s,e.findNetworkClientIdByChainId,"f"),d(this,a,e.getNetworkClientById,"f")}notify({scope:e,origin:t,tabId:n},{method:r,params:s}){this.emit("notification",t,n,{method:b.MultichainApiNotifications.walletNotify,params:{scope:e,notification:{method:r,params:s}}})}subscribe(e){const t=u(this,r,"m",i).call(this,e);if(t)return t.subscriptionManager;const n=u(this,s,"f").call(this,(0,h.toHex)((0,g.parseCaipChainId)(e.scope).reference)),c=u(this,a,"f").call(this,n),d=(0,m.default)({blockTracker:c.blockTracker,provider:c.provider});d.events.on("notification",(t=>{this.notify(e,t)}));const p={...e,subscriptionManager:d};return d.destroy=d.middleware.destroy,d.middleware.destroy=u(this,r,"m",l).bind(this,p),u(this,o,"f").push(p),d}unsubscribeByScope(e){u(this,o,"f").forEach((t=>{t.scope===e&&u(this,r,"m",l).call(this,t)}))}unsubscribeByScopeAndOrigin(e,t){u(this,o,"f").forEach((n=>{n.scope===e&&n.origin===t&&u(this,r,"m",l).call(this,n)}))}unsubscribeByOriginAndTabId(e,t){u(this,o,"f").forEach((n=>{n.origin===e&&n.tabId===t&&u(this,r,"m",l).call(this,n)}))}}n.MultichainSubscriptionManager=y,s=new WeakMap,a=new WeakMap,o=new WeakMap,r=new WeakSet,i=function({scope:e,origin:t,tabId:n}){return u(this,o,"f").find((r=>r.scope===e&&r.origin===t&&r.tabId===n))},c=function({scope:e,origin:t,tabId:n}){d(this,o,u(this,o,"f").filter((r=>r.scope!==e||r.origin!==t||r.tabId!==n)),"f")},l=function(e){e.subscriptionManager.destroy?.(),u(this,r,"m",c).call(this,e)}}}},{package:"@metamask/multichain-api-middleware",file:"node_modules/@metamask/multichain-api-middleware/dist/middlewares/MultichainSubscriptionManager.cjs"}],[2107,{"@metamask/api-specs":2110,"@metamask/json-rpc-engine":1952,"@metamask/rpc-errors":2415,"@metamask/utils":2822,"@open-rpc/schema-utils-js/build/dereference-document.js":2877,"@open-rpc/schema-utils-js/build/parse-open-rpc-document.js":2878,jsonschema:4560},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.multichainMethodCallValidatorMiddleware=void 0;const s=e("@metamask/api-specs"),a=e("@metamask/json-rpc-engine"),o=e("@metamask/rpc-errors"),i=e("@metamask/utils"),c=r(e("@open-rpc/schema-utils-js/build/dereference-document.js")),l=e("@open-rpc/schema-utils-js/build/parse-open-rpc-document.js"),d=e("jsonschema"),u=(e,t,n)=>{const r=`${t.name}${e.path.length>0?`.${e.path.join(".")}`:""} ${e.message}`;return o.rpcErrors.invalidParams({message:r,data:{param:t.name,path:e.path,schema:e.schema,got:n}})},p=new d.Validator,h=(0,c.default)(s.MultiChainOpenRPCDocument,(0,l.makeCustomResolver)({}));n.multichainMethodCallValidatorMiddleware=(0,a.createAsyncMiddleware)((async(e,t,n)=>{const r=await(async(e,t)=>{const n=(await h).methods.find((t=>t.name===e));if(!n||!(0,i.isObject)(n)||!("params"in n))return[o.rpcErrors.methodNotFound({data:{method:e}})];const r=[];for(const e of n.params){if(!(0,i.isObject)(t))return[o.rpcErrors.invalidParams()];const n=e,s=t[n.name],a=p.validate(s,n.schema,{required:n.required});a.errors&&r.push(...a.errors.map((e=>u(e,n,s))))}return r})(e.method,e.params);if(r.length>0)throw o.rpcErrors.invalidParams({data:r});return await n()}))}}},{package:"@metamask/multichain-api-middleware",file:"node_modules/@metamask/multichain-api-middleware/dist/middlewares/multichainMethodCallValidatorMiddleware.cjs"}],[2108,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){t.exports={openrpc:"1.2.4",info:{title:"MetaMask MultiChain API",version:"1.0.0",description:"This provides the specs for the MultiChain API Layer for the MetaMask API"},methods:[{name:"wallet_notify",paramStructure:"by-name",params:[{name:"scope",description:"a valid `scope` string that has been previously authorized via `provider_authorize`",required:!0,schema:{$ref:"#/components/schemas/ScopeString"}},{name:"notification",description:"an object containing a JSON-RPC notification with `method` and `params`",deprecated:!1,required:!0,schema:{type:"object",properties:{method:{type:"string"},params:!0}}}]},{name:"wallet_invokeMethod",paramStructure:"by-name",params:[{name:"scope",description:"a valid `scope` string that has been previously authorized via `provider_authorize`",required:!0,schema:{$ref:"#/components/schemas/ScopeString"}},{name:"request",description:"an object containing a JSON-RPC request with `method` and `params`",deprecated:!1,required:!0,schema:{type:"object",properties:{method:{type:"string"},params:!0}}}],result:{name:"wallet_invokeMethodResult",schema:!0},examples:[{name:"wallet_invokeMethodExample",params:[{name:"scope",value:"eip155:1"},{name:"request",value:{method:"eth_getBalance",params:[]}}],result:{name:"wallet_invokeMethodResult",value:"0x1"}}]},{name:"wallet_revokeSession",description:"The `wallet_revokeSession` method revokes the entire active session.",params:[],result:{name:"wallet_revokeSessionResult",schema:{type:"boolean"}},examples:[{name:"wallet_revokeSessionExample",params:[],result:{name:"wallet_revokeSessionExampleResult",value:!0}}],errors:[{$ref:"#/components/errors/UnknownError"}]},{name:"wallet_sessionChanged",paramStructure:"by-name",description:"This notification is published by the wallet to notify the callers of updates to a shared session's authorization scopes. The event payload contains the new `sessionScopes`.",params:[{name:"sessionScopes",schema:{$ref:"#/components/schemas/SessionScopes"}}],examples:[{name:"wallet_sessionChangedExample",description:"Example of a wallet_sessionChanged notification.",params:[{name:"sessionScopes",value:{"eip155:1337":{accounts:["eip155:1337:0x5cfe73b6021e818b776b421b1c4db2474086a7e1"],methods:["wallet_watchAsset","eth_sendTransaction","eth_decrypt","eth_getEncryptionPublicKey","web3_clientVersion","eth_subscribe","eth_unsubscribe","eth_blockNumber","eth_call","eth_chainId","eth_estimateGas","eth_feeHistory","eth_gasPrice","eth_getBalance","eth_getBlockByHash","eth_getBlockByNumber","eth_getBlockTransactionCountByHash","eth_getBlockTransactionCountByNumber","eth_getCode","eth_getFilterChanges","eth_getFilterLogs","eth_getLogs","eth_getProof","eth_getStorageAt","eth_getTransactionByBlockHashAndIndex","eth_getTransactionByBlockNumberAndIndex","eth_getTransactionByHash","eth_getTransactionCount","eth_getTransactionReceipt","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_newBlockFilter","eth_newFilter","eth_newPendingTransactionFilter","eth_sendRawTransaction","eth_syncing","eth_uninstallFilter"],notifications:["eth_subscription"]},wallet:{accounts:[],methods:["wallet_registerOnboarding","wallet_scanQRCode"],notifications:[]},"wallet:eip155":{accounts:["wallet:eip155:0x5cfe73b6021e818b776b421b1c4db2474086a7e1"],methods:["wallet_addEthereumChain","personal_sign","eth_signTypedData_v4"],notifications:[]}}}]}]},{name:"wallet_getSession",description:"The `wallet_getSession` method returns an active session.",params:[],result:{name:"wallet_getSessionResult",schema:{type:"object",properties:{sessionScopes:{$ref:"#/components/schemas/SessionScopes"}}}},examples:[{name:"wallet_getSessionExample",description:"Example of a getSession request.",params:[],result:{name:"wallet_getSessionResultExample",value:{sessionScopes:{"eip155:1337":{accounts:["eip155:1337:0x5cfe73b6021e818b776b421b1c4db2474086a7e1"],methods:["wallet_watchAsset","eth_sendTransaction","eth_decrypt","eth_getEncryptionPublicKey","web3_clientVersion","eth_subscribe","eth_unsubscribe","eth_blockNumber","eth_call","eth_chainId","eth_estimateGas","eth_feeHistory","eth_gasPrice","eth_getBalance","eth_getBlockByHash","eth_getBlockByNumber","eth_getBlockTransactionCountByHash","eth_getBlockTransactionCountByNumber","eth_getCode","eth_getFilterChanges","eth_getFilterLogs","eth_getLogs","eth_getProof","eth_getStorageAt","eth_getTransactionByBlockHashAndIndex","eth_getTransactionByBlockNumberAndIndex","eth_getTransactionByHash","eth_getTransactionCount","eth_getTransactionReceipt","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_newBlockFilter","eth_newFilter","eth_newPendingTransactionFilter","eth_sendRawTransaction","eth_syncing","eth_uninstallFilter"],notifications:["eth_subscription"]},wallet:{accounts:[],methods:["wallet_registerOnboarding","wallet_scanQRCode"],notifications:[]},"wallet:eip155":{accounts:["wallet:eip155:0x5cfe73b6021e818b776b421b1c4db2474086a7e1"],methods:["wallet_addEthereumChain","personal_sign","eth_signTypedData_v4"],notifications:[]}}}}}]},{name:"wallet_createSession",paramStructure:"by-name",params:[{name:"requiredScopes",description:"Scopes that the wallet must support in order to be used with this provider.",schema:{type:"object",patternProperties:{"[-a-z0-9]{3,8}(:[-_a-zA-Z0-9]{1,32})?":{$ref:"#/components/schemas/Scope"}}}},{name:"optionalScopes",description:"Scopes that the wallet may support in order to be used with this provider.",schema:{type:"object",patternProperties:{"[-a-z0-9]{3,8}(:[-_a-zA-Z0-9]{1,32})?":{$ref:"#/components/schemas/Scope"}}}},{name:"sessionProperties",description:"Properties that the wallet may use to determine if the session is valid.",schema:{type:"object",properties:{expiry:{type:"string",format:"date-time"}}}}],result:{name:"wallet_createSessionResult",schema:{type:"object",properties:{sessionScopes:{$ref:"#/components/schemas/SessionScopes"},sessionProperties:{type:"object",properties:{expiry:{type:"string",format:"date-time"}}}}}},examples:[{name:"wallet_createSessionEthExample",description:"Example of a createSession request.",params:[{name:"requiredScopes",value:{"eip155:1337":{methods:["wallet_watchAsset","eth_sendTransaction","eth_decrypt","eth_getEncryptionPublicKey","web3_clientVersion","eth_subscribe","eth_unsubscribe","eth_blockNumber","eth_call","eth_chainId","eth_estimateGas","eth_feeHistory","eth_gasPrice","eth_getBalance","eth_getBlockByHash","eth_getBlockByNumber","eth_getBlockTransactionCountByHash","eth_getBlockTransactionCountByNumber","eth_getCode","eth_getFilterChanges","eth_getFilterLogs","eth_getLogs","eth_getProof","eth_getStorageAt","eth_getTransactionByBlockHashAndIndex","eth_getTransactionByBlockNumberAndIndex","eth_getTransactionByHash","eth_getTransactionCount","eth_getTransactionReceipt","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_newBlockFilter","eth_newFilter","eth_newPendingTransactionFilter","eth_sendRawTransaction","eth_syncing","eth_uninstallFilter"],notifications:["eth_subscription"]},wallet:{methods:["wallet_registerOnboarding","wallet_scanQRCode"],notifications:[]},"wallet:eip155":{methods:["wallet_addEthereumChain","personal_sign","eth_signTypedData_v4"],notifications:[]}}},{name:"sessionProperties",value:{expiry:"2022-12-24T17:07:31+00:00"}}],result:{name:"wallet_createSessionResultExample",value:{sessionScopes:{"eip155:1337":{accounts:["eip155:1337:0x5cfe73b6021e818b776b421b1c4db2474086a7e1"],methods:["wallet_watchAsset","eth_sendTransaction","eth_decrypt","eth_getEncryptionPublicKey","web3_clientVersion","eth_subscribe","eth_unsubscribe","eth_blockNumber","eth_call","eth_chainId","eth_estimateGas","eth_feeHistory","eth_gasPrice","eth_getBalance","eth_getBlockByHash","eth_getBlockByNumber","eth_getBlockTransactionCountByHash","eth_getBlockTransactionCountByNumber","eth_getCode","eth_getFilterChanges","eth_getFilterLogs","eth_getLogs","eth_getProof","eth_getStorageAt","eth_getTransactionByBlockHashAndIndex","eth_getTransactionByBlockNumberAndIndex","eth_getTransactionByHash","eth_getTransactionCount","eth_getTransactionReceipt","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_newBlockFilter","eth_newFilter","eth_newPendingTransactionFilter","eth_sendRawTransaction","eth_syncing","eth_uninstallFilter"],notifications:["eth_subscription"]},wallet:{accounts:[],methods:["wallet_registerOnboarding","wallet_scanQRCode"],notifications:[]},"wallet:eip155":{accounts:["wallet:eip155:0x5cfe73b6021e818b776b421b1c4db2474086a7e1"],methods:["wallet_addEthereumChain","personal_sign","eth_signTypedData_v4"],notifications:[]},sessionProperties:{expiry:"2022-11-31T17:07:31+00:00"}}}}},{name:"wallet_createSessionEthUnsupportedMethodsExample",description:"Example of a createSession request with unsupported eip155 methods.",params:[{name:"optionalScopes",value:{"eip155:1337":{methods:["not_supported"],notifications:[]},wallet:{methods:[],notifications:[]},"wallet:eip155":{methods:[],notifications:[]}}},{name:"sessionProperties",value:{expiry:"2022-12-24T17:07:31+00:00"}}],result:{name:"wallet_createSessionEthUnsupportedMethodsResultExample",value:{sessionScopes:{"eip155:1337":{accounts:["eip155:1337:0x5cfe73b6021e818b776b421b1c4db2474086a7e1"],methods:["wallet_watchAsset","eth_sendTransaction","eth_decrypt","eth_getEncryptionPublicKey","web3_clientVersion","eth_subscribe","eth_unsubscribe","eth_blockNumber","eth_call","eth_chainId","eth_estimateGas","eth_feeHistory","eth_gasPrice","eth_getBalance","eth_getBlockByHash","eth_getBlockByNumber","eth_getBlockTransactionCountByHash","eth_getBlockTransactionCountByNumber","eth_getCode","eth_getFilterChanges","eth_getFilterLogs","eth_getLogs","eth_getProof","eth_getStorageAt","eth_getTransactionByBlockHashAndIndex","eth_getTransactionByBlockNumberAndIndex","eth_getTransactionByHash","eth_getTransactionCount","eth_getTransactionReceipt","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_newBlockFilter","eth_newFilter","eth_newPendingTransactionFilter","eth_sendRawTransaction","eth_syncing","eth_uninstallFilter"],notifications:["eth_subscription"]},wallet:{accounts:[],methods:["wallet_registerOnboarding","wallet_scanQRCode"],notifications:[]},"wallet:eip155":{accounts:["wallet:eip155:0x5cfe73b6021e818b776b421b1c4db2474086a7e1"],methods:["wallet_addEthereumChain","personal_sign","eth_signTypedData_v4"],notifications:[]}},sessionProperties:{expiry:"2022-11-31T17:07:31+00:00"}}}},{name:"wallet_createSessionUnsupportedScopesExample",description:"Example of a createSession request with unsupported scopes.",params:[{name:"requiredScopes",value:{foobar:{methods:["eth_getBalance"],notifications:["eth_subscription"]}}}],result:{name:"wallet_createSessionUnsupportedScopesResultExample",value:{sessionScopes:{"eip155:1":{accounts:["eip155:1:0x5cfe73b6021e818b776b421b1c4db2474086a7e1"],methods:["wallet_watchAsset","eth_sendTransaction","eth_decrypt","eth_getEncryptionPublicKey","web3_clientVersion","eth_subscribe","eth_unsubscribe","eth_blockNumber","eth_call","eth_chainId","eth_estimateGas","eth_feeHistory","eth_gasPrice","eth_getBalance","eth_getBlockByHash","eth_getBlockByNumber","eth_getBlockTransactionCountByHash","eth_getBlockTransactionCountByNumber","eth_getCode","eth_getFilterChanges","eth_getFilterLogs","eth_getLogs","eth_getProof","eth_getStorageAt","eth_getTransactionByBlockHashAndIndex","eth_getTransactionByBlockNumberAndIndex","eth_getTransactionByHash","eth_getTransactionCount","eth_getTransactionReceipt","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_newBlockFilter","eth_newFilter","eth_newPendingTransactionFilter","eth_sendRawTransaction","eth_syncing","eth_uninstallFilter"],notifications:["eth_subscription"]},"eip155:59144":{accounts:["eip155:59144:0x5cfe73b6021e818b776b421b1c4db2474086a7e1"],methods:["wallet_watchAsset","eth_sendTransaction","eth_decrypt","eth_getEncryptionPublicKey","web3_clientVersion","eth_subscribe","eth_unsubscribe","eth_blockNumber","eth_call","eth_chainId","eth_estimateGas","eth_feeHistory","eth_gasPrice","eth_getBalance","eth_getBlockByHash","eth_getBlockByNumber","eth_getBlockTransactionCountByHash","eth_getBlockTransactionCountByNumber","eth_getCode","eth_getFilterChanges","eth_getFilterLogs","eth_getLogs","eth_getProof","eth_getStorageAt","eth_getTransactionByBlockHashAndIndex","eth_getTransactionByBlockNumberAndIndex","eth_getTransactionByHash","eth_getTransactionCount","eth_getTransactionReceipt","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_newBlockFilter","eth_newFilter","eth_newPendingTransactionFilter","eth_sendRawTransaction","eth_syncing","eth_uninstallFilter"],notifications:["eth_subscription"]}}},sessionProperties:{expiry:"2022-11-31T17:07:31+00:00"}}}],errors:[{$ref:"#/components/errors/UnknownError"},{code:5100,message:"Requested networks are not supported"},{code:5101,message:"Requested methods are not supported"},{code:5102,message:"Requested notifications are not supported"},{code:5300,message:"Invalid scopedProperties requested"},{code:5301,message:"scopedProperties can only be outside of sessionScopes"},{code:5302,message:"Invalid sessionProperties requested"}]}],components:{errors:{UnknownError:{code:5e3,message:"Unknown error with request"}},schemas:{SessionScopes:{type:"object",patternProperties:{"[-a-z0-9]{3,8}(:[-_a-zA-Z0-9]{1,32})?":{$ref:"#/components/schemas/Scope"}}},ScopeString:{type:"string",pattern:"[-a-z0-9]{3,8}(:[-_a-zA-Z0-9]{1,32})?"},Scope:{type:"object",title:"Scope",description:"Scope for a multi-chain connection",additionalProperties:!0,required:["notifications","methods"],properties:{scopes:{type:"array",items:{$ref:"#/components/schemas/ScopeString"}},methods:{description:"Methods that the wallet must support in order to be used with this provider.",type:"array",items:{type:"string"}},notifications:{description:"Notifications that the wallet must support in order to be used with this provider.",type:"array",items:{type:"string"}},rpcEndpoints:{description:"JSON-RPC endpoints for this namespace.",type:"array",items:{type:"string",format:"uri"}},rpcDocuments:{type:"array",description:"OpenRPC documents that define RPC methods in which to anchor the methods authorized in a CAIP-25 interaction.",items:{type:"string",format:"uri"}}}}}}}}}},{package:"@metamask/multichain-api-middleware>@metamask/api-specs",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/api-specs/dist/build/multichain-openrpc.json"}],[2109,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){t.exports={openrpc:"1.2.4",info:{title:"JSON-RPC API",version:"1.0.0",description:"This section provides an interactive reference for MetaMask's Wallet JSON-RPC API. The API builds on a set of standard Ethereum methods with MetaMask-specific enhancements, and is designed for seamless integration into dapps."},methods:[{name:"wallet_addEthereumChain",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Multichain"}],summary:"Adds an Ethereum chain to the wallet.",description:"Creates a confirmation asking the user to add the specified chain to the wallet application. The caller must specify a chain ID and some chain metadata. Specified by [EIP-3085](https://eips.ethereum.org/EIPS/eip-3085).",params:[{name:"Chain",schema:{$ref:"#/components/schemas/AddEthereumChainParameter"}}],errors:[{code:-32602,message:"Expected null or array with at least one valid string HTTPS URL 'blockExplorerUrl'. Received: ${blockExplorerUrls}"},{code:-32602,message:"Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${chainId}"},{code:-32602,message:'Invalid chain ID "${_chainId}": numerical value greater than max safe value. Received:\n${chainId}'},{code:-32602,message:"May not specify default MetaMask chain."},{code:-32602,message:"Expected 2-6 character string 'nativeCurrency.symbol'. Received:\n${ticker}"},{code:-32602,message:"nativeCurrency.symbol does not match currency symbol for a network the user already has added with the same chainId. Received:\n${ticker}"}],result:{name:"Null response",description:"This method returns `null` if the chain is added.",schema:{type:"null"}},examples:[{name:"wallet_addEthereumChain example",params:[{name:"Chain",value:{chainId:"0x64",chainName:"Gnosis",rpcUrls:["https://rpc.gnosischain.com"],iconUrls:["https://xdaichain.com/fake/example/url/xdai.svg","https://xdaichain.com/fake/example/url/xdai.png"],nativeCurrency:{name:"XDAI",symbol:"XDAI",decimals:18},blockExplorerUrls:["https://blockscout.com/poa/xdai/"]}}],result:{name:"Null response",value:"null"}}]},{name:"wallet_switchEthereumChain",tags:[{$ref:"#/components/tags/MetaMask"}],summary:"Switches the wallet's active Ethereum chain.",description:"Requests that the wallet switches its active Ethereum chain. Specified by [EIP-3326](https://eips.ethereum.org/EIPS/eip-3326).",params:[{name:"Chain",schema:{title:"Chain",description:"Object containing the chain ID to switch to.",type:"object",required:["chainId"],properties:{chainId:{description:"The chain ID as a `0x`-prefixed hexadecimal string, as returned by the `eth_chainId` method.",type:"string"}}}}],result:{name:"Null response",description:"This method returns `null` if the active chain is switched.",schema:{type:"null"}},errors:[{code:4902,message:"Unrecognized chain ID. Try adding the chain using wallet_addEthereumChain first."}],examples:[{name:"wallet_switchEthereumChain example",params:[{name:"Chain",value:{chainId:"0x64"}}],result:{name:"Null response",value:"null"}}]},{name:"wallet_getPermissions",tags:[{$ref:"#/components/tags/MetaMask"}],summary:"Gets the user's permissions.",description:"Gets the user's permissions. Specified by [EIP-2255](https://eips.ethereum.org/EIPS/eip-2255).",params:[],result:{name:"Permissions list",schema:{$ref:"#/components/schemas/PermissionsList"}},examples:[{name:"wallet_getPermissions example",params:[],result:{name:"Permission list",value:{eth_accounts:{}}}}]},{name:"wallet_requestPermissions",tags:[{$ref:"#/components/tags/MetaMask"}],summary:"Requests additional permissions.",description:"Requests additional permissions from the user. This method accepts a single permission per call. Specified by [EIP-2255](https://eips.ethereum.org/EIPS/eip-2255).",params:[{name:"Permission",required:!0,schema:{title:"Permission",description:"Object containing the permission to request.",type:"object",properties:{permission_name:{type:"object",description:"The permission object. `permission_name` is the name of the permission being requested.",additionalProperties:!0}}}}],result:{name:"Permissions list",schema:{$ref:"#/components/schemas/PermissionsList"}},examples:[{name:"wallet_requestPermissions example",params:[{name:"Permission",value:{eth_accounts:{}}}],result:{name:"Permission list",value:{eth_accounts:{}}}}],errors:[{$ref:"#/components/errors/UserRejected"}]},{name:"wallet_revokePermissions",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Experimental"}],summary:"Revokes the current dapp permissions.",description:"Revokes previously granted permissions for the current dapp identified by its origin. This method accepts a single permission per call. Specified by [MIP-2](https://github.com/MetaMask/metamask-improvement-proposals/blob/main/MIPs/mip-2.md) and only available for the MetaMask browser extension.",params:[{name:"Permission",required:!0,schema:{title:"Permission",description:"Object containing the permission to revoke.",type:"object",properties:{permission_name:{type:"object",description:"The permission object. `permission_name` is the name of the permission being revoked.",additionalProperties:!0}}}}],result:{name:"Null response",description:"This method returns `null` if the permission is revoked.",schema:{type:"null"}},errors:[],examples:[{name:"wallet_revokePermissions example",params:[{name:"Permission",value:{eth_accounts:{}}}],result:{name:"Null response",value:"null"}}]},{name:"personal_sign",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Restricted"},{$ref:"#/components/tags/Multichain"}],summary:"Presents a plain text signature challenge to the user.",description:"Presents a plain text signature challenge to the user and returns the signed response. Prepends a safe prefix to the signed message to prevent the challenge tricking users into signing a financial transaction. <br><br> MetaMask implements `personal_sign` similarly to the Go Ethereum client's `eth_sign` implementation. MetaMask's `personal_sign` doesn't accept a password. <br><br> This method requires that the user has granted permission to interact with their account first, so make sure to call `eth_requestAccounts` (recommended) or `wallet_requestPermissions` first.",deprecated:!1,params:[{name:"Challenge",required:!0,description:"A hex-encoded UTF-8 string to present to the user. See how to encode a string like this in the [`browser-string-hexer`](https://github.com/danfinlay/browser-string-hexer) module.",schema:{type:"string",pattern:"^0x[a-fA-F\\d]+$"}},{name:"Address",required:!0,description:"The address of the requested signing account.",schema:{type:"string",pattern:"^0x[0-9a-fA-F]{40}$"}}],result:{name:"Signature",description:"A hex-encoded signature.",schema:{type:"string",pattern:"^0x[0-9a-f]*$"}},examples:[{name:"personal_sign example",params:[{name:"Challenge",value:"0x506c65617365207369676e2074686973206d65737361676520746f20636f6e6669726d20796f7572206964656e746974792e"},{name:"Address",value:"0x4B0897b0513FdBeEc7C469D9aF4fA6C0752aBea7"}],result:{name:"Signature",value:"0x43d7215ebe96c09a5adac69fc76dea5647286b501954ea273e417cf65e6c80e1db4891826375a7de02467a3e01caf125f64c851a8e9ee9467fd6f7e83523b2115bed8e79d527a85e28a36807d79b85fc551b5c15c1ead2e43456c31f565219203db2aed86cb3601b33ec3b410836d4be7718c6148dc9ac82ecc0a04c5edecd8914"}}]},{name:"eth_signTypedData_v4",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Restricted"},{$ref:"#/components/tags/Multichain"}],summary:"Presents a structured data message for the user to sign.",description:"Presents a data message for the user to sign in a structured and readable format and returns the signed response. Introduced by [EIP-712](https://eips.ethereum.org/EIPS/eip-712). This method requires that the user has granted permission to interact with their account first, so make sure to call `eth_requestAccounts` (recommended) or `wallet_requestPermissions` first.",params:[{name:"Address",required:!0,description:"The address of the requested signing account.",schema:{$ref:"#/components/schemas/address"}},{name:"TypedData",required:!0,schema:{$ref:"#/components/schemas/TypedData"}}],result:{name:"Signature",schema:{$ref:"#/components/schemas/bytes"}},examples:[{name:"eth_SignTypedData_v4 example",params:[{name:"Address",value:"0x0000000000000000000000000000000000000000"},{name:"TypedData",value:{types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Person:[{name:"name",type:"string"},{name:"wallet",type:"address"}],Mail:[{name:"from",type:"Person"},{name:"to",type:"Person"},{name:"contents",type:"string"}]},primaryType:"Mail",domain:{name:"Ether Mail",version:"1",chainId:1,verifyingContract:"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"},message:{from:{name:"Cow",wallet:"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"},to:{name:"Bob",wallet:"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"},contents:"Hello, Bob!"}}}],result:{name:"Signature",value:"0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b915621c"}}]},{name:"wallet_registerOnboarding",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Multichain"}],summary:"Redirects the user back to the site after onboarding.",description:"Registers the requesting site with MetaMask as the initiator of onboarding, enabling MetaMask to redirect the user back to the site after onboarding. Returns a promise that resolves to `true`, or rejects if there's an error. Instead of calling this method directly, you should use the [`@metamask/onboarding`](https://github.com/MetaMask/metamask-onboarding) library.",params:[],result:{name:"RegisterOnboardingResult",description:"`true` if the request was successful, `false` otherwise.",schema:{type:"boolean"}}},{name:"wallet_watchAsset",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Experimental"},{$ref:"#/components/tags/Multichain"}],summary:"Tracks a token in MetaMask.",description:"Requests that the user track the specified token in MetaMask. Returns a boolean indicating if the token was successfully added. Once added, the token is indistinguishable from those added using legacy methods, such as a centralized registry. Introduced by [EIP-747](https://eips.ethereum.org/EIPS/eip-747).",paramStructure:"by-name",params:[{name:"type",schema:{type:"string",description:"Supports ERC-20, ERC-721, and ERC-1155 tokens. Support for ERC-721 and ERC-1155 tokens is experimental and currently only available on the extension (not on mobile). See [MIP-1](https://github.com/MetaMask/metamask-improvement-proposals/blob/main/MIPs/mip-1.md) and [MIP proposal lifecycle](https://github.com/MetaMask/metamask-improvement-proposals/blob/main/PROCESS-GUIDE.md#proposal-lifecycle) for more information.",enum:["ERC20","ERC721","ERC1155"]},required:!0},{name:"options",schema:{title:"WatchAssetOptions",type:"object",required:["address"],properties:{address:{description:"The address of the token contract.",type:"string"},symbol:{description:"A ticker symbol or shorthand, up to 11 characters (optional for ERC-20 tokens).",minLength:2,maxLength:11,type:"string"},decimals:{description:"The number of token decimals (optional for ERC-20 tokens).",type:"number"},image:{description:"A string URL of the token logo (optional for ERC-20 tokens).",type:"string"},tokenId:{description:"The unique identifier of the NFT (required for ERC-721 and ERC-1155 tokens).",type:"string"}}}}],errors:[{code:-32602,message:"Must specify address, symbol, and decimals."},{code:-32602,message:"Invalid symbol: not a string."},{code:-32602,message:"Invalid symbol '${symbol}': longer than 11 characters."},{code:-32602,message:"Invalid decimals '${decimals}': must be 0 <= 36."},{code:-32602,message:"Invalid address '${address}'."},{code:-32602,message:"Asset type is required."},{code:-32602,message:"Both address and tokenId are required."},{code:-32602,message:"Invalid address."},{code:-32e3,message:"Suggested NFT is not owned by the selected account."},{code:-32e3,message:"Suggested NFT of type ${standard} does not match received type ${type}."},{code:-32002,message:"Unable to verify ownership. Possibly because the standard is not supported or the user's currently selected network does not match the chain of the asset in question."}],result:{name:"WatchAssetResult",description:"`true` if the token was added, `false` otherwise.",schema:{type:"boolean"}},examples:[{name:"wallet_watchAsset ERC-20 example",params:[{name:"type",value:"ERC20"},{name:"options",value:{address:"0xb60e8dd61c5d32be8058bb8eb970870f07233155",symbol:"FOO",decimals:18,image:"https://foo.io/token-image.svg"}}],result:{name:"wallet_watchAssetExampleResult",value:!0}},{name:"wallet_watchAsset ERC-721 example",params:[{name:"type",value:"ERC721"},{name:"options",value:{address:"0x123456789abcdef0123456789abcdef01234567",tokenId:"42"}}],result:{name:"wallet_watchAssetERC721ExampleResult",value:!0}},{name:"wallet_watchAsset ERC-1155 example",params:[{name:"type",value:"ERC1155"},{name:"options",value:{address:"0xabcdef0123456789abcdef0123456789abcdef01",tokenId:"1337"}}],result:{name:"wallet_watchAssetERC1155ExampleResult",value:!0}}]},{name:"wallet_scanQRCode",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Mobile"},{$ref:"#/components/tags/Multichain"}],summary:"Requests that the user scan a QR code.",description:"Requests that the user scan a QR code using their device camera. Introduced by [EIP-945](https://github.com/ethereum/EIPs/issues/945).",params:[{name:"regex",required:!1,description:"A regular expression (regex) string for matching arbitrary QR code strings.",schema:{type:"string",title:"regex"}}],result:{name:"ScanQRCodeResult",description:"A string corresponding to the scanned QR code. If a regex string is provided, the resulting string matches it. If no regex string is provided, the resulting string matches an Ethereum address. If neither condition is met, the method returns an error.",schema:{type:"string",title:"ScanQRCodeResult"}}},{name:"eth_requestAccounts",tags:[{$ref:"#/components/tags/MetaMask"}],description:"Requests that the user provide an Ethereum address to be identified by. This method is specified by [EIP-1102](https://eips.ethereum.org/EIPS/eip-1102). Internally, this method calls `wallet_requestPermissions` for permission to call `eth_accounts`.",summary:"Requests that the user provide an Ethereum address.",params:[],result:{name:"AddressList",schema:{type:"array",items:{$ref:"#/components/schemas/address"}}},errors:[{$ref:"#/components/errors/UserRejected"}],examples:[{name:"eth_requestAccounts example",params:[],result:{name:"eth_requestAccountsExampleResult",value:"0xa77392123a1085f75e62eec7dea7e0e1e5142d5f"}}]},{name:"eth_accounts",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Restricted"}],description:"Returns a list of addresses for the accounts owned by the user. This method requires calling `wallet_requestPermissions` for permission. We recommend using `eth_requestAccounts`, which internally calls `wallet_requestPermission`.",summary:"Gets a list of addresses for the user's accounts.",params:[],result:{name:"AddressList",schema:{type:"array",items:{$ref:"#/components/schemas/address"}}},examples:[{name:"eth_accounts example",params:[],result:{name:"eth_accountsExampleResult",value:"0xa77392123a1085f75e62eec7dea7e0e1e5142d5f"}}]},{name:"eth_sendTransaction",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Restricted"},{$ref:"#/components/tags/Multichain"}],description:"Creates a new wallet confirmation to make an Ethereum transaction from the user's account. This method requires that the user has granted permission to interact with their account first, so make sure to call `eth_requestAccounts` (recommended) or `wallet_requestPermissions` first.",summary:"Initiates a new transaction.",params:[{name:"Transaction",required:!0,description:"The transaction object to sign and send.",schema:{type:"object",title:"Transaction",description:"The parameters to customize a transaction. If a `to` address is not provided, it will be assumed that the transaction is a contract creation transaction, and the `data` field of the transaction will be used as the contract initialization code. `gasPrice` cannot be used together with `maxPriorityFeePerGas` and `maxFeePerGas`.",required:["from"],if:{properties:{to:{not:{type:"string"}}}},then:{required:["data"]},properties:{to:{title:"to address",$ref:"#/components/schemas/address"},from:{title:"from address",$ref:"#/components/schemas/address"},gas:{title:"gas limit",$ref:"#/components/schemas/uint"},value:{title:"value",$ref:"#/components/schemas/uint"},data:{title:"data",$ref:"#/components/schemas/bytes"},gasPrice:{title:"gas price",description:"The gas price the sender is willing to pay to miners in wei. Used in pre-1559 transactions.",$ref:"#/components/schemas/uint"},maxPriorityFeePerGas:{title:"max priority fee per gas",description:"Maximum fee per gas the sender is willing to pay to miners in wei. Used in 1559 transactions.",$ref:"#/components/schemas/uint"},maxFeePerGas:{title:"max fee per gas",description:"The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei. Used in 1559 transactions.",$ref:"#/components/schemas/uint"}}}}],result:{name:"TransactionHash",description:"The transaction hash of the sent transaction.",schema:{$ref:"#/components/schemas/bytes32"}},errors:[{code:4100,message:"The requested account and/or method has not been authorized by the user."}],examples:[{name:"sendTransaction",params:[{name:"Transaction",value:{to:"0x4B0897b0513FdBeEc7C469D9aF4fA6C0752aBea7",from:"0xDeaDbeefdEAdbeefdEadbEEFdeadbeefDEADbEEF",gas:"0x76c0",value:"0x8ac7230489e80000",data:"0x",gasPrice:"0x4a817c800"}}],result:{name:"eth_sendTransactionExampleResult",value:"0x4e306b5a5a37532e1734503f7d2427a86f2c992fbe471f5be403b9f734e667c8"}}]},{name:"eth_decrypt",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Restricted"},{$ref:"#/components/tags/Deprecated"}],summary:"Decrypts an encrypted message.",description:"This method is deprecated and may be removed in the future.\n\n Requests that MetaMask decrypt the specified encrypted message.\n The message must have been encrypted using the public encryption key of the specified Ethereum address.\n Returns a promise that resolves to the decrypted message, or rejects if the decryption attempt fails.",params:[{name:"EncryptedMessage",required:!0,description:"The encrypted message to decrypt.",schema:{type:"string"}},{name:"Address",required:!0,description:"The address of the Ethereum account that can decrypt the message.",schema:{$ref:"#/components/schemas/address"}}],result:{name:"PermissionsList",schema:{$ref:"#/components/schemas/PermissionsList"}},errors:[{code:4100,message:"The requested account and/or method has not been authorized by the user."}],examples:[{name:"decryptExample",params:[{name:"EncryptedMessage",value:"0x7b2276657273696f6e223a227832353531392d7873616c736132302d706f6c7931333035222c226e6f6e6365223a2243533967507076467071765358704655416679726a7179774e35302b7a747766222c22657068656d5075626c69634b6579223a224372774b61456d2f4b356d6d714239764c376f5872636d6441417757764479324f784c3333527135576e553d222c2263697068657274657874223a2248347a65336e7177572b753174663956343945506167454e343872774f766b6952676244566e47587a38493d227d"},{name:"Address",value:"0xD1F5279BE4B4dD94133A23deE1B23F5bfC0Db1d0"}],result:{name:"eth_decryptExampleResult",value:"Hello, Ethereum!"}}]},{name:"eth_getEncryptionPublicKey",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Restricted"},{$ref:"#/components/tags/Deprecated"}],summary:"Gets a public key used for encryption.",description:"This method is deprecated and may be removed in the future.\n\n Requests that the user share their public encryption key.\n Returns a public encryption key, or rejects if the user denies the request.\n The public key is computed from entropy associated with the specified user account, using the NaCl implementation of the `X25519_XSalsa20_Poly1305` algorithm.",params:[{name:"Address",required:!0,description:"The address of the Ethereum account that can decrypt the message.",schema:{$ref:"#/components/schemas/address"}}],result:{name:"EncryptionKey",schema:{type:"string"}},examples:[{name:"eth_getEncryptionPublicKey",params:[{name:"Address",value:"0x4B0897b0513FdBeEc7C469D9aF4fA6C0752aBea7"}],result:{name:"eth_getEncryptionPublicKeyExampleResult",value:"0x04bfcab3b7ca7e8b3f3b62b2f7f77e9e4b68080bbf8f0f4a1c8f890864d2c7c1d3c45d8b2e3f5f1c27dfeea4c2f5733e90bfc7484e2a690aa9b8ac4559d2e6a8d7"}}]},{name:"web3_clientVersion",tags:[{$ref:"#/components/tags/Ethereum"},{$ref:"#/components/tags/Multichain"}],description:"Returns the current MetaMask client version. This differs slightly per client. For example, the browser extension returns a string like `MetaMask/v10.33.1`, while the mobile app returns a string like `MetaMask/8.1.2/Mobile`.",summary:"Current client version.",params:[],examples:[{name:"MetaMaskClientVersionExample",description:"Example version response from MetaMask.",params:[],result:{name:"MetaMaskClientVersion",description:"The current client version.",value:"MetaMask/v10.33.1"}},{name:"MetaMaskMobileClientVersionExample",description:"Example version response from MetaMask Mobile.",params:[],result:{name:"MetaMaskClientVersion",description:"The current client version.",value:"MetaMask/8.1.2/Mobile"}}],result:{name:"CurrentVersion",description:"The current client version.",schema:{title:"CurrentClientVersion",type:"string"}}},{name:"eth_subscribe",tags:[{$ref:"#/components/tags/Ethereum"},{$ref:"#/components/tags/Multichain"}],summary:"Subscribes to specific Ethereum events, returning a subscription ID used to receive notifications.",description:"Subscribes to specific events on the Ethereum network, such as new blocks, or logs. When an event occurs, a notification is sent to the client with the corresponding data. To stop receiving notifications, the client can unsubscribe using `eth_unsubscribe`.",params:[{name:"subscriptionType",required:!0,schema:{title:"subscriptionType",type:"string",enum:["newHeads","logs"],description:"The type of subscription to create. Must be one of the following:\n1. `newHeads` - New block headers.\n2. `logs` - Logs matching a filter object."}},{name:"filterOptions",required:!1,schema:{title:"filterOptions",type:"object",description:"(Optional) An object containing filter options specific to the subscription type. Only applicable for the `logs` subscription type.",required:["topics"],properties:{address:{type:"string",description:"(Optional) A single address or an array of addresses to filter the logs by."},topics:{type:"array",description:"An array of topics to filter the logs by.",items:{type:"string"}}}}}],result:{name:"subscriptionId",schema:{type:"string"},description:"A unique subscription ID that can be used to unsubscribe or identify incoming notifications."},examples:[{name:"eth_subscribe example",params:[{name:"subscriptionType",value:"newHeads"}],result:{name:"eth_subscribeExampleResult",value:"0x1b84f2cdf29a204b79e450c1939b30c1"}}]},{name:"eth_unsubscribe",tags:[{$ref:"#/components/tags/Ethereum"},{$ref:"#/components/tags/Multichain"}],summary:"Unsubscribes from a specific Ethereum event, using the subscription ID provided by `eth_subscribe`.",description:"Unsubscribes from specific events on the Ethereum network, to which the client has been previously subscribed using `eth_subscribe`. The client must provide the subscription ID obtained from `eth_subscribe` to stop receiving notifications for the corresponding event.",params:[{name:"subscriptionId",required:!0,schema:{type:"string",description:"The unique subscription ID obtained from `eth_subscribe`, used to identify the subscription to be unsubscribed."}}],result:{name:"unsubscribed",schema:{type:"boolean"},description:"A boolean value indicating whether the unsubscription was successful."},examples:[{name:"eth_unsubscribe example",params:[{name:"subscriptionId",value:"0x1b84f2cdf29a204b79e450c1939b30c1"}],result:{name:"eth_unsubscribeExampleResult",value:!0}}]},{name:"wallet_swapAsset",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Experimental"}],summary:"Allows dApps to request MetaMask to perform a token swap operation.",description:"This method enables dApps to initiate a token swap directly within MetaMask, improving the user experience by streamlining the process of swapping tokens. The method accepts parameters for the source and destination tokens and initiates a token swap operation.",params:[{name:"SwapAssetParameter",required:!0,schema:{title:"SwapAssetParameter",type:"object",required:["fromToken","toToken","userAddress"],properties:{fromToken:{type:"array",items:{type:"object",required:["address"],properties:{address:{type:"string",description:"The CAIP-10 formatted address of the source token.",$ref:"#/components/schemas/Caip10Address"},value:{type:"string",description:"(Optional) The amount of the source token to be swapped, in wei, as a hexadecimal string, defaults to 0.",nullable:!0}}}},toToken:{type:"object",required:["address"],properties:{address:{type:"string",description:"The CAIP-10 formatted address of the destination token.",$ref:"#/components/schemas/Caip10Address"}}},userAddress:{type:"string",description:"The CAIP-10 formatted address of the user performing the swap.",$ref:"#/components/schemas/Caip10Address"}}}}],result:{name:"SwapAssetResult",description:"A boolean indicating if the swap was initiated successfully.",schema:{type:"boolean"}},errors:[{code:6e3,message:"Swap is not available on this chain {{chainName}}"},{code:-32600,message:"Cross-chain swaps are currently not supported. Both fromToken and toToken must be on the same blockchain."}],examples:[{name:"wallet_swapAsset example",params:[{name:"SwapAssetParameter",value:{from:[{tokenAddress:"0x1234567890abcdefABCDEF1234567890ABCDEF",value:"0xDE0B6B3A7640000"}],to:{tokenAddress:"0xabcdef1234567890ABCDEF1234567890abcdef"},userAddress:"0x0000000000000000000000000000000000000000"}}],result:{name:"wallet_swapAssetExampleResult",value:!0}}]},{name:"eth_blockNumber",summary:"Returns the number of most recent block.",params:[],result:{name:"Block number",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_blockNumber example",params:[],result:{name:"Block number",value:"0x2377"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_call",summary:"Executes a new message call immediately without creating a transaction on the block chain.",params:[{name:"Transaction",required:!0,schema:{$ref:"#/components/schemas/GenericTransaction"}},{name:"Block",required:!1,schema:{$ref:"#/components/schemas/BlockNumberOrTagOrHash"}}],result:{name:"Return data",schema:{$ref:"#/components/schemas/bytes"}},examples:[{name:"eth_call example",params:[{name:"Transaction",value:{to:"0x69498dd54bd25aa0c886cf1f8b8ae0856d55ff13",value:"0x1"}},{name:"Block",value:"latest"}],result:{name:"Return data",value:"0x"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_chainId",summary:"Returns the chain ID of the current network.",params:[],result:{name:"Chain ID",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_chainId example",params:[],result:{name:"Chain ID",value:"0x1"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_coinbase",summary:"Returns the client coinbase address.",params:[],result:{name:"Coinbase address",schema:{$ref:"#/components/schemas/address"}},examples:[{name:"eth_coinbase example",params:[],result:{name:"Coinbase address",value:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_estimateGas",summary:"Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.",params:[{name:"Transaction",required:!0,schema:{$ref:"#/components/schemas/GenericTransaction"}},{name:"Block",required:!1,schema:{$ref:"#/components/schemas/BlockNumberOrTag"}}],result:{name:"Gas used",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_estimateGas example",params:[{name:"Transaction",value:{from:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73",to:"0x44aa93095d6749a706051658b970b941c72c1d53",value:"0x1"}}],result:{name:"Gas used",value:"0x5208"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_feeHistory",summary:"Transaction fee history",description:"Returns transaction base fee per gas and effective priority fee per gas for the requested/supported block range.",params:[{name:"blockCount",description:"Requested range of blocks. Clients will return less than the requested range if not all blocks are available.",required:!0,schema:{$ref:"#/components/schemas/uint"}},{name:"newestBlock",description:"Highest block of the requested range.",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTag"}},{name:"rewardPercentiles",description:"A monotonically increasing list of percentile values. For each block in the requested range, the transactions will be sorted in ascending order by effective tip per gas and the coresponding effective tip for the percentile will be determined, accounting for gas consumed.",required:!0,schema:{title:"rewardPercentiles",type:"array",items:{title:"rewardPercentile",description:"Floating point value between 0 and 100.",type:"number"}}}],result:{name:"Fee history result",description:"Fee history for the returned block range. This can be a subsection of the requested range if not all blocks are available.",schema:{title:"feeHistoryResults",description:"Fee history results.",type:"object",required:["oldestBlock","baseFeePerGas","gasUsedRatio"],additionalProperties:!1,properties:{oldestBlock:{title:"oldestBlock",description:"Lowest number block of returned range.",$ref:"#/components/schemas/uint"},baseFeePerGas:{title:"baseFeePerGasArray",description:"An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks.",type:"array",items:{$ref:"#/components/schemas/uint"}},baseFeePerBlobGas:{title:"baseFeePerBlobGasArray",description:"An array of block base fees per blob gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-4844 blocks.",type:"array",items:{$ref:"#/components/schemas/uint"}},gasUsedRatio:{title:"gasUsedRatio",description:"An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit.",type:"array",items:{$ref:"#/components/schemas/ratio"}},blobGasUsedRatio:{title:"blobGasUsedRatio",description:"An array of block blob gas used ratios. These are calculated as the ratio of blobGasUsed and the max blob gas per block.",type:"array",items:{$ref:"#/components/schemas/ratio"}},reward:{title:"rewardArray",description:"A two-dimensional array of effective priority fees per gas at the requested block percentiles.",type:"array",items:{title:"rewardPercentile",description:"An array of effective priority fee per gas data points from a single block. All zeroes are returned if the block is empty.",type:"array",items:{title:"rewardPercentile",description:"A given percentile sample of effective priority fees per gas from a single block in ascending order, weighted by gas used. Zeroes are returned if the block is empty.",$ref:"#/components/schemas/uint"}}}}}},examples:[{name:"eth_feeHistory example",params:[{name:"blockCount",value:"0x5"},{name:"newestblock",value:"latest"},{name:"rewardPercentiles",value:[20,30]}],result:{name:"Fee history result",value:{oldestblock:"0x10b52f",baseFeePerGas:["0x3fa63a3f","0x37f999ee","0x3e36f20a","0x4099f79a","0x430d532d","0x46fcd4a4"],baseFeePerBlobGas:["0x7b7609c19","0x6dbe41789","0x7223341d4","0x6574a002c","0x7223341d4","0x6574a002c"],gasUsedRatio:[.017712333333333333,.9458865666666667,.6534561,.6517375666666667,.7347769666666667],blobGasUsedRatio:[0,.6666666666666666,0,1,0],reward:[["0x3b9aca00","0x59682f00"],["0x3a13012","0x3a13012"],["0x3a13012","0x3a13012"],["0xf4240","0xf4240"],["0xf4240","0xf4240"]]}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_gasPrice",summary:"Returns the current price per gas in wei.",params:[],result:{name:"Gas price",schema:{title:"Gas price",$ref:"#/components/schemas/uint"}},examples:[{name:"eth_gasPrice example",params:[],result:{name:"Gas price",value:"0x3e8"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getBalance",summary:"Returns the balance of the account of given address.",params:[{name:"Address",required:!0,schema:{$ref:"#/components/schemas/address"}},{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTagOrHash"}}],result:{name:"Balance",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_getBalance example",params:[{name:"Address",value:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73"},{name:"Block",value:"latest"}],result:{name:"Balance",value:"0x1cfe56f3795885980000"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getBlockByHash",summary:"Returns information about a block by hash.",params:[{name:"Block hash",required:!0,schema:{$ref:"#/components/schemas/hash32"}},{name:"Hydrated transactions",required:!0,schema:{title:"hydrated",type:"boolean"}}],result:{name:"Block information",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{$ref:"#/components/schemas/Block"}]}},examples:[{name:"eth_getBlockByHash example",params:[{name:"Block hash",value:"0xd5f1812548be429cbdc6376b29611fc49e06f1359758c4ceaaa3b393e2239f9c"},{name:"Hydrated transactions",value:!1}],result:{name:"Block information",value:{number:"0x68b3",hash:"0xd5f1812548be429cbdc6376b29611fc49e06f1359758c4ceaaa3b393e2239f9c",mixHash:"0x24900fb3da77674a861c428429dce0762707ecb6052325bbd9b3c64e74b5af9d",parentHash:"0x1f68ac259155e2f38211ddad0f0a15394d55417b185a93923e2abe71bb7a4d6d",nonce:"0x378da40ff335b070",sha3Uncles:"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",logsBloom:"0xtransactionsRoot:"0x4d0c8e91e16bdff538c03211c5c73632ed054d00a7e210c0eb25146c20048126",stateRoot:"0x91309efa7e42c1f137f31fe9edbe88ae087e6620d0d59031324da3e2f4f93233",receiptsRoot:"0x68461ab700003503a305083630a8fb8d14927238f0bc8b6b3d246c0c64f21f4a",miner:"0xb42b6c4a95406c78ff892d270ad20b22642e102d",difficulty:"0x66e619a",totalDifficulty:"0x1e875d746ae",extraData:"0xd583010502846765746885676f312e37856c696e7578",size:"0x334",gasLimit:"0x47e7c4",gasUsed:"0x37993",timestamp:"0x5835c54d",uncles:[],transactions:["0xa0807e117a8dd124ab949f460f08c36c72b710188f01609595223b325e58e0fc","0xeae6d797af50cb62a596ec3939114d63967c374fa57de9bc0f4e2b576ed6639d"],baseFeePerGas:"0x7",withdrawalsRoot:"0x7a4ecf19774d15cf9c15adf0dd8e8a250c128b26c9e2ab2a08d6c9c8ffbd104f",withdrawals:[{index:"0x0",validatorIndex:"0x9d8c0",address:"0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f",amount:"0x11a33e3760"}],blobGasUsed:"0x0",excessBlobGas:"0x0",parentBeaconBlockRoot:"0x95c4dbd5b19f6fe3cbc3183be85ff4e85ebe75c5b4fc911f1c91e5b7a554a685"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getBlockByNumber",summary:"Returns information about a block by number.",params:[{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTag"}},{name:"Hydrated transactions",required:!0,schema:{title:"hydrated",type:"boolean"}}],result:{name:"Block information",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{$ref:"#/components/schemas/Block"}]}},examples:[{name:"eth_getBlockByNumber example",params:[{name:"block",value:"0x68b3"},{name:"Hydrated transactions",value:!1}],result:{name:"Block information",value:{number:"0x68b3",hash:"0xd5f1812548be429cbdc6376b29611fc49e06f1359758c4ceaaa3b393e2239f9c",mixHash:"0x24900fb3da77674a861c428429dce0762707ecb6052325bbd9b3c64e74b5af9d",parentHash:"0x1f68ac259155e2f38211ddad0f0a15394d55417b185a93923e2abe71bb7a4d6d",nonce:"0x378da40ff335b070",sha3Uncles:"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",logsBloom:"0xtransactionsRoot:"0x4d0c8e91e16bdff538c03211c5c73632ed054d00a7e210c0eb25146c20048126",stateRoot:"0x91309efa7e42c1f137f31fe9edbe88ae087e6620d0d59031324da3e2f4f93233",receiptsRoot:"0x68461ab700003503a305083630a8fb8d14927238f0bc8b6b3d246c0c64f21f4a",miner:"0xb42b6c4a95406c78ff892d270ad20b22642e102d",difficulty:"0x66e619a",totalDifficulty:"0x1e875d746ae",extraData:"0xd583010502846765746885676f312e37856c696e7578",size:"0x334",gasLimit:"0x47e7c4",gasUsed:"0x37993",timestamp:"0x5835c54d",uncles:[],transactions:["0xa0807e117a8dd124ab949f460f08c36c72b710188f01609595223b325e58e0fc","0xeae6d797af50cb62a596ec3939114d63967c374fa57de9bc0f4e2b576ed6639d"],baseFeePerGas:"0x7",withdrawalsRoot:"0x7a4ecf19774d15cf9c15adf0dd8e8a250c128b26c9e2ab2a08d6c9c8ffbd104f",withdrawals:[{index:"0x0",validatorIndex:"0x9d8c0",address:"0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f",amount:"0x11a33e3760"}],blobGasUsed:"0x0",excessBlobGas:"0x0",parentBeaconBlockRoot:"0x95c4dbd5b19f6fe3cbc3183be85ff4e85ebe75c5b4fc911f1c91e5b7a554a685"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getBlockTransactionCountByHash",summary:"Returns the number of transactions in a block from a block matching the given block hash.",params:[{name:"Block hash",schema:{$ref:"#/components/schemas/hash32"}}],result:{name:"Transaction count",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{title:"Transaction count",$ref:"#/components/schemas/uint"}]}},examples:[{name:"eth_getBlockTransactionCountByHash example",params:[{name:"Block hash",value:"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"}],result:{name:"Transaction count",value:"0x8"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getBlockTransactionCountByNumber",summary:"Returns the number of transactions in a block matching the given block number.",params:[{name:"Block",schema:{$ref:"#/components/schemas/BlockNumberOrTag"}}],result:{name:"Transaction count",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{title:"Transaction count",$ref:"#/components/schemas/uint"}]}},examples:[{name:"eth_getBlockTransactionCountByNumber example",params:[{name:"Block",value:"0xe8"}],result:{name:"Transaction count",value:"0x8"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getCode",summary:"Returns code at a given address.",params:[{name:"Address",required:!0,schema:{$ref:"#/components/schemas/address"}},{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTagOrHash"}}],result:{name:"Bytecode",schema:{$ref:"#/components/schemas/bytes"}},examples:[{name:"eth_getCode example",params:[{name:"Address",value:"0xa50a51c09a5c451c52bb714527e1974b686d8e77"},{name:"Block",value:"latest"}],result:{name:"Bytecode",value:"0x60806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633fa4f2458114604d57806355241077146071575b600080fd5b348015605857600080fd5b50605f6088565b60408051918252519081900360200190f35b348015607c57600080fd5b506086600435608e565b005b60005481565b60008190556040805182815290517f199cd93e851e4c78c437891155e2112093f8f15394aa89dab09e38d6ca0727879181900360200190a1505600a165627a7a723058209d8929142720a69bde2ab3bfa2da6217674b984899b62753979743c0470a2ea70029"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getFilterChanges",summary:"Polling method for the filter with the given ID (created using `eth_newFilter`). Returns an array of logs which occurred since last poll.",params:[{name:"Filter identifier",schema:{$ref:"#/components/schemas/uint"}}],result:{name:"Log objects",schema:{$ref:"#/components/schemas/FilterResults"}},examples:[{name:"eth_getFilterChanges example",params:[{name:"Filter identifier",value:"0x01"}],result:{name:"Log objects",value:[{logIndex:"0x0",removed:!1,blockNumber:"0x233",blockHash:"0xfc139f5e2edee9e9c888d8df9a2d2226133a9bd87c88ccbd9c930d3d4c9f9ef5",transactionHash:"0x66e7a140c8fa27fe98fde923defea7562c3ca2d6bb89798aabec65782c08f63d",transactionIndex:"0x0",address:"0x42699a7612a82f1d9c36148af9c77354759b210b",data:"0x0000000000000000000000000000000000000000000000000000000000000004",topics:["0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3"]},{logIndex:"0x0",removed:!1,blockNumber:"0x238",blockHash:"0x98b0ec0f9fea0018a644959accbe69cd046a8582e89402e1ab0ada91cad644ed",transactionHash:"0xdb17aa1c2ce609132f599155d384c0bc5334c988a6c368056d7e167e23eee058",transactionIndex:"0x0",address:"0x42699a7612a82f1d9c36148af9c77354759b210b",data:"0x0000000000000000000000000000000000000000000000000000000000000007",topics:["0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3"]}]}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getFilterLogs",summary:"Returns an array of all logs matching the filter with the given ID (created using `eth_newFilter`).",params:[{name:"Filter identifier",schema:{$ref:"#/components/schemas/uint"}}],result:{name:"Log objects",schema:{$ref:"#/components/schemas/FilterResults"}},examples:[{name:"eth_getFilterLogs example",params:[{name:"Filter identifier",value:"0x01"}],result:{name:"Log objects",value:[{logIndex:"0x0",removed:!1,blockNumber:"0x233",blockHash:"0xfc139f5e2edee9e9c888d8df9a2d2226133a9bd87c88ccbd9c930d3d4c9f9ef5",transactionHash:"0x66e7a140c8fa27fe98fde923defea7562c3ca2d6bb89798aabec65782c08f63d",transactionIndex:"0x0",address:"0x42699a7612a82f1d9c36148af9c77354759b210b",data:"0x0000000000000000000000000000000000000000000000000000000000000004",topics:["0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3"]},{logIndex:"0x0",removed:!1,blockNumber:"0x238",blockHash:"0x98b0ec0f9fea0018a644959accbe69cd046a8582e89402e1ab0ada91cad644ed",transactionHash:"0xdb17aa1c2ce609132f599155d384c0bc5334c988a6c368056d7e167e23eee058",transactionIndex:"0x0",address:"0x42699a7612a82f1d9c36148af9c77354759b210b",data:"0x0000000000000000000000000000000000000000000000000000000000000007",topics:["0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3"]}]}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getLogs",summary:"Returns an array of all logs matching the specified filter.",params:[{name:"Filter",schema:{$ref:"#/components/schemas/Filter"}}],result:{name:"Log objects",schema:{$ref:"#/components/schemas/FilterResults"}},examples:[{name:"eth_getLogs example",params:[{name:"Filter",value:{fromBlock:"0x137d3c2",toBlock:"0x137d3c3",address:"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",topics:[]}}],result:{name:"Log objects",value:[{logIndex:"0x0",removed:!1,blockNumber:"0x233",blockHash:"0xfc139f5e2edee9e9c888d8df9a2d2226133a9bd87c88ccbd9c930d3d4c9f9ef5",transactionHash:"0x66e7a140c8fa27fe98fde923defea7562c3ca2d6bb89798aabec65782c08f63d",transactionIndex:"0x0",address:"0x42699a7612a82f1d9c36148af9c77354759b210b",data:"0x0000000000000000000000000000000000000000000000000000000000000004",topics:["0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3"]},{logIndex:"0x0",removed:!1,blockNumber:"0x238",blockHash:"0x98b0ec0f9fea0018a644959accbe69cd046a8582e89402e1ab0ada91cad644ed",transactionHash:"0xdb17aa1c2ce609132f599155d384c0bc5334c988a6c368056d7e167e23eee058",transactionIndex:"0x0",address:"0x42699a7612a82f1d9c36148af9c77354759b210b",data:"0x0000000000000000000000000000000000000000000000000000000000000007",topics:["0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3"]}]}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getProof",summary:"Returns the merkle proof for a given account and optionally some storage keys.",params:[{name:"Address",required:!0,schema:{$ref:"#/components/schemas/address"}},{name:"StorageKeys",required:!0,schema:{title:"Storage keys",type:"array",items:{$ref:"#/components/schemas/bytesMax32"}}},{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTagOrHash"}}],result:{name:"Account",schema:{$ref:"#/components/schemas/AccountProof"}},examples:[{name:"eth_getProof example",params:[{name:"Address",value:"0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8"},{name:"StorageKeys",value:["0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","0x283s34c8e2b1456f09832c71e5d6a0b4f8c9e1d3a2b5c7f0e6d4a8b2c1f3e5d7"]},{name:"Block",value:"latest"}],result:{name:"Account",value:{accountProof:["0xf90211a06a718c2c9da77c253b12d7b2569657901e37bb691718f5dda1b86157ab1dd5eda0e7f19ed5e21bccc8d3260236b24f80ad88b3634f5d005f37b838881f0e12f1bda0abb301291704e4d92686c0f5f8ebb1734185321559b8d717ffdca95c99591976a0d0c2026bfab65c3b95276bfa82af9dec860b485f8857f293c148d63a2182128fa0c98044ec9a1273a218bed58b478277dd39173ad7b8edb95c200423a6bc8fc25fa056e5a55d9ddccdbf49362857200bbb1f042d61187c9f5f9ddcff5d2f1fc984a2a02a5b7200af424114f99a4b5f0a21c19aac82209e431ed80bfde177adb1004bdfa0026e4374f0518ff44a80fa374838ecb86cc64ac93bb710fea6dff4198f947b27a03fea341d87984673ad523177ed52f278bf4d8f97e6531c8ece932aeede4802f4a0bfe2f4a7fcb78f7e9f080dea7b6977fb1d88c441696e4456dad92b9d34ff0f43a02a3eb5c0edb14626c9c629601027bd60178bb2b688a67cea4d179fc432436615a0747355b8e02f3b884b4ffe5cea1619e32515fea064cca98208591af8c744e894a0874253737bae37f020ad3bb7e3292c7c4a63cdc158af6b33aaa4deaef016dccba03d8192bc1fc6aa1548912e763a0b5013a94399cefad7b47cf388873b2b794068a09b67f9737c6028d796bfd1c5da57a6f45824dc891f848ea0e1f8019d1fb5fba8a0aa871f9de8da85960fcd8a22cdf21c27f11e3966c14a6737ffd414b98dda00b280","0xf90211a0d360be1e1da1a0c32bc4c105833bd531e59d110684007b7c50fb2709002973eca0cf6dd1e350a7031b4e2ab49c899fd8bd47551c8565d8fd8d1d7796c83820c3b1a0eb0a88c29bb33989a589156f7bf07d9efc74034dd9d3f5b73385c3b45c3249bea02783c25f97a6ddb8dc07adf4b176991836d39184b1f678adeda832fff15e3664a00a4e288060045e587774d8a64993a7add73068b16863145e1e8eeb4602e18e19a0340851f4046ad1298962d6e47d05c66329549c839c158748aaad7ae00b943aefa085b127bc2a3bd17604283de21b2b3c9aa8f1d4b7b85c94d8105a46fe32c77688a00f531d62b3c5435324c01009c284fe31277e8d38302b75ea01be89f09e205969a00011c8351c0e3d639ac54b9d3a59de630b16a67de8270d7d6064d0a67e93f9cca048780d32b7f2db88650b51c46f46fd0a68795edee1fd5ecee6eb3595741d9669a0c91afd74eaf8e08a997061a62b354e2516fdc494e8e26cc50ceeb8f4a175608ba0e2c07f1b48fab80eecb340f5882e8c7b32ee416e4045c61f1df646a133487303a01a1eff78435a7a29a29463bdc3486ae81364b00bea82ba0fdf67a110770f2261a04f2eb440ba71c72da5fd7f0e439018d6671dc809f747213a1ea755848124e994a074ff9f37fce99daa3ed01dd763076450022996fc729be2cc43c61ec5182c2366a0b80b36b7b621112592f52390b89748d422e9b1517c4b0203b8176a53f89d4a6680","0xf90211a0b25f283bd01a8c8b2418049f9585bc37ff2c1e2e12eab4b7f64ae1f26647389aa02ad96c150d7c3c9c194d30315456852cf6a0a940e0191ae5d04007454823d4e9a0b220cf7a855e2dbcc0b973134e2e119b982d7d40dbb1b27d99816c41f40e829aa049224431da84cbf1b7ae813abcc9ef4c1dfc1760f6ddc5d57f7354bf3cbf6cc4a015191f879ac115b362f0257fd3eedb789537e836574a5b1abf1c9982ebe3bdfea07913c1b6e7282569d2d421e9fa2257f5d1698e93303bc49b941704287d7aaefea0a526576981ce6fd9f2bd48dd2ca6d5272f2fbdc85f0ee35a295f6ccd97ae8765a0313fad407f0c737c29024c02a890c4ecc12d7771c05ab7b435e5087a7cdef4d9a0d2044603cba9d4afdaf6fd2470e729ef3a65242de71276f20d59accfa6b53a7ca0457caacb9370c09b15f7d904adefd2308be94e23669ba5f43241ffff5f438a0aa09fb2dd45a383a0cc088a72b14117e1e9b7d6889218f3ac7631e8de644c5cb76da0c675dcd4d3fb692b514851c6106e2b09e6f5661d56a0a32ae02e2efc1515c235a074949a59ff1bdba87548510d6e404ec4532f4456dfdec8e753d92fda11a3088ba0a328c6ab1ab8f70db4d23e95bb163c13ba0c508f063a5b1393a4efd7ff375f05a0c722fe3ce796998269373cbb2fc229b2bdf2c43c6c2df003309422e043ce6c03a024e69343286eec44fa4744f6907209116e5383cff3fa98fe81ba06e7e8d4366680","0xf90211a00e99ba2198124b8241ea304551fe973215829e2fbc0438d67922707a2a847432a0bb9ce24fd527879c5fe6dbbec1ef5a05ed9d1ca88e921d140bafbec1112f6a6aa099787fd6c7a1989229c4291ef5267335e66152ce417daea46e66d19cb6f81d1ca0e430ff4b8d5621baa5978673344e78b4d8b4df51431b6e63785267c98a24ce18a0bb3e91a825fe3d42ed270a93e9ad1aabd566c40cb28e622f7f1d7ee967c8afd6a0aa364b0056870c6507bc3262a5f851ecb13684088bdb13996d3cb2db401ce3ffa0a3732eba4c7a6e062665ab5be08acb986c3db87556fb138548cc900ff1e56995a026b088e90c9738b8ce16e853107a937a50d52726a24f9f6ce60f587762eb45a2a006c9d5bc3c064b5c1fb565bff91cace9161c64ae653a329610c1dcf34d434429a06c16df2edc70656d322d0c2403bad7d45bc790ffc3e7adeef856d98ea6afc91ba0ae05ed5d6c34b5da29c2e94d7880aeba0906f95f4ec10b132a1d4766a0701c98a01470a86aa350d1ada0c082eac75de828a851f9c8c7c4aa49b1556fe3a5574966a0334eef025100a6da1033710dd98e0475f29d3d7e397caf618ca71c336c5f4f49a0ef0b3abbebcff34d6a8a8f5cdbfbd154ab3452b58dcb09de58ec983644963675a041857e865ec38e200a13bc1a3cb71c7d69aeef7ffdee8be515c9a5b691ce091fa059edd0eb3bbec36bbf38a19802d4646c00ba821ab55fdeea12e15bab62c4e1e580","0xf90211a0af0c7fa65ffcb84c31e68c1cf00e1a20bf8bb497c39883e19b66a99975b03431a0c492cab3623eb7926069794c3c718733e16c5fd0d4a13fb7c752ee9809aac7ada05003cea7132aa70d6f36731d60640a90bcd8f4fd493e4540d5ab1b4943679c0ca0fd700683405b1d2306b586dd3b5b2f92f1692fae20d17cd8b8e59d09b9c6670da01db8683910e46e56e8afeb9fe2b7c35382e5a0914d7b0dd8f0e8cb9981ba7435a0fa7f75d73aa73c35824387bec81388315caa4aee3f4f5562f971beb256c62d49a0ee478e420d83f413e8568dacfd5d83f83a5dd7c45f494b504828e5dc962f0e3ea094b95444a917ac94a675681f6bf851172ad0969801a783a63a71edafed45e7a7a0a0c46586e109abe80fe50361dd582e3f143cb416828239faa43bb2b890869501a0ae051d5d43634c68bf9c97823256cc68580f194dfdbd0c301140c7ca5853430ca0660b9365bb77ec9cdc6eb95516c162dca20727c6f828dbbeb1ae110dde4d3134a09feb1b75e84ff6722e4d837bfb6d207b6ee3b21b86844a01140ce293813b49a1a0ed58a70b04efa3bdc0babe2abfa20824a75d61d52291bfdb5cf08597800764d6a020a2d5d3a83f9e35ad9fd1c448626d90af0eb3efefaa4f2f93207b4096ef5507a0fc8efc4484dcf0a54f0574de9aaade0dcff6ec3599edb9f82efb26b6566dcaeaa032f7e79856db3fd984f72bb2c93d4dab328198d355a61c975fab1f08bdb2046580"],balance:"0x0",codeHash:"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",nonce:"0x0",storageHash:"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",storageProof:[{key:"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",proof:["0xf90211a0c87222cccea2bf32759fcee9dbaacbe3ea4165dd6184af6773651c5e00e34a8ba0be90e6e5d1a67ab5587779c60ac136d6a96db62b84c04998a5f03a367346abd6a05344aa1c9ca2e3e56bf98fd718ec43728578d148e1967fbaf8bf17a2a073a0bda011a2f9312c3308640a0d6ceeae218747290f23806067456da1d444c65abae437a0b3097a108bfce79af6699da4ae3003cd4929f0b4576aad655c31cb725bde84c7a0c133d3c637e174f36a73c22b1039eb003da6374bc0929321241badb3efa3c4a9a0f13059f2301ad9862ce02e3f7f3f2c9ab78eb30583764d73654f7f1f8b1e86fda06544e3915748b18204e09df75ff20d2fa6bd8121e2e669699012d54590383d6fa070e3a8e093691581d58fadb560b510262a758037632cd8670d3a36df828976b7a062a88a2900544dc76a32255a6b2b2a2eef8fa68279700c00adc7508286702552a0a474aeebd5603dfce46a6ecd1ecd519068dc034a544fde03ac42d4018e60a334a0b7d528fc41c8fdc8ea18c6e7d0099270c777ec1403cf879d1f5134bdc12a6c6ca04440f1242e42c5bfa7c536591ab89c8e84bea417435871c32eef1e25295b20daa06a5dcfe3cc84cff9d3e3c3ae868cfba8f0dd111a90c3f85869dab5b893f96643a026b2fb9dd7d08b0ed2f1c44fbf875011412a384f86f751c92e1013248d4aa371a0c75597b2b789fc4e939b71937390ce9d7d53159431328ac52180eef08ef200f280","0xf90191a0f0c5b800b542001597f2b7a8e106ac0e2849d2cc1df1727ac35c4ea3965f1c9180a08537f2e248702a6ae2a57e9110a5740f5772c876389739ac90debd6a0692713ea00b3a26a05b5494fb3ff6f0b3897688a5581066b20b07ebab9252d169d928717fa0a9a54d84976d134d6dba06a65064c7f3a964a75947d452db6f6bb4b6c47b43aaa01e2a1ed3d1572b872bbf09ee44d2ed737da31f01de3c0f4b4e1f046740066461a076f251d160b9a02eb0b5c1d83b61c9cdd4f37361705e79a45529bf49801fb824a0774a01a624cb14a50d17f2fe4b7ae6af8a67bbb029177ccc3dd729a734484d3ea05921b8a19aebe4fff5a36071e311778f9b93459183fdf7f6d870b401fa25dcbba0c8d71dd13d2806e2865a5c2cfa447f626471bf0b66182a8fd07230434e1cad2680a0e9864fdfaf3693b2602f56cd938ccd494b8634b1f91800ef02203a3609ca4c21a0c69d174ad6b6e58b0bd05914352839ec60915cd066dd2bee2a48016139687f21a0513dd5514fd6bad56871711441d38de2821cc6913cb192416b0385f025650731808080"],value:"0x1"}]}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getStorageAt",summary:"Returns the value from a storage position at a given address.",params:[{name:"Address",required:!0,schema:{$ref:"#/components/schemas/address"}},{name:"Storage slot",required:!0,schema:{$ref:"#/components/schemas/uint256"}},{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTagOrHash"}}],result:{name:"Value",schema:{$ref:"#/components/schemas/bytes"}},examples:[{name:"eth_getStorageAt example",params:[{name:"Address",value:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73"},{name:"Storage slot",value:"0x0"},{name:"Block",value:"latest"}],result:{name:"Value",value:"0x0000000000000000000000000000000000000000000000000000000000000000"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getTransactionByBlockHashAndIndex",summary:"Returns information about a transaction by block hash and transaction index position.",params:[{name:"Block hash",required:!0,schema:{$ref:"#/components/schemas/hash32"}},{name:"Transaction index",required:!0,schema:{$ref:"#/components/schemas/uint"}}],result:{name:"Transaction information",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{$ref:"#/components/schemas/TransactionInfo"}]}},examples:[{name:"eth_getTransactionByBlockHashAndIndex example",params:[{name:"Block hash",value:"0xbf137c3a7a1ebdfac21252765e5d7f40d115c2757e4a4abee929be88c624fdb7"},{name:"Transaction index",value:"0x2"}],result:{name:"Transaction information",value:{blockHash:"0x510efccf44a192e6e34bcb439a1947e24b86244280762cbb006858c237093fda",blockNumber:"0x422",chainId:2018,from:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73",gas:"0x5208",gasPrice:"0x3b9aca00",hash:"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44",input:"0x",nonce:"0x1",to:"0x627306090abab3a6e1400e9345bc60c78a8bef57",transactionIndex:"0x0",value:"0x4e1003b28d9280000",v:"0xfe7",r:"0x84caf09aefbd5e539295acc67217563438a4efb224879b6855f56857fa2037d3",s:"0x5e863be3829812c81439f0ae9d8ecb832b531d651fb234c848d1bf45e62be8b9"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getTransactionByBlockNumberAndIndex",summary:"Returns information about a transaction by block number and transaction index position.",params:[{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTag"}},{name:"Transaction index",required:!0,schema:{$ref:"#/components/schemas/uint"}}],result:{name:"Transaction information",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{$ref:"#/components/schemas/TransactionInfo"}]}},examples:[{name:"eth_getTransactionByBlockNumberAndIndex example",params:[{name:"Block",value:"0x1442e"},{name:"Transaction index",value:"0x2"}],result:{name:"Transaction information",value:{blockHash:"0x510efccf44a192e6e34bcb439a1947e24b86244280762cbb006858c237093fda",blockNumber:"0x422",chainId:2018,from:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73",gas:"0x5208",gasPrice:"0x3b9aca00",hash:"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44",input:"0x",nonce:"0x1",to:"0x627306090abab3a6e1400e9345bc60c78a8bef57",transactionIndex:"0x0",value:"0x4e1003b28d9280000",v:"0xfe7",r:"0x84caf09aefbd5e539295acc67217563438a4efb224879b6855f56857fa2037d3",s:"0x5e863be3829812c81439f0ae9d8ecb832b531d651fb234c848d1bf45e62be8b9"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getTransactionByHash",summary:"Returns the information about a transaction requested by transaction hash.",params:[{name:"Transaction hash",required:!0,schema:{$ref:"#/components/schemas/hash32"}}],result:{name:"Transaction information",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{$ref:"#/components/schemas/TransactionInfo"}]}},examples:[{name:"eth_getTransactionByHash example",params:[{name:"Transaction hash",value:"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44"}],result:{name:"Transaction information",value:{blockHash:"0x510efccf44a192e6e34bcb439a1947e24b86244280762cbb006858c237093fda",blockNumber:"0x422",chainId:2018,from:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73",gas:"0x5208",gasPrice:"0x3b9aca00",hash:"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44",input:"0x",nonce:"0x1",to:"0x627306090abab3a6e1400e9345bc60c78a8bef57",transactionIndex:"0x0",value:"0x4e1003b28d9280000",v:"0xfe7",r:"0x84caf09aefbd5e539295acc67217563438a4efb224879b6855f56857fa2037d3",s:"0x5e863be3829812c81439f0ae9d8ecb832b531d651fb234c848d1bf45e62be8b9"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getTransactionCount",summary:"Returns the number of transactions sent from an address.",params:[{name:"Address",required:!0,schema:{$ref:"#/components/schemas/address"}},{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTagOrHash"}}],result:{name:"Transaction count",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_getTransactionCount example",params:[{name:"Address",value:"0xc94770007dda54cF92009BFF0dE90c06F603a09f"},{name:"Block",value:"latest"}],result:{name:"Transaction count",value:"0x1"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getTransactionReceipt",summary:"Returns the receipt of a transaction by transaction hash.",params:[{name:"Transaction hash",required:!0,schema:{$ref:"#/components/schemas/hash32"}}],result:{name:"Receipt information",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{$ref:"#/components/schemas/ReceiptInfo"}]}},examples:[{name:"eth_getTransactionReceipt example",params:[{name:"Transaction hash",value:"0x504ce587a65bdbdb6414a0c6c16d86a04dd79bfcc4f2950eec9634b30ce5370f"}],result:{name:"Receipt information",value:{blockHash:"0xe7212a92cfb9b06addc80dec2a0dfae9ea94fd344efeb157c41e12994fcad60a",blockNumber:"0x50",contractAddress:null,cumulativeGasUsed:"0x5208",from:"0x627306090abab3a6e1400e9345bc60c78a8bef57",gasUsed:"0x5208",blobGasUsed:"0x20000",effectiveGasPrice:"0x1",blobGasPrice:"0x3",logs:[],logsBloom:"0xstatus:"0x1",to:"0xf17f52151ebef6c7334fad080c5704d77216b732",transactionHash:"0xc00e97af59c6f88de163306935f7682af1a34c67245e414537d02e422815efc3",transactionIndex:"0x0"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getUncleCountByBlockHash",summary:"Returns the number of uncles in a block from a block matching the given block hash.",params:[{name:"Block hash",schema:{$ref:"#/components/schemas/hash32"}}],result:{name:"Uncle count",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{title:"Uncle count",$ref:"#/components/schemas/uint"}]}},examples:[{name:"eth_getUncleCountByBlockHash example",params:[{name:"Block hash",value:"0xb3b20624f8f0f86eb50dd04688409e5cea4bd02d700bf6e79e9384d47d6a5a35"}],result:{name:"Uncle count",value:"0x1"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getUncleCountByBlockNumber",summary:"Returns the number of transactions in a block matching the given block number.",params:[{name:"Block",schema:{$ref:"#/components/schemas/BlockNumberOrTag"}}],result:{name:"Uncle count",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{title:"Uncle count",$ref:"#/components/schemas/uint"}]}},examples:[{name:"eth_getUncleCountByBlockNumber example",params:[{name:"Block",value:"0xe8"}],result:{name:"Uncle count",value:"0x1"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_newBlockFilter",summary:"Creates a filter in the node, to notify when a new block arrives.",params:[],result:{name:"Filter identifier",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_newBlockFilter example",params:[],result:{name:"Filter identifier",value:"0x01"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_newFilter",summary:"Creates a filter object, based on filter options, to notify when the state changes (logs).",params:[{name:"Filter",schema:{$ref:"#/components/schemas/Filter"}}],result:{name:"Filter identifier",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_newFilter example",params:[{name:"Filter",value:{fromBlock:"0x137d3c2",toBlock:"0x137d3c3",address:"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",topics:[]}}],result:{name:"Filter identifier",value:"0x01"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_newPendingTransactionFilter",summary:"Creates a filter in the node, to notify when new pending transactions arrive.",params:[],result:{name:"Filter identifier",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_newPendingTransactionFilter example",params:[],result:{name:"Filter identifier",value:"0x01"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_sendRawTransaction",summary:"Submits a raw transaction. You can create and sign a transaction externally using a library such as [web3.js](https://web3js.readthedocs.io/) or [ethers.js](https://docs.ethers.org/). For [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) transactions, the raw form must be the network form. This means it includes the blobs, KZG commitments, and KZG proofs.",params:[{name:"Transaction",required:!0,schema:{$ref:"#/components/schemas/bytes"}}],result:{name:"Transaction hash",schema:{$ref:"#/components/schemas/hash32"}},examples:[{name:"eth_sendRawTransaction example",params:[{name:"Transaction",value:"0xf869018203e882520894f17f52151ebef6c7334fad080c5704d77216b732881bc16d674ec80000801ba02da1c48b670996dcb1f447ef9ef00b33033c48a4fe938f420bec3e56bfd24071a062e0aa78a81bf0290afbc3a9d8e9a068e6d74caa66c5e0fa8a46deaae96b0833"}],result:{name:"Transaction hash",value:"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_syncing",summary:"Returns an object with data about the sync status or false.",params:[],result:{name:"Syncing status",schema:{$ref:"#/components/schemas/SyncingStatus"}},examples:[{name:"eth_syncing example",params:[],result:{name:"Syncing status",value:{startingBlock:"0x0",currentBlock:"0x1518",highestBlock:"0x9567a3"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_uninstallFilter",summary:"Uninstalls a filter with given id.",params:[{name:"Filter identifier",schema:{$ref:"#/components/schemas/uint"}}],result:{name:"Success",schema:{type:"boolean"}},examples:[{name:"eth_uninstallFilter example",params:[{name:"Filter identifier",value:"0x01"}],result:{name:"Success",value:!0}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]}],components:{errors:{UserRejected:{code:4001,message:"User rejected the request."}},schemas:{TypedData:{title:"TypedData",type:"object",required:["types","primaryType","domain","message"],properties:{types:{type:"object",required:["EIP712Domain"],properties:{EIP712Domain:{type:"array",items:{type:"object",properties:{name:{type:"string"},type:{type:"string"}}},description:"An array specifying one or more of the following domain separator values: 1) `name` - The user-readable name of the signing domain, that is, the name of the dapp or the protocol. 2) `version` - The current major version of the signing domain. 3) `chainId` - The chain ID of the network. 4) `verifyingContract` - The address of the contract that will verify the signature. 5) `salt` - A disambiguating salt for the protocol."}},additionalProperties:{type:"array",required:["name","type"],items:{type:"object",properties:{name:{type:"string"},type:{type:"string"}}}}},domain:{type:"object",description:"Contains the domain separator values specified in the `EIP712Domain` type."},primaryType:{type:"string"},message:{type:"object",description:"The message you're proposing the user to sign."}}},AddEthereumChainParameter:{title:"Chain",description:"Object containing information about the chain to add.",type:"object",required:["chainId","chainName","nativeCurrency","rpcUrls"],properties:{chainId:{description:"The chain ID as a `0x`-prefixed hexadecimal string, per the `eth_chainId` method. MetaMask compares this chain ID value with the `eth_chainId` return value. If these values aren't identical, MetaMask rejects the request.",type:"string"},blockExplorerUrls:{description:"(Optional) An array of one or more URLs pointing to block explorer sites for the chain.",type:"array",items:{type:"string",description:"Block explorer URL."}},chainName:{description:"A human-readable name for the chain.",type:"string"},iconUrls:{description:"(Optional) An array of one or more URLs pointing to icons that can be used to visually identify the chain. Note: MetaMask will not currently display these icons. You can still include icon URLs so they are used if MetaMask incorporates them into the display of custom networks in the future.",type:"array",items:{format:"uri",type:"string",description:"Icon URL."}},nativeCurrency:{$ref:"#/components/schemas/NativeCurrency"},rpcUrls:{description:"An array of one or more URLs pointing to RPC endpoints that can be used to communicate with the chain. At least one item is required, and only the first item is used.",type:"array",minItems:1,items:{format:"uri",type:"string",description:"RPC URL."}}}},NativeCurrency:{title:"NativeCurrency",type:"object",description:"An object containing information about the native currency of the chain.",required:["decimals","symbol"],properties:{decimals:{description:"A non-negative integer representing the number of decimals the native currency uses.",minimum:0,type:"integer"},name:{description:"A human-readable name of the native currency.",type:"string"},symbol:{description:"A human-readable symbol of the native currency.",type:"string"}}},Caveats:{title:"Caveats",description:"An array of caveats that specify restrictions on the permission.",type:"array",items:{title:"Caveat",description:"Object containing information about the caveat.",type:"object",properties:{type:{title:"Type",type:"string",description:"Type of caveat."},value:{title:"CaveatValue",description:"Value of the caveat."},name:{title:"Name",type:"string",description:"Name of the caveat."}}}},Permission:{title:"Permission",description:"Object containing information about the permission.",type:"object",properties:{id:{description:"The permission ID.",type:"string"},parentCapability:{description:"The name of the permission being granted. For example, `eth_accounts` or `endowment:permitted-chains`.",type:"string"},invoker:{description:"The URI of the dapp being granted this permission.",type:"string"},caveats:{$ref:"#/components/schemas/Caveats"},date:{description:"The timestamp of the permission request.",type:"number"}}},PermissionsList:{title:"Permissions list",description:"An array of the user's permissions.",type:"array",items:{$ref:"#/components/schemas/Permission"}},Caip10Address:{title:"Caip10Address",type:"string",description:"CAIP-10 defines a way to identify an account/address in any blockchain."},address:{title:"hex encoded address",type:"string",pattern:"^0x[0-9a-fA-F]{40}$"},addresses:{title:"hex encoded address",type:"array",items:{$ref:"#/components/schemas/address"}},byte:{title:"hex encoded byte",type:"string",pattern:"^0x([0-9a-fA-F]?){1,2}$"},bytes:{title:"hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]*$"},bytesMax32:{title:"32 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{0,64}$"},bytes8:{title:"8 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{16}$"},bytes32:{title:"32 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{64}$"},bytes48:{title:"48 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{96}$"},bytes96:{title:"96 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{192}$"},bytes256:{title:"256 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{512}$"},bytes65:{title:"65 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{130}$"},ratio:{title:"normalized ratio",type:"number",minimum:0,maximum:1},uint:{title:"hex encoded unsigned integer",type:"string",pattern:"^0x([1-9a-f]+[0-9a-f]*|0)$"},uint64:{title:"hex encoded 64 bit unsigned integer",type:"string",pattern:"^0x([1-9a-f]+[0-9a-f]{0,15})|0$"},uint256:{title:"hex encoded 256 bit unsigned integer",type:"string",pattern:"^0x([1-9a-f]+[0-9a-f]{0,31})|0$"},hash32:{title:"32 byte hex value",type:"string",pattern:"^0x[0-9a-f]{64}$"},notFound:{title:"Not Found (null)",type:"null"},Block:{title:"Block object",type:"object",required:["hash","parentHash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","logsBloom","number","gasLimit","gasUsed","timestamp","extraData","mixHash","nonce","size","transactions","uncles"],additionalProperties:!1,properties:{hash:{title:"Hash",$ref:"#/components/schemas/hash32"},parentHash:{title:"Parent block hash",$ref:"#/components/schemas/hash32"},sha3Uncles:{title:"Ommers hash",$ref:"#/components/schemas/hash32"},miner:{title:"Coinbase",$ref:"#/components/schemas/address"},stateRoot:{title:"State root",$ref:"#/components/schemas/hash32"},transactionsRoot:{title:"Transactions root",$ref:"#/components/schemas/hash32"},receiptsRoot:{title:"Receipts root",$ref:"#/components/schemas/hash32"},logsBloom:{title:"Bloom filter",$ref:"#/components/schemas/bytes256"},difficulty:{title:"Difficulty",$ref:"#/components/schemas/uint"},number:{title:"Number",$ref:"#/components/schemas/uint"},gasLimit:{title:"Gas limit",$ref:"#/components/schemas/uint"},gasUsed:{title:"Gas used",$ref:"#/components/schemas/uint"},timestamp:{title:"Timestamp",$ref:"#/components/schemas/uint"},extraData:{title:"Extra data",$ref:"#/components/schemas/bytes"},mixHash:{title:"Mix hash",$ref:"#/components/schemas/hash32"},nonce:{title:"Nonce",$ref:"#/components/schemas/bytes8"},baseFeePerGas:{title:"Base fee per gas",$ref:"#/components/schemas/uint"},withdrawalsRoot:{title:"Withdrawals root",$ref:"#/components/schemas/hash32"},blobGasUsed:{title:"Blob gas used",$ref:"#/components/schemas/uint"},excessBlobGas:{title:"Excess blob gas",$ref:"#/components/schemas/uint"},parentBeaconBlockRoot:{title:"Parent Beacon Block Root",$ref:"#/components/schemas/hash32"},size:{title:"Block size",$ref:"#/components/schemas/uint"},transactions:{anyOf:[{title:"Transaction hashes",type:"array",items:{$ref:"#/components/schemas/hash32"}},{title:"Full transactions",type:"array",items:{$ref:"#/components/schemas/TransactionInfo"}}]},withdrawals:{title:"Withdrawals",type:"array",items:{$ref:"#/components/schemas/Withdrawal"}},uncles:{title:"Uncles",type:"array",items:{$ref:"#/components/schemas/hash32"}}}},BlockTag:{title:"Block tag",type:"string",enum:["earliest","finalized","safe","latest","pending"],description:"`earliest`: The lowest numbered block the client has available; `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination; `safe`: The most recent block that is safe from re-orgs under honest majority and certain synchronicity assumptions; `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions; `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. Before the merge transition is finalized, any call querying for `finalized` or `safe` block MUST be responded to with `-39001: Unknown block` error"},BlockNumberOrTag:{title:"Block number or tag",oneOf:[{title:"Block number",$ref:"#/components/schemas/uint"},{title:"Block tag",$ref:"#/components/schemas/BlockTag"}]},BlockNumberOrTagOrHash:{title:"Block number, tag, or block hash",anyOf:[{title:"Block number",$ref:"#/components/schemas/uint"},{title:"Block tag",$ref:"#/components/schemas/BlockTag"},{title:"Block hash",$ref:"#/components/schemas/hash32"}]},BadBlock:{title:"Bad block",type:"object",required:["block","hash","rlp"],additionalProperties:!1,properties:{block:{title:"Block",$ref:"#/components/schemas/Block"},hash:{title:"Hash",$ref:"#/components/schemas/hash32"},rlp:{title:"RLP",$ref:"#/components/schemas/bytes"}}},SyncingStatus:{title:"Syncing status",oneOf:[{title:"Syncing progress",type:"object",additionalProperties:!1,properties:{startingBlock:{title:"Starting block",$ref:"#/components/schemas/uint"},currentBlock:{title:"Current block",$ref:"#/components/schemas/uint"},highestBlock:{title:"Highest block",$ref:"#/components/schemas/uint"}}},{title:"Not syncing",description:"Should always return false if not syncing.",type:"boolean"}]},FilterResults:{title:"Filter results",oneOf:[{title:"new block or transaction hashes",type:"array",items:{$ref:"#/components/schemas/hash32"}},{title:"new logs",type:"array",items:{$ref:"#/components/schemas/Log"}}]},Filter:{title:"filter",type:"object",additionalProperties:!1,properties:{fromBlock:{title:"from block",$ref:"#/components/schemas/uint"},toBlock:{title:"to block",$ref:"#/components/schemas/uint"},address:{title:"Address(es)",oneOf:[{title:"Any Address",type:"null"},{title:"Address",$ref:"#/components/schemas/address"},{title:"Addresses",$ref:"#/components/schemas/addresses"}]},topics:{title:"Topics",$ref:"#/components/schemas/FilterTopics"}}},FilterTopics:{title:"Filter Topics",oneOf:[{title:"Any Topic Match",type:"null"},{title:"Specified Filter Topics",type:"array",items:{$ref:"#/components/schemas/FilterTopic"}}]},FilterTopic:{title:"Filter Topic List Entry",oneOf:[{title:"Single Topic Match",$ref:"#/components/schemas/bytes32"},{title:"Multiple Topic Match",type:"array",items:{$ref:"#/components/schemas/bytes32"}}]},Log:{title:"log",type:"object",required:["transactionHash"],additionalProperties:!1,properties:{removed:{title:"removed",type:"boolean"},logIndex:{title:"log index",$ref:"#/components/schemas/uint"},transactionIndex:{title:"transaction index",$ref:"#/components/schemas/uint"},transactionHash:{title:"transaction hash",$ref:"#/components/schemas/hash32"},blockHash:{title:"block hash",$ref:"#/components/schemas/hash32"},blockNumber:{title:"block number",$ref:"#/components/schemas/uint"},address:{title:"address",$ref:"#/components/schemas/address"},data:{title:"data",$ref:"#/components/schemas/bytes"},topics:{title:"topics",type:"array",items:{$ref:"#/components/schemas/bytes32"}}}},ReceiptInfo:{type:"object",title:"Receipt information",required:["blockHash","blockNumber","from","cumulativeGasUsed","gasUsed","logs","logsBloom","transactionHash","transactionIndex","effectiveGasPrice"],additionalProperties:!1,properties:{type:{title:"type",$ref:"#/components/schemas/byte"},transactionHash:{title:"transaction hash",$ref:"#/components/schemas/hash32"},transactionIndex:{title:"transaction index",$ref:"#/components/schemas/uint"},blockHash:{title:"block hash",$ref:"#/components/schemas/hash32"},blockNumber:{title:"block number",$ref:"#/components/schemas/uint"},from:{title:"from",$ref:"#/components/schemas/address"},to:{title:"to",description:"Address of the receiver or null in a contract creation transaction.",oneOf:[{title:"Contract Creation (null)",type:"null"},{title:"Recipient Address",$ref:"#/components/schemas/address"}]},cumulativeGasUsed:{title:"cumulative gas used",description:"The sum of gas used by this transaction and all preceding transactions in the same block.",$ref:"#/components/schemas/uint"},gasUsed:{title:"gas used",description:"The amount of gas used for this specific transaction alone.",$ref:"#/components/schemas/uint"},blobGasUsed:{title:"blob gas used",description:"The amount of blob gas used for this specific transaction. Only specified for blob transactions as defined by EIP-4844.",$ref:"#/components/schemas/uint"},contractAddress:{title:"contract address",description:"The contract address created, if the transaction was a contract creation, otherwise null.",oneOf:[{$ref:"#/components/schemas/address"},{title:"Null",type:"null"}]},logs:{title:"logs",type:"array",items:{$ref:"#/components/schemas/Log"}},logsBloom:{title:"logs bloom",$ref:"#/components/schemas/bytes256"},root:{title:"state root",description:"The post-transaction state root. Only specified for transactions included before the Byzantium upgrade.",$ref:"#/components/schemas/hash32"},status:{title:"status",description:"Either 1 (success) or 0 (failure). Only specified for transactions included after the Byzantium upgrade.",$ref:"#/components/schemas/uint"},effectiveGasPrice:{title:"effective gas price",description:"The actual value per gas deducted from the sender's account. Before EIP-1559, this is equal to the transaction's gas price. After, it is equal to baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas).",$ref:"#/components/schemas/uint"},blobGasPrice:{title:"blob gas price",description:"The actual value per gas deducted from the sender's account for blob gas. Only specified for blob transactions as defined by EIP-4844.",$ref:"#/components/schemas/uint"}}},AccountProof:{title:"Account proof",type:"object",required:["address","accountProof","balance","codeHash","nonce","storageHash","storageProof"],additionalProperties:!1,properties:{address:{title:"address",$ref:"#/components/schemas/address"},accountProof:{title:"accountProof",type:"array",items:{$ref:"#/components/schemas/bytes"}},balance:{title:"balance",$ref:"#/components/schemas/uint256"},codeHash:{title:"codeHash",$ref:"#/components/schemas/hash32"},nonce:{title:"nonce",$ref:"#/components/schemas/uint64"},storageHash:{title:"storageHash",$ref:"#/components/schemas/hash32"},storageProof:{title:"Storage proofs",type:"array",items:{$ref:"#/components/schemas/StorageProof"}}}},StorageProof:{title:"Storage proof",type:"object",required:["key","value","proof"],additionalProperties:!1,properties:{key:{title:"key",$ref:"#/components/schemas/bytesMax32"},value:{title:"value",$ref:"#/components/schemas/uint256"},proof:{title:"proof",type:"array",items:{$ref:"#/components/schemas/bytes"}}}},Transaction4844Unsigned:{type:"object",title:"EIP-4844 transaction.",required:["type","nonce","to","gas","value","input","maxPriorityFeePerGas","maxFeePerGas","maxFeePerBlobGas","accessList","blobVersionedHashes","chainId"],properties:{type:{title:"type",$ref:"#/components/schemas/byte"},nonce:{title:"nonce",$ref:"#/components/schemas/uint"},to:{title:"to address",$ref:"#/components/schemas/address"},gas:{title:"gas limit",$ref:"#/components/schemas/uint"},value:{title:"value",$ref:"#/components/schemas/uint"},input:{title:"input data",$ref:"#/components/schemas/bytes"},maxPriorityFeePerGas:{title:"max priority fee per gas",description:"Maximum fee per gas the sender is willing to pay to miners in wei",$ref:"#/components/schemas/uint"},maxFeePerGas:{title:"max fee per gas",description:"The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",$ref:"#/components/schemas/uint"},maxFeePerBlobGas:{title:"max fee per blob gas",description:"The maximum total fee per gas the sender is willing to pay for blob gas in wei",$ref:"#/components/schemas/uint"},accessList:{title:"accessList",description:"EIP-2930 access list",$ref:"#/components/schemas/AccessList"},blobVersionedHashes:{title:"blobVersionedHashes",description:"List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",type:"array",items:{$ref:"#/components/schemas/hash32"}},chainId:{title:"chainId",description:"Chain ID that this transaction is valid on.",$ref:"#/components/schemas/uint"}}},AccessListEntry:{title:"Access list entry",type:"object",additionalProperties:!1,properties:{address:{$ref:"#/components/schemas/address"},storageKeys:{type:"array",items:{$ref:"#/components/schemas/hash32"}}}},AccessList:{title:"Access list",type:"array",items:{$ref:"#/components/schemas/AccessListEntry"}},Transaction1559Unsigned:{type:"object",title:"EIP-1559 transaction.",required:["type","nonce","gas","value","input","maxFeePerGas","maxPriorityFeePerGas","gasPrice","chainId","accessList"],properties:{type:{title:"type",type:"string",pattern:"^0x2$"},nonce:{title:"nonce",$ref:"#/components/schemas/uint"},to:{title:"to address",oneOf:[{title:"Contract Creation (null)",type:"null"},{title:"Address",$ref:"#/components/schemas/address"}]},gas:{title:"gas limit",$ref:"#/components/schemas/uint"},value:{title:"value",$ref:"#/components/schemas/uint"},input:{title:"input data",$ref:"#/components/schemas/bytes"},maxPriorityFeePerGas:{title:"max priority fee per gas",description:"Maximum fee per gas the sender is willing to pay to miners in wei",$ref:"#/components/schemas/uint"},maxFeePerGas:{title:"max fee per gas",description:"The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",$ref:"#/components/schemas/uint"},gasPrice:{title:"gas price",description:"The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using effectiveGasPrice in the receipt object going forward.",$ref:"#/components/schemas/uint"},accessList:{title:"accessList",description:"EIP-2930 access list",$ref:"#/components/schemas/AccessList"},chainId:{title:"chainId",description:"Chain ID that this transaction is valid on.",$ref:"#/components/schemas/uint"}}},Transaction2930Unsigned:{type:"object",title:"EIP-2930 transaction.",required:["type","nonce","gas","value","input","gasPrice","chainId","accessList"],properties:{type:{title:"type",type:"string",pattern:"^0x1$"},nonce:{title:"nonce",$ref:"#/components/schemas/uint"},to:{title:"to address",oneOf:[{title:"Contract Creation (null)",type:"null"},{title:"Address",$ref:"#/components/schemas/address"}]},gas:{title:"gas limit",$ref:"#/components/schemas/uint"},value:{title:"value",$ref:"#/components/schemas/uint"},input:{title:"input data",$ref:"#/components/schemas/bytes"},gasPrice:{title:"gas price",description:"The gas price willing to be paid by the sender in wei",$ref:"#/components/schemas/uint"},accessList:{title:"accessList",description:"EIP-2930 access list",$ref:"#/components/schemas/AccessList"},chainId:{title:"chainId",description:"Chain ID that this transaction is valid on.",$ref:"#/components/schemas/uint"}}},TransactionLegacyUnsigned:{type:"object",title:"Legacy transaction.",required:["type","nonce","gas","value","input","gasPrice"],properties:{type:{title:"type",type:"string",pattern:"^0x0$"},nonce:{title:"nonce",$ref:"#/components/schemas/uint"},to:{title:"to address",oneOf:[{title:"Contract Creation (null)",type:"null"},{title:"Address",$ref:"#/components/schemas/address"}]},gas:{title:"gas limit",$ref:"#/components/schemas/uint"},value:{title:"value",$ref:"#/components/schemas/uint"},input:{title:"input data",$ref:"#/components/schemas/bytes"},gasPrice:{title:"gas price",description:"The gas price willing to be paid by the sender in wei",$ref:"#/components/schemas/uint"},chainId:{title:"chainId",description:"Chain ID that this transaction is valid on.",$ref:"#/components/schemas/uint"}}},TransactionUnsigned:{oneOf:[{$ref:"#/components/schemas/Transaction4844Unsigned"},{$ref:"#/components/schemas/Transaction1559Unsigned"},{$ref:"#/components/schemas/Transaction2930Unsigned"},{$ref:"#/components/schemas/TransactionLegacyUnsigned"}]},Transaction4844Signed:{title:"Signed 4844 Transaction",type:"object",allOf:[{$ref:"#/components/schemas/Transaction4844Unsigned"},{title:"EIP-4844 transaction signature properties.",required:["yParity","r","s"],properties:{yParity:{title:"yParity",description:"The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",$ref:"#/components/schemas/uint"},r:{title:"r",$ref:"#/components/schemas/uint"},s:{title:"s",$ref:"#/components/schemas/uint"}}}]},Transaction1559Signed:{title:"Signed 1559 Transaction",type:"object",allOf:[{$ref:"#/components/schemas/Transaction1559Unsigned"},{title:"EIP-1559 transaction signature properties.",required:["yParity","r","s"],properties:{yParity:{title:"yParity",description:"The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",$ref:"#/components/schemas/uint"},v:{title:"v",description:"For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",$ref:"#/components/schemas/uint"},r:{title:"r",$ref:"#/components/schemas/uint"},s:{title:"s",$ref:"#/components/schemas/uint"}}}]},Transaction2930Signed:{title:"Signed 2930 Transaction",type:"object",allOf:[{$ref:"#/components/schemas/Transaction2930Unsigned"},{title:"EIP-2930 transaction signature properties.",required:["yParity","r","s"],properties:{yParity:{title:"yParity",description:"The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",$ref:"#/components/schemas/uint"},v:{title:"v",description:"For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",$ref:"#/components/schemas/uint"},r:{title:"r",$ref:"#/components/schemas/uint"},s:{title:"s",$ref:"#/components/schemas/uint"}}}]},TransactionLegacySigned:{title:"Signed Legacy Transaction",type:"object",allOf:[{$ref:"#/components/schemas/TransactionLegacyUnsigned"},{title:"Legacy transaction signature properties.",required:["v","r","s"],properties:{v:{title:"v",$ref:"#/components/schemas/uint"},r:{title:"r",$ref:"#/components/schemas/uint"},s:{title:"s",$ref:"#/components/schemas/uint"}}}]},TransactionSigned:{oneOf:[{$ref:"#/components/schemas/Transaction4844Signed"},{$ref:"#/components/schemas/Transaction1559Signed"},{$ref:"#/components/schemas/Transaction2930Signed"},{$ref:"#/components/schemas/TransactionLegacySigned"}]},TransactionInfo:{type:"object",title:"Transaction information",allOf:[{title:"Contextual information",required:["blockHash","blockNumber","from","hash","transactionIndex"],unevaluatedProperties:!1,properties:{blockHash:{title:"block hash",$ref:"#/components/schemas/hash32"},blockNumber:{title:"block number",$ref:"#/components/schemas/uint"},from:{title:"from address",$ref:"#/components/schemas/address"},hash:{title:"transaction hash",$ref:"#/components/schemas/hash32"},transactionIndex:{title:"transaction index",$ref:"#/components/schemas/uint"}}},{$ref:"#/components/schemas/TransactionSigned"}]},GenericTransaction:{type:"object",title:"Transaction object generic to all types",additionalProperties:!1,properties:{type:{title:"type",$ref:"#/components/schemas/byte"},nonce:{title:"nonce",$ref:"#/components/schemas/uint"},to:{title:"to address",oneOf:[{title:"Contract Creation (null)",type:"null"},{title:"Address",$ref:"#/components/schemas/address"}]},from:{title:"from address",$ref:"#/components/schemas/address"},gas:{title:"gas limit",$ref:"#/components/schemas/uint"},value:{title:"value",$ref:"#/components/schemas/uint"},input:{title:"input data",$ref:"#/components/schemas/bytes"},gasPrice:{title:"gas price",description:"The gas price willing to be paid by the sender in wei",$ref:"#/components/schemas/uint"},maxPriorityFeePerGas:{title:"max priority fee per gas",description:"Maximum fee per gas the sender is willing to pay to miners in wei",$ref:"#/components/schemas/uint"},maxFeePerGas:{title:"max fee per gas",description:"The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",$ref:"#/components/schemas/uint"},maxFeePerBlobGas:{title:"max fee per blob gas",description:"The maximum total fee per gas the sender is willing to pay for blob gas in wei",$ref:"#/components/schemas/uint"},accessList:{title:"accessList",description:"EIP-2930 access list",$ref:"#/components/schemas/AccessList"},blobVersionedHashes:{title:"blobVersionedHashes",description:"List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",type:"array",items:{$ref:"#/components/schemas/hash32"}},blobs:{title:"blobs",description:"Raw blob data.",type:"array",items:{$ref:"#/components/schemas/bytes"}},chainId:{title:"chainId",description:"Chain ID that this transaction is valid on.",$ref:"#/components/schemas/uint"}}},Withdrawal:{type:"object",title:"Validator withdrawal",required:["index","validatorIndex","address","amount"],additionalProperties:!1,properties:{index:{title:"index of withdrawal",$ref:"#/components/schemas/uint64"},validatorIndex:{title:"index of validator that generated withdrawal",$ref:"#/components/schemas/uint64"},address:{title:"recipient address for withdrawal value",$ref:"#/components/schemas/address"},amount:{title:"value contained in withdrawal",$ref:"#/components/schemas/uint256"}}},ForkchoiceStateV1:{title:"Forkchoice state object V1",type:"object",required:["headBlockHash","safeBlockHash","finalizedBlockHash"],properties:{headBlockHash:{title:"Head block hash",$ref:"#/components/schemas/hash32"},safeBlockHash:{title:"Safe block hash",$ref:"#/components/schemas/hash32"},finalizedBlockHash:{title:"Finalized block hash",$ref:"#/components/schemas/hash32"}}},ForkchoiceUpdatedResponseV1:{title:"Forkchoice updated response",type:"object",required:["payloadStatus"],properties:{payloadStatus:{title:"Payload status",$ref:"#/components/schemas/RestrictedPayloadStatusV1"},payloadId:{title:"Payload id",$ref:"#/components/schemas/bytes8"}}},PayloadAttributesV1:{title:"Payload attributes object V1",type:"object",required:["timestamp","prevRandao","suggestedFeeRecipient"],properties:{timestamp:{title:"Timestamp",$ref:"#/components/schemas/uint64"},prevRandao:{title:"Previous randao value",$ref:"#/components/schemas/bytes32"},suggestedFeeRecipient:{title:"Suggested fee recipient",$ref:"#/components/schemas/address"}}},PayloadAttributesV2:{title:"Payload attributes object V2",type:"object",required:["timestamp","prevRandao","suggestedFeeRecipient","withdrawals"],properties:{timestamp:{$ref:"#/components/schemas/PayloadAttributesV1/properties/timestamp"},prevRandao:{$ref:"#/components/schemas/PayloadAttributesV1/properties/prevRandao"},suggestedFeeRecipient:{$ref:"#/components/schemas/PayloadAttributesV1/properties/suggestedFeeRecipient"},withdrawals:{title:"Withdrawals",type:"array",items:{$ref:"#/components/schemas/WithdrawalV1"}}}},PayloadAttributesV3:{title:"Payload attributes object V3",type:"object",required:["timestamp","prevRandao","suggestedFeeRecipient","withdrawals","parentBeaconBlockRoot"],properties:{timestamp:{$ref:"#/components/schemas/PayloadAttributesV2/properties/timestamp"},prevRandao:{$ref:"#/components/schemas/PayloadAttributesV2/properties/prevRandao"},suggestedFeeRecipient:{$ref:"#/components/schemas/PayloadAttributesV2/properties/suggestedFeeRecipient"},withdrawals:{$ref:"#/components/schemas/PayloadAttributesV2/properties/withdrawals"},parentBeaconBlockRoot:{title:"Parent beacon block root",$ref:"#/components/schemas/hash32"}}},PayloadStatusV1:{title:"Payload status object V1",type:"object",required:["status"],properties:{status:{title:"Payload validation status",type:"string",enum:["VALID","INVALID","SYNCING","ACCEPTED","INVALID_BLOCK_HASH"]},latestValidHash:{title:"The hash of the most recent valid block",$ref:"#/components/schemas/hash32"},validationError:{title:"Validation error message",type:"string"}}},RestrictedPayloadStatusV1:{$ref:"#/components/schemas/PayloadStatusV1",properties:{status:{$ref:"#/components/schemas/PayloadStatusV1/properties/status",description:"Set of possible values is restricted to VALID, INVALID, SYNCING",enum:["VALID","INVALID","SYNCING"]},latestValidHash:{$ref:"#/components/schemas/PayloadStatusV1/properties/latestValidHash"},validationError:{$ref:"#/components/schemas/PayloadStatusV1/properties/validationError"}}},PayloadStatusNoInvalidBlockHash:{$ref:"#/components/schemas/PayloadStatusV1",title:"Payload status object deprecating INVALID_BLOCK_HASH status",properties:{status:{$ref:"#/components/schemas/PayloadStatusV1/properties/status",enum:["VALID","INVALID","SYNCING","ACCEPTED"]},latestValidHash:{$ref:"#/components/schemas/PayloadStatusV1/properties/latestValidHash"},validationError:{$ref:"#/components/schemas/PayloadStatusV1/properties/validationError"}}},ExecutionPayloadV1:{title:"Execution payload object V1",type:"object",required:["parentHash","feeRecipient","stateRoot","receiptsRoot","logsBloom","prevRandao","blockNumber","gasLimit","gasUsed","timestamp","extraData","baseFeePerGas","blockHash","transactions"],properties:{parentHash:{title:"Parent block hash",$ref:"#/components/schemas/hash32"},feeRecipient:{title:"Recipient of transaction priority fees",$ref:"#/components/schemas/address"},stateRoot:{title:"State root",$ref:"#/components/schemas/hash32"},receiptsRoot:{title:"Receipts root",$ref:"#/components/schemas/hash32"},logsBloom:{title:"Bloom filter",$ref:"#/components/schemas/bytes256"},prevRandao:{title:"Previous randao value",$ref:"#/components/schemas/bytes32"},blockNumber:{title:"Block number",$ref:"#/components/schemas/uint64"},gasLimit:{title:"Gas limit",$ref:"#/components/schemas/uint64"},gasUsed:{title:"Gas used",$ref:"#/components/schemas/uint64"},timestamp:{title:"Timestamp",$ref:"#/components/schemas/uint64"},extraData:{title:"Extra data",$ref:"#/components/schemas/bytesMax32"},baseFeePerGas:{title:"Base fee per gas",$ref:"#/components/schemas/uint256"},blockHash:{title:"Block hash",$ref:"#/components/schemas/hash32"},transactions:{title:"Transactions",type:"array",items:{$ref:"#/components/schemas/bytes"}}}},WithdrawalV1:{title:"Withdrawal object V1",type:"object",required:["index","validatorIndex","address","amount"],properties:{index:{title:"Withdrawal index",$ref:"#/components/schemas/uint64"},validatorIndex:{title:"Validator index",$ref:"#/components/schemas/uint64"},address:{title:"Withdrawal address",$ref:"#/components/schemas/address"},amount:{title:"Withdrawal amount",$ref:"#/components/schemas/uint64"}}},ExecutionPayloadV2:{title:"Execution payload object V2",type:"object",required:["parentHash","feeRecipient","stateRoot","receiptsRoot","logsBloom","prevRandao","blockNumber","gasLimit","gasUsed","timestamp","extraData","baseFeePerGas","blockHash","transactions","withdrawals"],properties:{parentHash:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/parentHash"},feeRecipient:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/feeRecipient"},stateRoot:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/stateRoot"},receiptsRoot:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/receiptsRoot"},logsBloom:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/logsBloom"},prevRandao:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/prevRandao"},blockNumber:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/blockNumber"},gasLimit:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/gasLimit"},gasUsed:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/gasUsed"},timestamp:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/timestamp"},extraData:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/extraData"},baseFeePerGas:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/baseFeePerGas"},blockHash:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/blockHash"},transactions:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/transactions"},withdrawals:{title:"Withdrawals",type:"array",items:{$ref:"#/components/schemas/WithdrawalV1"}}}},ExecutionPayloadV3:{title:"Execution payload object V3",type:"object",required:["parentHash","feeRecipient","stateRoot","receiptsRoot","logsBloom","prevRandao","blockNumber","gasLimit","gasUsed","timestamp","extraData","baseFeePerGas","blockHash","transactions","withdrawals","blobGasUsed","excessBlobGas"],properties:{parentHash:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/parentHash"},feeRecipient:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/feeRecipient"},stateRoot:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/stateRoot"},receiptsRoot:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/receiptsRoot"},logsBloom:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/logsBloom"},prevRandao:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/prevRandao"},blockNumber:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/blockNumber"},gasLimit:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/gasLimit"},gasUsed:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/gasUsed"},timestamp:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/timestamp"},extraData:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/extraData"},baseFeePerGas:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/baseFeePerGas"},blockHash:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/blockHash"},transactions:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/transactions"},withdrawals:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/withdrawals"},blobGasUsed:{title:"Blob gas used",$ref:"#/components/schemas/uint64"},excessBlobGas:{title:"Excess blob gas",$ref:"#/components/schemas/uint64"}}},ExecutionPayloadV4:{title:"Execution payload object V4",type:"object",required:["parentHash","feeRecipient","stateRoot","receiptsRoot","logsBloom","prevRandao","blockNumber","gasLimit","gasUsed","timestamp","extraData","baseFeePerGas","blockHash","transactions","withdrawals","blobGasUsed","excessBlobGas","depositRequests","withdrawalRequests","consolidationRequests"],properties:{parentHash:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/parentHash"},feeRecipient:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/feeRecipient"},stateRoot:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/stateRoot"},receiptsRoot:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/receiptsRoot"},logsBloom:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/logsBloom"},prevRandao:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/prevRandao"},blockNumber:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/blockNumber"},gasLimit:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/gasLimit"},gasUsed:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/gasUsed"},timestamp:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/timestamp"},extraData:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/extraData"},baseFeePerGas:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/baseFeePerGas"},blockHash:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/blockHash"},transactions:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/transactions"},withdrawals:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/withdrawals"},blobGasUsed:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/blobGasUsed"},excessBlobGas:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/excessBlobGas"},depositRequests:{title:"Deposit requests",type:"array",items:{$ref:"#/components/schemas/DepositRequestV1"}},withdrawalRequests:{title:"Withdrawals requests",type:"array",items:{$ref:"#/components/schemas/WithdrawalRequestV1"}},consolidationRequests:{title:"Consolidation requests",type:"array",items:{$ref:"#/components/schemas/ConsolidationRequestV1"}}}},ExecutionPayloadBodyV1:{title:"Execution payload body object V1",type:"object",required:["transactions"],properties:{transactions:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/transactions"},withdrawals:{title:"Withdrawals",type:["array","null"],items:{$ref:"#/components/schemas/WithdrawalV1"}}}},ExecutionPayloadBodyV2:{title:"Execution payload body object V2",type:"object",required:["transactions"],properties:{transactions:{title:"Transactions",type:"array",items:{$ref:"#/components/schemas/bytes"}},withdrawals:{title:"Withdrawals",type:["array","null"],items:{$ref:"#/components/schemas/WithdrawalV1"}},depositRequests:{title:"Deposit requests",type:["array","null"],items:{$ref:"#/components/schemas/DepositRequestV1"}},withdrawalRequests:{title:"Withdrawals requests",type:["array","null"],items:{$ref:"#/components/schemas/WithdrawalRequestV1"}},consolidationRequests:{title:"Consolidation requests - array - 'null'",items:{$ref:"#/components/schemas/ConsolidationRequestV1"}}}},BlobsBundleV1:{title:"Blobs bundle object V1",type:"object",required:["commitments","proofs","blobs"],properties:{commitments:{title:"Commitments",type:"array",items:{$ref:"#/components/schemas/bytes48"}},proofs:{title:"Proofs",type:"array",items:{$ref:"#/components/schemas/bytes48"}},blobs:{title:"Blobs",type:"array",items:{$ref:"#/components/schemas/bytes"}}}},DepositRequestV1:{title:"Deposit request object V1",type:"object",required:["pubkey","withdrawalCredentials","amount","signature","index"],properties:{pubkey:{title:"Public key",$ref:"#/components/schemas/bytes48"},withdrawalCredentials:{title:"Withdrawal credentials",$ref:"#/components/schemas/bytes32"},amount:{title:"Deposit amount",$ref:"#/components/schemas/uint64"},signature:{title:"Deposit signature",$ref:"#/components/schemas/bytes96"},index:{title:"Deposit index",$ref:"#/components/schemas/uint64"}}},WithdrawalRequestV1:{title:"Withdrawal request object V1",type:"object",required:["sourceAddress","validatorPubkey","amount"],properties:{sourceAddress:{title:"Source address",$ref:"#/components/schemas/address"},validatorPubkey:{title:"Validator public key",$ref:"#/components/schemas/bytes48"},amount:{title:"Withdraw amount",$ref:"#/components/schemas/uint64"}}},ConsolidationRequestV1:{title:"Consolidation request object V1",type:"object",required:["sourceAddress","sourcePubkey","targetPubkey"],properties:{sourceAddress:{title:"Source address",$ref:"#/components/schemas/address"},sourcePubkey:{title:"Source validator public key",$ref:"#/components/schemas/bytes48"},targetPubkey:{title:"Target validator public key",$ref:"#/components/schemas/bytes48"}}},TransitionConfigurationV1:{title:"Transition configuration object",type:"object",required:["terminalTotalDifficulty","terminalBlockHash","terminalBlockNumber"],properties:{terminalTotalDifficulty:{title:"Terminal total difficulty",$ref:"#/components/schemas/uint256"},terminalBlockHash:{title:"Terminal block hash",$ref:"#/components/schemas/hash32"},terminalBlockNumber:{title:"Terminal block number",$ref:"#/components/schemas/uint64"}}}},tags:{MetaMask:{name:"MetaMask",description:"MetaMask-specific methods."},Restricted:{name:"Restricted",description:"Restricted methods. If a method is restricted, the caller must have the corresponding permission via `wallet_requestPermissions` in order to call it."},Mobile:{name:"Mobile",description:"Mobile-specific methods."},Experimental:{name:"Experimental",description:"Experimental methods."},Deprecated:{name:"Deprecated",description:"Deprecated methods."},Ethereum:{name:"Ethereum API",description:"Ethereum execution API methods."},Multichain:{name:"Multichain API",description:"Multichain API methods."}},contentDescriptors:{},examplePairings:{},links:{},examples:{}}}}}},{package:"@metamask/multichain-api-middleware>@metamask/api-specs",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/api-specs/dist/build/openrpc.json"}],[211,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:7,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=7;try{const e=function(e){const t={...e,TransactionManager:{transactions:e.transactions||[],gasMultiplier:e.gasMultiplier||1}};return delete t.transactions,delete t.gasMultiplier,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #7${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/007.js"}],[2110,{"./build/multichain-openrpc.json":2108,"./build/openrpc.json":2109},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.MultiChainOpenRPCDocument=n.MetaMaskOpenRPCDocument=void 0;const s=r(e("./build/openrpc.json"));n.MetaMaskOpenRPCDocument=s.default;const a=r(e("./build/multichain-openrpc.json"));n.MultiChainOpenRPCDocument=a.default,n.default=s.default}}},{package:"@metamask/multichain-api-middleware>@metamask/api-specs",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/api-specs/dist/index.js"}],[2111,{"../scope/constants.cjs":2118,"../scope/transform.cjs":2122,"../scope/types.cjs":2123,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.setEthAccounts=n.getEthAccounts=void 0;const r=e("@metamask/utils"),s=e("../scope/constants.cjs"),a=e("../scope/transform.cjs"),o=e("../scope/types.cjs"),i=e=>{const{namespace:t}=(0,o.parseScopeString)(e);return t===r.KnownCaipNamespace.Eip155||e===s.KnownWalletScopeString.Eip155},c=e=>{const t=[];return Object.entries(e).forEach((([e,{accounts:n}])=>{n?.forEach((e=>{const{address:n,chainId:s}=(0,r.parseCaipAccountId)(e);i(s)&&((0,r.assertIsStrictHexString)(n),t.push(n))}))})),t};n.getEthAccounts=e=>{const{requiredScopes:t,optionalScopes:n}=e,r=[...c(t),...c(n)];return(0,a.getUniqueArrayItems)(r)};const l=(e,t)=>{const n={};return Object.entries(e).forEach((([e,s])=>{const a=e,c=a===r.KnownCaipNamespace.Wallet,{namespace:l,reference:d}=(0,o.parseScopeString)(a);if(!i(a)&&!c)return void(n[a]=s);let u=[];l&&d&&(u=t.map((e=>`${l}:${d}:${e}`))),n[a]={...s,accounts:u}})),n};n.setEthAccounts=(e,t)=>({...e,requiredScopes:l(e.requiredScopes,t),optionalScopes:l(e.optionalScopes,t)})}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/adapters/caip-permission-adapter-eth-accounts.cjs"}],[2112,{"../scope/transform.cjs":2122,"../scope/types.cjs":2123,"@metamask/controller-utils":1512,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.setPermittedEthChainIds=n.addPermittedEthChainId=n.getPermittedEthChainIds=void 0;const r=e("@metamask/controller-utils"),s=e("@metamask/utils"),a=e("../scope/transform.cjs"),o=e("../scope/types.cjs"),i=e=>{const t=[];return Object.keys(e).forEach((e=>{const{namespace:n,reference:a}=(0,o.parseScopeString)(e);n===s.KnownCaipNamespace.Eip155&&a&&t.push((0,r.toHex)(a))})),t};n.getPermittedEthChainIds=e=>{const{requiredScopes:t,optionalScopes:n}=e,r=[...i(t),...i(n)];return(0,a.getUniqueArrayItems)(r)};n.addPermittedEthChainId=(e,t)=>{const n=`eip155:${(0,s.hexToBigInt)(t).toString(10)}`;return Object.keys(e.requiredScopes).includes(n)||Object.keys(e.optionalScopes).includes(n)?e:{...e,optionalScopes:{...e.optionalScopes,[n]:{accounts:[]}}}};const c=(e,t)=>{const n={};return Object.entries(e).forEach((([e,a])=>{const i=e,{namespace:c,reference:l}=(0,o.parseScopeString)(i);if(l)if(c===s.KnownCaipNamespace.Eip155){const e=(0,r.toHex)(l);t.includes(e)&&(n[i]=a)}else n[i]=a;else n[i]=a})),n};n.setPermittedEthChainIds=(e,t)=>{let r={...e,requiredScopes:c(e.requiredScopes,t),optionalScopes:c(e.optionalScopes,t)};return t.forEach((e=>{r=(0,n.addPermittedEthChainId)(r,e)})),r}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/adapters/caip-permission-adapter-permittedChains.cjs"}],[2113,{"../scope/constants.cjs":2118,"../scope/transform.cjs":2122,"../scope/types.cjs":2123,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getPermittedAccountsForScopes=n.getSessionScopes=n.getInternalScopesObject=void 0;const r=e("@metamask/utils"),s=e("../scope/constants.cjs"),a=e("../scope/transform.cjs"),o=e("../scope/types.cjs");n.getInternalScopesObject=e=>{const t={};return Object.entries(e).forEach((([e,{accounts:n}])=>{t[e]={accounts:n}})),t};const i=(e,{getNonEvmSupportedMethods:t})=>{const n={};return Object.entries(e).forEach((([e,{accounts:a}])=>{const i=e,{namespace:c,reference:l}=(0,o.parseScopeString)(i);let d=[],u=[];i===r.KnownCaipNamespace.Wallet||c===r.KnownCaipNamespace.Wallet?d=l===r.KnownCaipNamespace.Eip155?s.KnownWalletNamespaceRpcMethods[l]:(0,r.isCaipChainId)(i)?t(i):s.KnownWalletRpcMethods:c===r.KnownCaipNamespace.Eip155?(d=s.KnownRpcMethods[c],u=s.KnownNotifications[c]):(d=t(i),u=[]),n[i]={methods:d,notifications:u,accounts:a}})),n};n.getSessionScopes=(e,{getNonEvmSupportedMethods:t})=>(0,a.mergeNormalizedScopes)(i(e.requiredScopes,{getNonEvmSupportedMethods:t}),i(e.optionalScopes,{getNonEvmSupportedMethods:t}));n.getPermittedAccountsForScopes=(e,t)=>{const n=[];return t.forEach((t=>{const r=e.requiredScopes[t],s=e.optionalScopes[t];r&&n.push(...r.accounts),s&&n.push(...s.accounts)})),[...new Set(n)]}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/adapters/caip-permission-adapter-session-scopes.cjs"}],[2114,{"./scope/assert.cjs":2116,"./scope/supported.cjs":2121,"./scope/transform.cjs":2122,"./scope/types.cjs":2123,"@metamask/permission-controller":2254,"@metamask/utils":2822,lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.Caip25CaveatMutators=n.caip25EndowmentBuilder=n.caip25CaveatBuilder=n.diffScopesForCaip25CaveatValue=n.createCaip25Caveat=n.Caip25EndowmentPermissionName=n.Caip25CaveatType=void 0;const r=e("@metamask/permission-controller"),s=e("@metamask/utils"),a=e("lodash"),o=e("./scope/assert.cjs"),i=e("./scope/supported.cjs"),c=e("./scope/transform.cjs"),l=e("./scope/types.cjs");n.Caip25CaveatType="authorizedScopes",n.Caip25EndowmentPermissionName="endowment:caip25";function d(e,t,n){const r=(0,a.cloneDeep)(e),s=t[n];for(const[e,t]of Object.entries(s)){const s=e,a=r[n][s];if(a){const e=t.accounts.filter((e=>!a?.accounts.includes(e)));if(e.length>0){r[n][s]={accounts:e};continue}delete r[n][s]}else r[n][s]=t}return r}function u(e,t,n){return Object.values(e).every((e=>e.accounts.every((e=>(0,i.isSupportedAccount)(e,{getEvmInternalAccounts:t,getNonEvmAccountAddresses:n})))))}n.createCaip25Caveat=e=>({type:n.Caip25CaveatType,value:e}),n.diffScopesForCaip25CaveatValue=d;n.caip25CaveatBuilder=({findNetworkClientIdByChainId:e,listAccounts:t,isNonEvmScopeSupported:r,getNonEvmAccountAddresses:a})=>({type:n.Caip25CaveatType,validator:(c,l,d)=>{if(!(c.value&&(0,s.hasProperty)(c.value,"requiredScopes")&&(0,s.hasProperty)(c.value,"optionalScopes")&&(0,s.hasProperty)(c.value,"isMultichainOrigin")&&(0,s.hasProperty)(c.value,"sessionProperties")&&"boolean"==typeof c.value.isMultichainOrigin&&(0,s.isObject)(c.value.sessionProperties)))throw new Error(`${n.Caip25EndowmentPermissionName} error: Received invalid value for caveat of type "${n.Caip25CaveatType}".`);const{requiredScopes:p,optionalScopes:h,sessionProperties:m}=c.value;if(!Object.keys(m).every((e=>(0,i.isSupportedSessionProperty)(e))))throw new Error(`${n.Caip25EndowmentPermissionName} error: Received unknown session property(s) for caveat of type "${n.Caip25CaveatType}".`);(0,o.assertIsInternalScopesObject)(p),(0,o.assertIsInternalScopesObject)(h);const f=t=>{try{return e(t),!0}catch{return!1}},g=Object.keys(p).every((e=>(0,i.isSupportedScopeString)(e,{isEvmChainIdSupported:f,isNonEvmScopeSupported:r}))),b=Object.keys(h).every((e=>(0,i.isSupportedScopeString)(e,{isEvmChainIdSupported:f,isNonEvmScopeSupported:r})));if(!g||!b)throw new Error(`${n.Caip25EndowmentPermissionName} error: Received scopeString value(s) for caveat of type "${n.Caip25CaveatType}" that are not supported by the wallet.`);const y=u(p,t,a),C=u(h,t,a);if(!y||!C)throw new Error(`${n.Caip25EndowmentPermissionName} error: Received account value(s) for caveat of type "${n.Caip25CaveatType}" that are not supported by the wallet.`)},merger:(e,t)=>{const n={requiredScopes:(0,c.mergeInternalScopes)(e.requiredScopes,t.requiredScopes),optionalScopes:(0,c.mergeInternalScopes)(e.optionalScopes,t.optionalScopes),sessionProperties:{...e.sessionProperties,...t.sessionProperties},isMultichainOrigin:e.isMultichainOrigin},r=d(e,n,"requiredScopes");return[n,d(r,n,"optionalScopes")]}});n.caip25EndowmentBuilder=Object.freeze({targetName:n.Caip25EndowmentPermissionName,specificationBuilder:()=>({permissionType:r.PermissionType.Endowment,targetName:n.Caip25EndowmentPermissionName,allowedCaveats:[n.Caip25CaveatType],endowmentGetter:e=>null,validator:e=>{if(1!==e.caveats?.length||e.caveats?.[0]?.type!==n.Caip25CaveatType)throw new Error(`${n.Caip25EndowmentPermissionName} error: Invalid caveats. There must be a single caveat of type "${n.Caip25CaveatType}".`)}})}),n.Caip25CaveatMutators={[n.Caip25CaveatType]:{removeScope:function(e,t){const n=Object.entries(e.requiredScopes).filter((([e])=>e!==t)),a=Object.entries(e.optionalScopes).filter((([e])=>e!==t)),o=n.length!==Object.keys(e.requiredScopes).length,i=a.length!==Object.keys(e.optionalScopes).length;if(!o&&!i)return{operation:r.CaveatMutatorOperation.Noop};const c={...e,requiredScopes:Object.fromEntries(n),optionalScopes:Object.fromEntries(a)};if([...n,...a].some((([e])=>{const{namespace:t}=(0,l.parseScopeString)(e);return t!==s.KnownCaipNamespace.Wallet})))return{operation:r.CaveatMutatorOperation.UpdateValue,value:c};return{operation:r.CaveatMutatorOperation.RevokePermission}},removeAccount:function(e,t){const n=(0,a.cloneDeep)(e);[n.requiredScopes,n.optionalScopes].forEach((e=>{Object.entries(e).forEach((([,e])=>{!function(e,t){e.accounts&&(e.accounts=e.accounts.filter(function(e){return t=>(0,s.parseCaipAccountId)(t).address!==e}(t)))}(e,t)}))}));if((0,a.isEqual)(n,e))return{operation:r.CaveatMutatorOperation.Noop};if([...Object.values(n.requiredScopes),...Object.values(n.optionalScopes)].some((({accounts:e})=>e.length>0)))return{operation:r.CaveatMutatorOperation.UpdateValue,value:n};return{operation:r.CaveatMutatorOperation.RevokePermission}}}}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/caip25Permission.cjs"}],[2115,{"./adapters/caip-permission-adapter-eth-accounts.cjs":2111,"./adapters/caip-permission-adapter-permittedChains.cjs":2112,"./adapters/caip-permission-adapter-session-scopes.cjs":2113,"./caip25Permission.cjs":2114,"./scope/assert.cjs":2116,"./scope/authorization.cjs":2117,"./scope/constants.cjs":2118,"./scope/filter.cjs":2120,"./scope/transform.cjs":2122,"./scope/types.cjs":2123},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.Caip25CaveatMutators=n.caip25EndowmentBuilder=n.Caip25EndowmentPermissionName=n.createCaip25Caveat=n.Caip25CaveatType=n.caip25CaveatBuilder=n.normalizeAndMergeScopes=n.mergeInternalScopes=n.mergeNormalizedScopes=n.mergeScopeObject=n.normalizeScope=n.getUniqueArrayItems=n.parseScopeString=n.getSupportedScopeObjects=n.KnownWalletScopeString=n.KnownNotifications=n.KnownWalletNamespaceRpcMethods=n.KnownRpcMethods=n.KnownWalletRpcMethods=n.assertIsInternalScopeString=n.bucketScopes=n.validateAndNormalizeScopes=n.getPermittedAccountsForScopes=n.getSessionScopes=n.getInternalScopesObject=n.setPermittedEthChainIds=n.addPermittedEthChainId=n.getPermittedEthChainIds=n.setEthAccounts=n.getEthAccounts=void 0;var r=e("./adapters/caip-permission-adapter-eth-accounts.cjs");Object.defineProperty(n,"getEthAccounts",{enumerable:!0,get:function(){return r.getEthAccounts}}),Object.defineProperty(n,"setEthAccounts",{enumerable:!0,get:function(){return r.setEthAccounts}});var s=e("./adapters/caip-permission-adapter-permittedChains.cjs");Object.defineProperty(n,"getPermittedEthChainIds",{enumerable:!0,get:function(){return s.getPermittedEthChainIds}}),Object.defineProperty(n,"addPermittedEthChainId",{enumerable:!0,get:function(){return s.addPermittedEthChainId}}),Object.defineProperty(n,"setPermittedEthChainIds",{enumerable:!0,get:function(){return s.setPermittedEthChainIds}});var a=e("./adapters/caip-permission-adapter-session-scopes.cjs");Object.defineProperty(n,"getInternalScopesObject",{enumerable:!0,get:function(){return a.getInternalScopesObject}}),Object.defineProperty(n,"getSessionScopes",{enumerable:!0,get:function(){return a.getSessionScopes}}),Object.defineProperty(n,"getPermittedAccountsForScopes",{enumerable:!0,get:function(){return a.getPermittedAccountsForScopes}});var o=e("./scope/authorization.cjs");Object.defineProperty(n,"validateAndNormalizeScopes",{enumerable:!0,get:function(){return o.validateAndNormalizeScopes}}),Object.defineProperty(n,"bucketScopes",{enumerable:!0,get:function(){return o.bucketScopes}});var i=e("./scope/assert.cjs");Object.defineProperty(n,"assertIsInternalScopeString",{enumerable:!0,get:function(){return i.assertIsInternalScopeString}});var c=e("./scope/constants.cjs");Object.defineProperty(n,"KnownWalletRpcMethods",{enumerable:!0,get:function(){return c.KnownWalletRpcMethods}}),Object.defineProperty(n,"KnownRpcMethods",{enumerable:!0,get:function(){return c.KnownRpcMethods}}),Object.defineProperty(n,"KnownWalletNamespaceRpcMethods",{enumerable:!0,get:function(){return c.KnownWalletNamespaceRpcMethods}}),Object.defineProperty(n,"KnownNotifications",{enumerable:!0,get:function(){return c.KnownNotifications}}),Object.defineProperty(n,"KnownWalletScopeString",{enumerable:!0,get:function(){return c.KnownWalletScopeString}});var l=e("./scope/filter.cjs");Object.defineProperty(n,"getSupportedScopeObjects",{enumerable:!0,get:function(){return l.getSupportedScopeObjects}});var d=e("./scope/types.cjs");Object.defineProperty(n,"parseScopeString",{enumerable:!0,get:function(){return d.parseScopeString}});var u=e("./scope/transform.cjs");Object.defineProperty(n,"getUniqueArrayItems",{enumerable:!0,get:function(){return u.getUniqueArrayItems}}),Object.defineProperty(n,"normalizeScope",{enumerable:!0,get:function(){return u.normalizeScope}}),Object.defineProperty(n,"mergeScopeObject",{enumerable:!0,get:function(){return u.mergeScopeObject}}),Object.defineProperty(n,"mergeNormalizedScopes",{enumerable:!0,get:function(){return u.mergeNormalizedScopes}}),Object.defineProperty(n,"mergeInternalScopes",{enumerable:!0,get:function(){return u.mergeInternalScopes}}),Object.defineProperty(n,"normalizeAndMergeScopes",{enumerable:!0,get:function(){return u.normalizeAndMergeScopes}});var p=e("./caip25Permission.cjs");Object.defineProperty(n,"caip25CaveatBuilder",{enumerable:!0,get:function(){return p.caip25CaveatBuilder}}),Object.defineProperty(n,"Caip25CaveatType",{enumerable:!0,get:function(){return p.Caip25CaveatType}}),Object.defineProperty(n,"createCaip25Caveat",{enumerable:!0,get:function(){return p.createCaip25Caveat}}),Object.defineProperty(n,"Caip25EndowmentPermissionName",{enumerable:!0,get:function(){return p.Caip25EndowmentPermissionName}}),Object.defineProperty(n,"caip25EndowmentBuilder",{enumerable:!0,get:function(){return p.caip25EndowmentBuilder}}),Object.defineProperty(n,"Caip25CaveatMutators",{enumerable:!0,get:function(){return p.Caip25CaveatMutators}})}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/index.cjs"}],[2116,{"./errors.cjs":2119,"./supported.cjs":2121,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.assertIsInternalScopesObject=n.assertIsInternalScopeString=n.assertIsExternalScopesObject=n.assertScopesSupported=n.assertScopeSupported=void 0;const r=e("@metamask/utils"),s=e("./errors.cjs"),a=e("./supported.cjs");n.assertScopeSupported=(e,t,{isEvmChainIdSupported:n,isNonEvmScopeSupported:r,getNonEvmSupportedMethods:o})=>{const{methods:i,notifications:c}=t;if(!(0,a.isSupportedScopeString)(e,{isEvmChainIdSupported:n,isNonEvmScopeSupported:r}))throw s.Caip25Errors.requestedChainsNotSupportedError();if(!i.every((t=>(0,a.isSupportedMethod)(e,t,{getNonEvmSupportedMethods:o}))))throw s.Caip25Errors.requestedMethodsNotSupportedError();if(c&&!c.every((t=>(0,a.isSupportedNotification)(e,t))))throw s.Caip25Errors.requestedNotificationsNotSupportedError()};function o(e){if("object"!=typeof e||null===e)throw new Error("ExternalScopeObject must be an object");if((0,r.hasProperty)(e,"references")&&(!Array.isArray(e.references)||!e.references.every(r.isCaipReference)))throw new Error("ExternalScopeObject.references must be an array of CaipReference");if((0,r.hasProperty)(e,"accounts")&&(!Array.isArray(e.accounts)||!e.accounts.every(r.isCaipAccountId)))throw new Error("ExternalScopeObject.accounts must be an array of CaipAccountId");if((0,r.hasProperty)(e,"methods")&&(!Array.isArray(e.methods)||!e.methods.every((e=>"string"==typeof e))))throw new Error("ExternalScopeObject.methods must be an array of strings");if((0,r.hasProperty)(e,"notifications")&&(!Array.isArray(e.notifications)||!e.notifications.every((e=>"string"==typeof e))))throw new Error("ExternalScopeObject.notifications must be an array of strings");if((0,r.hasProperty)(e,"rpcDocuments")&&(!Array.isArray(e.rpcDocuments)||!e.rpcDocuments.every((e=>"string"==typeof e))))throw new Error("ExternalScopeObject.rpcDocuments must be an array of strings");if((0,r.hasProperty)(e,"rpcEndpoints")&&(!Array.isArray(e.rpcEndpoints)||!e.rpcEndpoints.every((e=>"string"==typeof e))))throw new Error("ExternalScopeObject.rpcEndpoints must be an array of strings")}function i(e){if("string"!=typeof e||!(0,r.isCaipNamespace)(e)&&!(0,r.isCaipChainId)(e))throw new Error("scopeString is not a valid ExternalScopeString")}function c(e){if("object"!=typeof e||null===e)throw new Error("InternalScopeObject must be an object");if(!(0,r.hasProperty)(e,"accounts")||!Array.isArray(e.accounts)||!e.accounts.every(r.isCaipAccountId))throw new Error("InternalScopeObject.accounts must be an array of CaipAccountId")}function l(e){if("string"!=typeof e||e!==r.KnownCaipNamespace.Wallet&&!(0,r.isCaipChainId)(e))throw new Error("scopeString is not a valid InternalScopeString")}n.assertScopesSupported=(e,{isEvmChainIdSupported:t,isNonEvmScopeSupported:r,getNonEvmSupportedMethods:s})=>{for(const[a,o]of Object.entries(e))(0,n.assertScopeSupported)(a,o,{isEvmChainIdSupported:t,isNonEvmScopeSupported:r,getNonEvmSupportedMethods:s})},n.assertIsExternalScopesObject=function(e){if("object"!=typeof e||null===e)throw new Error("ExternalScopesObject must be an object");for(const[t,n]of Object.entries(e))i(t),o(n)},n.assertIsInternalScopeString=l,n.assertIsInternalScopesObject=function(e){if("object"!=typeof e||null===e)throw new Error("InternalScopesObject must be an object");for(const[t,n]of Object.entries(e))l(t),c(n)}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/assert.cjs"}],[2117,{"./filter.cjs":2120,"./transform.cjs":2122,"./validation.cjs":2124},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.bucketScopes=n.validateAndNormalizeScopes=void 0;const r=e("./filter.cjs"),s=e("./transform.cjs"),a=e("./validation.cjs");n.validateAndNormalizeScopes=(e,t)=>{const{validRequiredScopes:n,validOptionalScopes:r}=(0,a.getValidScopes)(e,t);return{normalizedRequiredScopes:(0,s.normalizeAndMergeScopes)(n),normalizedOptionalScopes:(0,s.normalizeAndMergeScopes)(r)}};n.bucketScopes=(e,{isEvmChainIdSupported:t,isEvmChainIdSupportable:n,isNonEvmScopeSupported:s,getNonEvmSupportedMethods:a})=>{const{supportedScopes:o,unsupportedScopes:i}=(0,r.bucketScopesBySupport)(e,{isEvmChainIdSupported:t,isNonEvmScopeSupported:s,getNonEvmSupportedMethods:a}),{supportedScopes:c,unsupportedScopes:l}=(0,r.bucketScopesBySupport)(i,{isEvmChainIdSupported:n,isNonEvmScopeSupported:s,getNonEvmSupportedMethods:a});return{supportedScopes:o,supportableScopes:c,unsupportableScopes:l}}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/authorization.cjs"}],[2118,{"@metamask/api-specs":2110},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.KnownSessionProperties=n.KnownNotifications=n.KnownWalletNamespaceRpcMethods=n.KnownRpcMethods=n.Eip1193OnlyMethods=n.KnownWalletRpcMethods=n.CaipReferenceRegexes=n.KnownWalletScopeString=void 0;const s=r(e("@metamask/api-specs"));var a;!function(e){e.Eip155="wallet:eip155"}(a||(n.KnownWalletScopeString=a={})),n.CaipReferenceRegexes={eip155:/^(0|[1-9][0-9]*)$/u,bip122:/.*/u,solana:/.*/u},n.KnownWalletRpcMethods=["wallet_registerOnboarding","wallet_scanQRCode"];const o=["wallet_addEthereumChain"];n.Eip1193OnlyMethods=["wallet_switchEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_revokePermissions","eth_requestAccounts","eth_accounts","eth_coinbase","net_version","metamask_logWeb3ShimUsage","metamask_getProviderState","metamask_sendDomainMetadata","wallet_registerOnboarding"];const i=s.default.methods.map((({name:e})=>e)).filter((e=>!o.includes(e))).filter((e=>!n.KnownWalletRpcMethods.includes(e))).filter((e=>!n.Eip1193OnlyMethods.includes(e)));var c;n.KnownRpcMethods={eip155:i,bip122:[],solana:[]},n.KnownWalletNamespaceRpcMethods={eip155:o,bip122:[],solana:[]},n.KnownNotifications={eip155:["eth_subscription"],bip122:[],solana:[]},function(e){e.SolanaAccountChangedNotifications="solana_accountChanged_notifications"}(c||(n.KnownSessionProperties=c={}))}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/constants.cjs"}],[2119,{"@metamask/rpc-errors":2415},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.Caip25Errors=void 0;const r=e("@metamask/rpc-errors");n.Caip25Errors={requestedChainsNotSupportedError:()=>new r.JsonRpcError(5100,"Requested chains are not supported"),requestedMethodsNotSupportedError:()=>new r.JsonRpcError(5101,"Requested methods are not supported"),requestedNotificationsNotSupportedError:()=>new r.JsonRpcError(5102,"Requested notifications are not supported"),unknownMethodsRequestedError:()=>new r.JsonRpcError(5201,"Unknown method(s) requested"),unknownNotificationsRequestedError:()=>new r.JsonRpcError(5202,"Unknown notification(s) requested")}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/errors.cjs"}],[212,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:8,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=8;try{const e=function(e){const t={...e,NoticeController:{noticesList:e.noticesList||[]}};return delete t.noticesList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #8${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/008.js"}],[2120,{"./assert.cjs":2116,"./supported.cjs":2121},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getSupportedScopeObjects=n.bucketScopesBySupport=void 0;const r=e("./assert.cjs"),s=e("./supported.cjs");n.bucketScopesBySupport=(e,{isEvmChainIdSupported:t,isNonEvmScopeSupported:n,getNonEvmSupportedMethods:s})=>{const a={},o={};for(const[i,c]of Object.entries(e)){(0,r.assertIsInternalScopeString)(i);try{(0,r.assertScopeSupported)(i,c,{isEvmChainIdSupported:t,isNonEvmScopeSupported:n,getNonEvmSupportedMethods:s}),a[i]=c}catch{o[i]=c}}return{supportedScopes:a,unsupportedScopes:o}};const a=(e,t,{getNonEvmSupportedMethods:n})=>{const{methods:r,notifications:a}=t,o=r.filter((t=>(0,s.isSupportedMethod)(e,t,{getNonEvmSupportedMethods:n}))),i=a.filter((t=>(0,s.isSupportedNotification)(e,t)));return{...t,methods:o,notifications:i}};n.getSupportedScopeObjects=(e,{getNonEvmSupportedMethods:t})=>{const n={};for(const[s,o]of Object.entries(e))(0,r.assertIsInternalScopeString)(s),n[s]=a(s,o,{getNonEvmSupportedMethods:t});return n}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/filter.cjs"}],[2121,{"./constants.cjs":2118,"./types.cjs":2123,"@metamask/controller-utils":1512,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.isSupportedSessionProperty=n.isSupportedNotification=n.isSupportedMethod=n.isSupportedAccount=n.isSupportedScopeString=void 0;const r=e("@metamask/controller-utils"),s=e("@metamask/utils"),a=e("./constants.cjs"),o=e("./types.cjs");n.isSupportedScopeString=(e,{isEvmChainIdSupported:t,isNonEvmScopeSupported:n})=>{const{namespace:i,reference:c}=(0,o.parseScopeString)(e);switch(i){case s.KnownCaipNamespace.Wallet:return!(0,s.isCaipChainId)(e)||c===s.KnownCaipNamespace.Eip155||n(e);case s.KnownCaipNamespace.Eip155:return!c||a.CaipReferenceRegexes.eip155.test(c)&&t((0,r.toHex)(c));default:return!!(0,s.isCaipChainId)(e)&&n(e)}};n.isSupportedAccount=(e,{getEvmInternalAccounts:t,getNonEvmAccountAddresses:n})=>{const{address:a,chainId:o,chain:{namespace:i,reference:c}}=(0,s.parseCaipAccountId)(e),l=()=>t().some((e=>["eip155:eoa","eip155:erc4337"].includes(e.type)&&(0,r.isEqualCaseInsensitive)(a,e.address))),d=()=>n(o).includes(e);switch(i){case s.KnownCaipNamespace.Wallet:return c===s.KnownCaipNamespace.Eip155?l():d();case s.KnownCaipNamespace.Eip155:return l();default:return d()}};n.isSupportedMethod=(e,t,{getNonEvmSupportedMethods:n})=>{const{namespace:r,reference:i}=(0,o.parseScopeString)(e);if(!r)return!1;const c=()=>(0,s.isCaipChainId)(e)&&n(e).includes(t);return r===s.KnownCaipNamespace.Wallet?i?i===s.KnownCaipNamespace.Eip155?a.KnownWalletNamespaceRpcMethods[i].includes(t):c():a.KnownWalletRpcMethods.includes(t):r===s.KnownCaipNamespace.Eip155?a.KnownRpcMethods[r].includes(t):c()};n.isSupportedNotification=(e,t)=>{const{namespace:n}=(0,o.parseScopeString)(e);return n===s.KnownCaipNamespace.Eip155&&a.KnownNotifications[n].includes(t)};n.isSupportedSessionProperty=e=>Object.values(a.KnownSessionProperties).includes(e)}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/supported.cjs"}],[2122,{"./types.cjs":2123,lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.normalizeAndMergeScopes=n.mergeInternalScopes=n.mergeNormalizedScopes=n.mergeScopeObject=n.normalizeScope=n.getUniqueArrayItems=void 0;const r=e("lodash"),s=e("./types.cjs");n.getUniqueArrayItems=e=>Array.from(new Set(e));n.normalizeScope=(e,t)=>{const{references:n,...a}=t,{namespace:o,reference:i}=(0,s.parseScopeString)(e),c={accounts:[],...a};return o&&!i&&n!==undefined&&n.length>0?Object.fromEntries(n.map((e=>[`${o}:${e}`,(0,r.cloneDeep)(c)]))):{[e]:c}};n.mergeScopeObject=(e,t)=>{const r={methods:(0,n.getUniqueArrayItems)([...e.methods,...t.methods]),notifications:(0,n.getUniqueArrayItems)([...e.notifications,...t.notifications]),accounts:(0,n.getUniqueArrayItems)([...e.accounts,...t.accounts])};return(e.rpcDocuments||t.rpcDocuments)&&(r.rpcDocuments=(0,n.getUniqueArrayItems)([...e.rpcDocuments??[],...t.rpcDocuments??[]])),(e.rpcEndpoints||t.rpcEndpoints)&&(r.rpcEndpoints=(0,n.getUniqueArrayItems)([...e.rpcEndpoints??[],...t.rpcEndpoints??[]])),r};n.mergeNormalizedScopes=(e,t)=>{const r={};return Object.entries(e).forEach((([e,s])=>{const a=e,o=t[a];r[a]=o?(0,n.mergeScopeObject)(s,o):s})),Object.entries(t).forEach((([t,n])=>{const s=t;e[s]||(r[s]=n)})),r};n.mergeInternalScopes=(e,t)=>{const s=(0,r.cloneDeep)(e);return Object.entries(t).forEach((([e,t])=>{const r=e,a=s[r];s[r]=a?{accounts:(0,n.getUniqueArrayItems)([...a.accounts,...t.accounts])}:t})),s};n.normalizeAndMergeScopes=e=>{let t={};return Object.keys(e).forEach((r=>{const s=(0,n.normalizeScope)(r,e[r]);t=(0,n.mergeNormalizedScopes)(t,s)})),t}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/transform.cjs"}],[2123,{"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.parseScopeString=void 0;const r=e("@metamask/utils");n.parseScopeString=e=>(0,r.isCaipNamespace)(e)?{namespace:e}:(0,r.isCaipChainId)(e)?(0,r.parseCaipChainId)(e):{}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/types.cjs"}],[2124,{"./types.cjs":2123,"@metamask/utils":2822},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getValidScopes=n.isValidScope=void 0;const r=e("@metamask/utils"),s=e("./types.cjs");n.isValidScope=(e,t)=>{const{namespace:n,reference:a}=(0,s.parseScopeString)(e);if(!n)return!1;const{references:o,methods:i,notifications:c,accounts:l,rpcDocuments:d,rpcEndpoints:u,...p}=t;if(!i||!c)return!1;if(!("wallet"===n||a||o&&0!==o.length))return!1;if(o){if(a)return!1;if(!o.every((e=>(0,r.isCaipReference)(e))))return!1}if(!i.every((e=>"string"==typeof e&&""!==e.trim())))return!1;return!!c.every((e=>"string"==typeof e&&""!==e.trim()))&&!(Object.keys(p).length>0)};n.getValidScopes=(e,t)=>{const r={};for(const[t,s]of Object.entries(e||{}))(0,n.isValidScope)(t,s)&&(r[t]={accounts:[],...s});const s={};for(const[e,r]of Object.entries(t||{}))(0,n.isValidScope)(e,r)&&(s[e]={accounts:[],...r});return{validRequiredScopes:r,validOptionalScopes:s}}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/validation.cjs"}],[213,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:9,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=9;try{const e=function(e){const t=(0,r.merge)({},e,{CurrencyController:{currentCurrency:e.currentFiat||e.fiatCurrency||"USD",conversionRate:e.conversionRate,conversionDate:e.conversionDate}});return delete t.currentFiat,delete t.fiatCurrency,delete t.conversionRate,delete t.conversionDate,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #9${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/009.js"}],[214,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:10,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=10;try{const e=function(e){const t=(0,r.merge)({},e,{ShapeShiftController:{shapeShiftTxList:e.shapeShiftTxList||[]}});return delete t.shapeShiftTxList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #10${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/010.js"}],[215,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:11,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=11;try{const e=function(e){const t=e;return delete t.TOSHash,delete t.isDisclaimerConfirmed,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #11${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/011.js"}],[216,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:12,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=12;try{const e=function(e){const t=e;return t.NoticeController.noticesList.forEach((e=>{e.read&&(e.body="")})),t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #12${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/012.js"}],[217,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:13,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=13;try{const e=function(e){const t=e,{config:n}=t;n&&n.provider&&"testnet"===n.provider.type&&(t.config.provider.type="ropsten");return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #13${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/013.js"}],[218,{lodash:4725},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:14,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=14;try{const e=function(e){const t=e;return t.NetworkController={},t.NetworkController.provider=t.config.provider,delete t.config.provider,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #14${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/014.js"}]],[],{});